
generator_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000908  08007968  08007968  00017968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008270  08008270  0002140c  2**0
                  CONTENTS
  4 .ARM          00000008  08008270  08008270  00018270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008278  08008278  0002140c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008278  08008278  00018278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800827c  0800827c  0001827c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000140c  20000000  08008280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  2000140c  0800968c  0002140c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a24  0800968c  00021a24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002140c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014eaf  00000000  00000000  0002143c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002aab  00000000  00000000  000362eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001250  00000000  00000000  00038d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010f8  00000000  00000000  00039fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029207  00000000  00000000  0003b0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ef8f  00000000  00000000  000642e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f7877  00000000  00000000  00073276  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016aaed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000522c  00000000  00000000  0016ab68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000140c 	.word	0x2000140c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007950 	.word	0x08007950

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001410 	.word	0x20001410
 80001cc:	08007950 	.word	0x08007950

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b972 	b.w	8000d78 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9e08      	ldr	r6, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	4688      	mov	r8, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14b      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4615      	mov	r5, r2
 8000abe:	d967      	bls.n	8000b90 <__udivmoddi4+0xe4>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b14a      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac6:	f1c2 0720 	rsb	r7, r2, #32
 8000aca:	fa01 f302 	lsl.w	r3, r1, r2
 8000ace:	fa20 f707 	lsr.w	r7, r0, r7
 8000ad2:	4095      	lsls	r5, r2
 8000ad4:	ea47 0803 	orr.w	r8, r7, r3
 8000ad8:	4094      	lsls	r4, r2
 8000ada:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ade:	0c23      	lsrs	r3, r4, #16
 8000ae0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ae4:	fa1f fc85 	uxth.w	ip, r5
 8000ae8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000aec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af0:	fb07 f10c 	mul.w	r1, r7, ip
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d909      	bls.n	8000b0c <__udivmoddi4+0x60>
 8000af8:	18eb      	adds	r3, r5, r3
 8000afa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000afe:	f080 811b 	bcs.w	8000d38 <__udivmoddi4+0x28c>
 8000b02:	4299      	cmp	r1, r3
 8000b04:	f240 8118 	bls.w	8000d38 <__udivmoddi4+0x28c>
 8000b08:	3f02      	subs	r7, #2
 8000b0a:	442b      	add	r3, r5
 8000b0c:	1a5b      	subs	r3, r3, r1
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b1c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b20:	45a4      	cmp	ip, r4
 8000b22:	d909      	bls.n	8000b38 <__udivmoddi4+0x8c>
 8000b24:	192c      	adds	r4, r5, r4
 8000b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2a:	f080 8107 	bcs.w	8000d3c <__udivmoddi4+0x290>
 8000b2e:	45a4      	cmp	ip, r4
 8000b30:	f240 8104 	bls.w	8000d3c <__udivmoddi4+0x290>
 8000b34:	3802      	subs	r0, #2
 8000b36:	442c      	add	r4, r5
 8000b38:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b3c:	eba4 040c 	sub.w	r4, r4, ip
 8000b40:	2700      	movs	r7, #0
 8000b42:	b11e      	cbz	r6, 8000b4c <__udivmoddi4+0xa0>
 8000b44:	40d4      	lsrs	r4, r2
 8000b46:	2300      	movs	r3, #0
 8000b48:	e9c6 4300 	strd	r4, r3, [r6]
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d909      	bls.n	8000b6a <__udivmoddi4+0xbe>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	f000 80eb 	beq.w	8000d32 <__udivmoddi4+0x286>
 8000b5c:	2700      	movs	r7, #0
 8000b5e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b62:	4638      	mov	r0, r7
 8000b64:	4639      	mov	r1, r7
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	fab3 f783 	clz	r7, r3
 8000b6e:	2f00      	cmp	r7, #0
 8000b70:	d147      	bne.n	8000c02 <__udivmoddi4+0x156>
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d302      	bcc.n	8000b7c <__udivmoddi4+0xd0>
 8000b76:	4282      	cmp	r2, r0
 8000b78:	f200 80fa 	bhi.w	8000d70 <__udivmoddi4+0x2c4>
 8000b7c:	1a84      	subs	r4, r0, r2
 8000b7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b82:	2001      	movs	r0, #1
 8000b84:	4698      	mov	r8, r3
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	d0e0      	beq.n	8000b4c <__udivmoddi4+0xa0>
 8000b8a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b8e:	e7dd      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000b90:	b902      	cbnz	r2, 8000b94 <__udivmoddi4+0xe8>
 8000b92:	deff      	udf	#255	; 0xff
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	2a00      	cmp	r2, #0
 8000b9a:	f040 808f 	bne.w	8000cbc <__udivmoddi4+0x210>
 8000b9e:	1b49      	subs	r1, r1, r5
 8000ba0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba4:	fa1f f885 	uxth.w	r8, r5
 8000ba8:	2701      	movs	r7, #1
 8000baa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bae:	0c23      	lsrs	r3, r4, #16
 8000bb0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x124>
 8000bc0:	18eb      	adds	r3, r5, r3
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x122>
 8000bc8:	4299      	cmp	r1, r3
 8000bca:	f200 80cd 	bhi.w	8000d68 <__udivmoddi4+0x2bc>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1a59      	subs	r1, r3, r1
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bdc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x14c>
 8000be8:	192c      	adds	r4, r5, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x14a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80b6 	bhi.w	8000d62 <__udivmoddi4+0x2b6>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e79f      	b.n	8000b42 <__udivmoddi4+0x96>
 8000c02:	f1c7 0c20 	rsb	ip, r7, #32
 8000c06:	40bb      	lsls	r3, r7
 8000c08:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c0c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c10:	fa01 f407 	lsl.w	r4, r1, r7
 8000c14:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c18:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c1c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c20:	4325      	orrs	r5, r4
 8000c22:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c26:	0c2c      	lsrs	r4, r5, #16
 8000c28:	fb08 3319 	mls	r3, r8, r9, r3
 8000c2c:	fa1f fa8e 	uxth.w	sl, lr
 8000c30:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c34:	fb09 f40a 	mul.w	r4, r9, sl
 8000c38:	429c      	cmp	r4, r3
 8000c3a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c3e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c42:	d90b      	bls.n	8000c5c <__udivmoddi4+0x1b0>
 8000c44:	eb1e 0303 	adds.w	r3, lr, r3
 8000c48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c4c:	f080 8087 	bcs.w	8000d5e <__udivmoddi4+0x2b2>
 8000c50:	429c      	cmp	r4, r3
 8000c52:	f240 8084 	bls.w	8000d5e <__udivmoddi4+0x2b2>
 8000c56:	f1a9 0902 	sub.w	r9, r9, #2
 8000c5a:	4473      	add	r3, lr
 8000c5c:	1b1b      	subs	r3, r3, r4
 8000c5e:	b2ad      	uxth	r5, r5
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c6c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c70:	45a2      	cmp	sl, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x1da>
 8000c74:	eb1e 0404 	adds.w	r4, lr, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	d26b      	bcs.n	8000d56 <__udivmoddi4+0x2aa>
 8000c7e:	45a2      	cmp	sl, r4
 8000c80:	d969      	bls.n	8000d56 <__udivmoddi4+0x2aa>
 8000c82:	3802      	subs	r0, #2
 8000c84:	4474      	add	r4, lr
 8000c86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c8e:	eba4 040a 	sub.w	r4, r4, sl
 8000c92:	454c      	cmp	r4, r9
 8000c94:	46c2      	mov	sl, r8
 8000c96:	464b      	mov	r3, r9
 8000c98:	d354      	bcc.n	8000d44 <__udivmoddi4+0x298>
 8000c9a:	d051      	beq.n	8000d40 <__udivmoddi4+0x294>
 8000c9c:	2e00      	cmp	r6, #0
 8000c9e:	d069      	beq.n	8000d74 <__udivmoddi4+0x2c8>
 8000ca0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ca4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ca8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cac:	40fd      	lsrs	r5, r7
 8000cae:	40fc      	lsrs	r4, r7
 8000cb0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cb4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cb8:	2700      	movs	r7, #0
 8000cba:	e747      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000cbc:	f1c2 0320 	rsb	r3, r2, #32
 8000cc0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cc4:	4095      	lsls	r5, r2
 8000cc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cca:	fa21 f303 	lsr.w	r3, r1, r3
 8000cce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd2:	4338      	orrs	r0, r7
 8000cd4:	0c01      	lsrs	r1, r0, #16
 8000cd6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cda:	fa1f f885 	uxth.w	r8, r5
 8000cde:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ce2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce6:	fb07 f308 	mul.w	r3, r7, r8
 8000cea:	428b      	cmp	r3, r1
 8000cec:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x256>
 8000cf2:	1869      	adds	r1, r5, r1
 8000cf4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cf8:	d22f      	bcs.n	8000d5a <__udivmoddi4+0x2ae>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d92d      	bls.n	8000d5a <__udivmoddi4+0x2ae>
 8000cfe:	3f02      	subs	r7, #2
 8000d00:	4429      	add	r1, r5
 8000d02:	1acb      	subs	r3, r1, r3
 8000d04:	b281      	uxth	r1, r0
 8000d06:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d0a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d12:	fb00 f308 	mul.w	r3, r0, r8
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d907      	bls.n	8000d2a <__udivmoddi4+0x27e>
 8000d1a:	1869      	adds	r1, r5, r1
 8000d1c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d20:	d217      	bcs.n	8000d52 <__udivmoddi4+0x2a6>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d915      	bls.n	8000d52 <__udivmoddi4+0x2a6>
 8000d26:	3802      	subs	r0, #2
 8000d28:	4429      	add	r1, r5
 8000d2a:	1ac9      	subs	r1, r1, r3
 8000d2c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d30:	e73b      	b.n	8000baa <__udivmoddi4+0xfe>
 8000d32:	4637      	mov	r7, r6
 8000d34:	4630      	mov	r0, r6
 8000d36:	e709      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000d38:	4607      	mov	r7, r0
 8000d3a:	e6e7      	b.n	8000b0c <__udivmoddi4+0x60>
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	e6fb      	b.n	8000b38 <__udivmoddi4+0x8c>
 8000d40:	4541      	cmp	r1, r8
 8000d42:	d2ab      	bcs.n	8000c9c <__udivmoddi4+0x1f0>
 8000d44:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d48:	eb69 020e 	sbc.w	r2, r9, lr
 8000d4c:	3801      	subs	r0, #1
 8000d4e:	4613      	mov	r3, r2
 8000d50:	e7a4      	b.n	8000c9c <__udivmoddi4+0x1f0>
 8000d52:	4660      	mov	r0, ip
 8000d54:	e7e9      	b.n	8000d2a <__udivmoddi4+0x27e>
 8000d56:	4618      	mov	r0, r3
 8000d58:	e795      	b.n	8000c86 <__udivmoddi4+0x1da>
 8000d5a:	4667      	mov	r7, ip
 8000d5c:	e7d1      	b.n	8000d02 <__udivmoddi4+0x256>
 8000d5e:	4681      	mov	r9, r0
 8000d60:	e77c      	b.n	8000c5c <__udivmoddi4+0x1b0>
 8000d62:	3802      	subs	r0, #2
 8000d64:	442c      	add	r4, r5
 8000d66:	e747      	b.n	8000bf8 <__udivmoddi4+0x14c>
 8000d68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d6c:	442b      	add	r3, r5
 8000d6e:	e72f      	b.n	8000bd0 <__udivmoddi4+0x124>
 8000d70:	4638      	mov	r0, r7
 8000d72:	e708      	b.n	8000b86 <__udivmoddi4+0xda>
 8000d74:	4637      	mov	r7, r6
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0xa0>

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d86:	2003      	movs	r0, #3
 8000d88:	f000 f95a 	bl	8001040 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f000 f80d 	bl	8000dac <HAL_InitTick>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d002      	beq.n	8000d9e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	71fb      	strb	r3, [r7, #7]
 8000d9c:	e001      	b.n	8000da2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d9e:	f005 ff3d 	bl	8006c1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000da2:	79fb      	ldrb	r3, [r7, #7]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000db8:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <HAL_InitTick+0x68>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d022      	beq.n	8000e06 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <HAL_InitTick+0x6c>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <HAL_InitTick+0x68>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 f968 	bl	80010aa <HAL_SYSTICK_Config>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d10f      	bne.n	8000e00 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b0f      	cmp	r3, #15
 8000de4:	d809      	bhi.n	8000dfa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de6:	2200      	movs	r2, #0
 8000de8:	6879      	ldr	r1, [r7, #4]
 8000dea:	f04f 30ff 	mov.w	r0, #4294967295
 8000dee:	f000 f932 	bl	8001056 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <HAL_InitTick+0x70>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6013      	str	r3, [r2, #0]
 8000df8:	e007      	b.n	8000e0a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	73fb      	strb	r3, [r7, #15]
 8000dfe:	e004      	b.n	8000e0a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
 8000e04:	e001      	b.n	8000e0a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000004 	.word	0x20000004
 8000e18:	20001238 	.word	0x20001238
 8000e1c:	20000000 	.word	0x20000000

08000e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <HAL_IncTick+0x1c>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <HAL_IncTick+0x20>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a03      	ldr	r2, [pc, #12]	; (8000e3c <HAL_IncTick+0x1c>)
 8000e30:	6013      	str	r3, [r2, #0]
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	200018c4 	.word	0x200018c4
 8000e40:	20000004 	.word	0x20000004

08000e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <HAL_GetTick+0x14>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	200018c4 	.word	0x200018c4

08000e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e64:	f7ff ffee 	bl	8000e44 <HAL_GetTick>
 8000e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e74:	d004      	beq.n	8000e80 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_Delay+0x40>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e80:	bf00      	nop
 8000e82:	f7ff ffdf 	bl	8000e44 <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d8f7      	bhi.n	8000e82 <HAL_Delay+0x26>
  {
  }
}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000004 	.word	0x20000004

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed2:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	60d3      	str	r3, [r2, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db0b      	blt.n	8000f2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	f003 021f 	and.w	r2, r3, #31
 8000f1c:	4907      	ldr	r1, [pc, #28]	; (8000f3c <__NVIC_EnableIRQ+0x38>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	095b      	lsrs	r3, r3, #5
 8000f24:	2001      	movs	r0, #1
 8000f26:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000e100 	.word	0xe000e100

08000f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	db0a      	blt.n	8000f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	490c      	ldr	r1, [pc, #48]	; (8000f8c <__NVIC_SetPriority+0x4c>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	0112      	lsls	r2, r2, #4
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	440b      	add	r3, r1
 8000f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f68:	e00a      	b.n	8000f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4908      	ldr	r1, [pc, #32]	; (8000f90 <__NVIC_SetPriority+0x50>)
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	3b04      	subs	r3, #4
 8000f78:	0112      	lsls	r2, r2, #4
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	761a      	strb	r2, [r3, #24]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000e100 	.word	0xe000e100
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	; 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f1c3 0307 	rsb	r3, r3, #7
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	bf28      	it	cs
 8000fb2:	2304      	movcs	r3, #4
 8000fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	2b06      	cmp	r3, #6
 8000fbc:	d902      	bls.n	8000fc4 <NVIC_EncodePriority+0x30>
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3b03      	subs	r3, #3
 8000fc2:	e000      	b.n	8000fc6 <NVIC_EncodePriority+0x32>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	43d9      	mvns	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	4313      	orrs	r3, r2
         );
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3724      	adds	r7, #36	; 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800100c:	d301      	bcc.n	8001012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100e:	2301      	movs	r3, #1
 8001010:	e00f      	b.n	8001032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <SysTick_Config+0x40>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101a:	210f      	movs	r1, #15
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f7ff ff8e 	bl	8000f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <SysTick_Config+0x40>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102a:	4b04      	ldr	r3, [pc, #16]	; (800103c <SysTick_Config+0x40>)
 800102c:	2207      	movs	r2, #7
 800102e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	e000e010 	.word	0xe000e010

08001040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff29 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
 8001062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001068:	f7ff ff3e 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 800106c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	6978      	ldr	r0, [r7, #20]
 8001074:	f7ff ff8e 	bl	8000f94 <NVIC_EncodePriority>
 8001078:	4602      	mov	r2, r0
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff5d 	bl	8000f40 <__NVIC_SetPriority>
}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff31 	bl	8000f04 <__NVIC_EnableIRQ>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ffa2 	bl	8000ffc <SysTick_Config>
 80010b8:	4603      	mov	r3, r0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d101      	bne.n	80010d4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e014      	b.n	80010fe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	791b      	ldrb	r3, [r3, #4]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d105      	bne.n	80010ea <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f005 fdbd 	bl	8006c64 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2202      	movs	r2, #2
 80010ee:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2201      	movs	r2, #1
 80010fa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	795b      	ldrb	r3, [r3, #5]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d101      	bne.n	800111c <HAL_DAC_Start+0x16>
 8001118:	2302      	movs	r3, #2
 800111a:	e03b      	b.n	8001194 <HAL_DAC_Start+0x8e>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2201      	movs	r2, #1
 8001120:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2202      	movs	r2, #2
 8001126:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6819      	ldr	r1, [r3, #0]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	f003 0310 	and.w	r3, r3, #16
 8001134:	2201      	movs	r2, #1
 8001136:	409a      	lsls	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	430a      	orrs	r2, r1
 800113e:	601a      	str	r2, [r3, #0]

#endif /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d10f      	bne.n	8001166 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001150:	2b04      	cmp	r3, #4
 8001152:	d118      	bne.n	8001186 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f042 0201 	orr.w	r2, r2, #1
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	e00f      	b.n	8001186 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001170:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001174:	d107      	bne.n	8001186 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f042 0202 	orr.w	r2, r2, #2
 8001184:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b087      	sub	sp, #28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d105      	bne.n	80011ca <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4413      	add	r3, r2
 80011c4:	3308      	adds	r3, #8
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	e004      	b.n	80011d4 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4413      	add	r3, r2
 80011d0:	3314      	adds	r3, #20
 80011d2:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	461a      	mov	r2, r3
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	371c      	adds	r7, #28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b088      	sub	sp, #32
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	60f8      	str	r0, [r7, #12]
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	795b      	ldrb	r3, [r3, #5]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d101      	bne.n	8001206 <HAL_DAC_ConfigChannel+0x1c>
 8001202:	2302      	movs	r3, #2
 8001204:	e107      	b.n	8001416 <HAL_DAC_ConfigChannel+0x22c>
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2201      	movs	r2, #1
 800120a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2202      	movs	r2, #2
 8001210:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b04      	cmp	r3, #4
 8001218:	d174      	bne.n	8001304 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d137      	bne.n	8001290 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8001220:	f7ff fe10 	bl	8000e44 <HAL_GetTick>
 8001224:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001226:	e011      	b.n	800124c <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001228:	f7ff fe0c 	bl	8000e44 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b01      	cmp	r3, #1
 8001234:	d90a      	bls.n	800124c <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	f043 0208 	orr.w	r2, r3, #8
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2203      	movs	r2, #3
 8001246:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e0e4      	b.n	8001416 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1e6      	bne.n	8001228 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800125a:	2001      	movs	r0, #1
 800125c:	f7ff fdfe 	bl	8000e5c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	68ba      	ldr	r2, [r7, #8]
 8001266:	6992      	ldr	r2, [r2, #24]
 8001268:	641a      	str	r2, [r3, #64]	; 0x40
 800126a:	e01e      	b.n	80012aa <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800126c:	f7ff fdea 	bl	8000e44 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b01      	cmp	r3, #1
 8001278:	d90a      	bls.n	8001290 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	f043 0208 	orr.w	r2, r3, #8
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2203      	movs	r2, #3
 800128a:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e0c2      	b.n	8001416 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001296:	2b00      	cmp	r3, #0
 8001298:	dbe8      	blt.n	800126c <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800129a:	2001      	movs	r0, #1
 800129c:	f7ff fdde 	bl	8000e5c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	6992      	ldr	r2, [r2, #24]
 80012a8:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f003 0310 	and.w	r3, r3, #16
 80012b6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	ea02 0103 	and.w	r1, r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	69da      	ldr	r2, [r3, #28]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0310 	and.w	r3, r3, #16
 80012ce:	409a      	lsls	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	430a      	orrs	r2, r1
 80012d6:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	21ff      	movs	r1, #255	; 0xff
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	ea02 0103 	and.w	r1, r2, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	6a1a      	ldr	r2, [r3, #32]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f003 0310 	and.w	r3, r3, #16
 80012fa:	409a      	lsls	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	430a      	orrs	r2, r1
 8001302:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d11d      	bne.n	8001348 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001312:	61bb      	str	r3, [r7, #24]
  /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0310 	and.w	r3, r3, #16
 800131a:	221f      	movs	r2, #31
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	617b      	str	r3, [r7, #20]
  /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f003 0310 	and.w	r3, r3, #16
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800134e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f003 0310 	and.w	r3, r3, #16
 8001356:	2207      	movs	r2, #7
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	431a      	orrs	r2, r3
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	4313      	orrs	r3, r2
 8001374:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f003 0310 	and.w	r3, r3, #16
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6819      	ldr	r1, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f003 0310 	and.w	r3, r3, #16
 800139c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43da      	mvns	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	400a      	ands	r2, r1
 80013ac:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f003 0310 	and.w	r3, r3, #16
 80013bc:	f640 72fc 	movw	r2, #4092	; 0xffc
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f003 0310 	and.w	r3, r3, #16
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6819      	ldr	r1, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f003 0310 	and.w	r3, r3, #16
 80013f8:	22c0      	movs	r2, #192	; 0xc0
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43da      	mvns	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	400a      	ands	r2, r1
 8001406:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2201      	movs	r2, #1
 800140c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2200      	movs	r2, #0
 8001412:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3720      	adds	r7, #32
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b084      	sub	sp, #16
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d005      	beq.n	8001442 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2204      	movs	r2, #4
 800143a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	73fb      	strb	r3, [r7, #15]
 8001440:	e029      	b.n	8001496 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 020e 	bic.w	r2, r2, #14
 8001450:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0201 	bic.w	r2, r2, #1
 8001460:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	f003 021c 	and.w	r2, r3, #28
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	2101      	movs	r1, #1
 8001470:	fa01 f202 	lsl.w	r2, r1, r2
 8001474:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2201      	movs	r2, #1
 800147a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	4798      	blx	r3
    }
  }
  return status;
 8001496:	7bfb      	ldrb	r3, [r7, #15]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b087      	sub	sp, #28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ae:	e17f      	b.n	80017b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	2101      	movs	r1, #1
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	4013      	ands	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 8171 	beq.w	80017aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x38>
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b12      	cmp	r3, #18
 80014d6:	d123      	bne.n	8001520 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	08da      	lsrs	r2, r3, #3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3208      	adds	r2, #8
 80014e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f003 0307 	and.w	r3, r3, #7
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	220f      	movs	r2, #15
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	691a      	ldr	r2, [r3, #16]
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	08da      	lsrs	r2, r3, #3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3208      	adds	r2, #8
 800151a:	6939      	ldr	r1, [r7, #16]
 800151c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	2203      	movs	r2, #3
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0203 	and.w	r2, r3, #3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	4313      	orrs	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d00b      	beq.n	8001574 <HAL_GPIO_Init+0xd4>
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b02      	cmp	r3, #2
 8001562:	d007      	beq.n	8001574 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001568:	2b11      	cmp	r3, #17
 800156a:	d003      	beq.n	8001574 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b12      	cmp	r3, #18
 8001572:	d130      	bne.n	80015d6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	2203      	movs	r2, #3
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4313      	orrs	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015aa:	2201      	movs	r2, #1
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	f003 0201 	and.w	r2, r3, #1
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d118      	bne.n	8001614 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80015e8:	2201      	movs	r2, #1
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	08db      	lsrs	r3, r3, #3
 80015fe:	f003 0201 	and.w	r2, r3, #1
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4313      	orrs	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	2203      	movs	r2, #3
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 80ac 	beq.w	80017aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	4b5e      	ldr	r3, [pc, #376]	; (80017cc <HAL_GPIO_Init+0x32c>)
 8001654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001656:	4a5d      	ldr	r2, [pc, #372]	; (80017cc <HAL_GPIO_Init+0x32c>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6613      	str	r3, [r2, #96]	; 0x60
 800165e:	4b5b      	ldr	r3, [pc, #364]	; (80017cc <HAL_GPIO_Init+0x32c>)
 8001660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800166a:	4a59      	ldr	r2, [pc, #356]	; (80017d0 <HAL_GPIO_Init+0x330>)
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	089b      	lsrs	r3, r3, #2
 8001670:	3302      	adds	r3, #2
 8001672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001676:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	220f      	movs	r2, #15
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001694:	d025      	beq.n	80016e2 <HAL_GPIO_Init+0x242>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4e      	ldr	r2, [pc, #312]	; (80017d4 <HAL_GPIO_Init+0x334>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d01f      	beq.n	80016de <HAL_GPIO_Init+0x23e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4d      	ldr	r2, [pc, #308]	; (80017d8 <HAL_GPIO_Init+0x338>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d019      	beq.n	80016da <HAL_GPIO_Init+0x23a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4c      	ldr	r2, [pc, #304]	; (80017dc <HAL_GPIO_Init+0x33c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d013      	beq.n	80016d6 <HAL_GPIO_Init+0x236>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4b      	ldr	r2, [pc, #300]	; (80017e0 <HAL_GPIO_Init+0x340>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d00d      	beq.n	80016d2 <HAL_GPIO_Init+0x232>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4a      	ldr	r2, [pc, #296]	; (80017e4 <HAL_GPIO_Init+0x344>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d007      	beq.n	80016ce <HAL_GPIO_Init+0x22e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a49      	ldr	r2, [pc, #292]	; (80017e8 <HAL_GPIO_Init+0x348>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <HAL_GPIO_Init+0x22a>
 80016c6:	2306      	movs	r3, #6
 80016c8:	e00c      	b.n	80016e4 <HAL_GPIO_Init+0x244>
 80016ca:	2307      	movs	r3, #7
 80016cc:	e00a      	b.n	80016e4 <HAL_GPIO_Init+0x244>
 80016ce:	2305      	movs	r3, #5
 80016d0:	e008      	b.n	80016e4 <HAL_GPIO_Init+0x244>
 80016d2:	2304      	movs	r3, #4
 80016d4:	e006      	b.n	80016e4 <HAL_GPIO_Init+0x244>
 80016d6:	2303      	movs	r3, #3
 80016d8:	e004      	b.n	80016e4 <HAL_GPIO_Init+0x244>
 80016da:	2302      	movs	r3, #2
 80016dc:	e002      	b.n	80016e4 <HAL_GPIO_Init+0x244>
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <HAL_GPIO_Init+0x244>
 80016e2:	2300      	movs	r3, #0
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	f002 0203 	and.w	r2, r2, #3
 80016ea:	0092      	lsls	r2, r2, #2
 80016ec:	4093      	lsls	r3, r2
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016f4:	4936      	ldr	r1, [pc, #216]	; (80017d0 <HAL_GPIO_Init+0x330>)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	089b      	lsrs	r3, r3, #2
 80016fa:	3302      	adds	r3, #2
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001702:	4b3a      	ldr	r3, [pc, #232]	; (80017ec <HAL_GPIO_Init+0x34c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	43db      	mvns	r3, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4313      	orrs	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001726:	4a31      	ldr	r2, [pc, #196]	; (80017ec <HAL_GPIO_Init+0x34c>)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800172c:	4b2f      	ldr	r3, [pc, #188]	; (80017ec <HAL_GPIO_Init+0x34c>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	43db      	mvns	r3, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001750:	4a26      	ldr	r2, [pc, #152]	; (80017ec <HAL_GPIO_Init+0x34c>)
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001756:	4b25      	ldr	r3, [pc, #148]	; (80017ec <HAL_GPIO_Init+0x34c>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	43db      	mvns	r3, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800177a:	4a1c      	ldr	r2, [pc, #112]	; (80017ec <HAL_GPIO_Init+0x34c>)
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001780:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <HAL_GPIO_Init+0x34c>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	43db      	mvns	r3, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017a4:	4a11      	ldr	r2, [pc, #68]	; (80017ec <HAL_GPIO_Init+0x34c>)
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3301      	adds	r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f47f ae78 	bne.w	80014b0 <HAL_GPIO_Init+0x10>
  }
}
 80017c0:	bf00      	nop
 80017c2:	371c      	adds	r7, #28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40010000 	.word	0x40010000
 80017d4:	48000400 	.word	0x48000400
 80017d8:	48000800 	.word	0x48000800
 80017dc:	48000c00 	.word	0x48000c00
 80017e0:	48001000 	.word	0x48001000
 80017e4:	48001400 	.word	0x48001400
 80017e8:	48001800 	.word	0x48001800
 80017ec:	40010400 	.word	0x40010400

080017f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	807b      	strh	r3, [r7, #2]
 80017fc:	4613      	mov	r3, r2
 80017fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001800:	787b      	ldrb	r3, [r7, #1]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001806:	887a      	ldrh	r2, [r7, #2]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800180c:	e002      	b.n	8001814 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800180e:	887a      	ldrh	r2, [r7, #2]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <HAL_PWREx_GetVoltageRange+0x18>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800182c:	4618      	mov	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40007000 	.word	0x40007000

0800183c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800184a:	d130      	bne.n	80018ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800184c:	4b23      	ldr	r3, [pc, #140]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001858:	d038      	beq.n	80018cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800185a:	4b20      	ldr	r3, [pc, #128]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001862:	4a1e      	ldr	r2, [pc, #120]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001864:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001868:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800186a:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2232      	movs	r2, #50	; 0x32
 8001870:	fb02 f303 	mul.w	r3, r2, r3
 8001874:	4a1b      	ldr	r2, [pc, #108]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	0c9b      	lsrs	r3, r3, #18
 800187c:	3301      	adds	r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001880:	e002      	b.n	8001888 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	3b01      	subs	r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001888:	4b14      	ldr	r3, [pc, #80]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001894:	d102      	bne.n	800189c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f2      	bne.n	8001882 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800189c:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018a8:	d110      	bne.n	80018cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e00f      	b.n	80018ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ba:	d007      	beq.n	80018cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018bc:	4b07      	ldr	r3, [pc, #28]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018c4:	4a05      	ldr	r2, [pc, #20]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40007000 	.word	0x40007000
 80018e0:	20001238 	.word	0x20001238
 80018e4:	431bde83 	.word	0x431bde83

080018e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e39d      	b.n	8002036 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018fa:	4ba4      	ldr	r3, [pc, #656]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001904:	4ba1      	ldr	r3, [pc, #644]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0310 	and.w	r3, r3, #16
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 80e1 	beq.w	8001ade <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d007      	beq.n	8001932 <HAL_RCC_OscConfig+0x4a>
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	2b0c      	cmp	r3, #12
 8001926:	f040 8088 	bne.w	8001a3a <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	2b01      	cmp	r3, #1
 800192e:	f040 8084 	bne.w	8001a3a <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001932:	4b96      	ldr	r3, [pc, #600]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d005      	beq.n	800194a <HAL_RCC_OscConfig+0x62>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e375      	b.n	8002036 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a1a      	ldr	r2, [r3, #32]
 800194e:	4b8f      	ldr	r3, [pc, #572]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d004      	beq.n	8001964 <HAL_RCC_OscConfig+0x7c>
 800195a:	4b8c      	ldr	r3, [pc, #560]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001962:	e005      	b.n	8001970 <HAL_RCC_OscConfig+0x88>
 8001964:	4b89      	ldr	r3, [pc, #548]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800196a:	091b      	lsrs	r3, r3, #4
 800196c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001970:	4293      	cmp	r3, r2
 8001972:	d223      	bcs.n	80019bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	4618      	mov	r0, r3
 800197a:	f000 fd09 	bl	8002390 <RCC_SetFlashLatencyFromMSIRange>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e356      	b.n	8002036 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001988:	4b80      	ldr	r3, [pc, #512]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a7f      	ldr	r2, [pc, #508]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 800198e:	f043 0308 	orr.w	r3, r3, #8
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b7d      	ldr	r3, [pc, #500]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	497a      	ldr	r1, [pc, #488]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019a6:	4b79      	ldr	r3, [pc, #484]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	4975      	ldr	r1, [pc, #468]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	604b      	str	r3, [r1, #4]
 80019ba:	e022      	b.n	8001a02 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019bc:	4b73      	ldr	r3, [pc, #460]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a72      	ldr	r2, [pc, #456]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 80019c2:	f043 0308 	orr.w	r3, r3, #8
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	4b70      	ldr	r3, [pc, #448]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	496d      	ldr	r1, [pc, #436]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019da:	4b6c      	ldr	r3, [pc, #432]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	021b      	lsls	r3, r3, #8
 80019e8:	4968      	ldr	r1, [pc, #416]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 fccc 	bl	8002390 <RCC_SetFlashLatencyFromMSIRange>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e319      	b.n	8002036 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a02:	f000 fc03 	bl	800220c <HAL_RCC_GetSysClockFreq>
 8001a06:	4601      	mov	r1, r0
 8001a08:	4b60      	ldr	r3, [pc, #384]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	091b      	lsrs	r3, r3, #4
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	4a5f      	ldr	r2, [pc, #380]	; (8001b90 <HAL_RCC_OscConfig+0x2a8>)
 8001a14:	5cd3      	ldrb	r3, [r2, r3]
 8001a16:	f003 031f 	and.w	r3, r3, #31
 8001a1a:	fa21 f303 	lsr.w	r3, r1, r3
 8001a1e:	4a5d      	ldr	r2, [pc, #372]	; (8001b94 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a22:	4b5d      	ldr	r3, [pc, #372]	; (8001b98 <HAL_RCC_OscConfig+0x2b0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff f9c0 	bl	8000dac <HAL_InitTick>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d052      	beq.n	8001adc <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	e2fd      	b.n	8002036 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d032      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a42:	4b52      	ldr	r3, [pc, #328]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a51      	ldr	r2, [pc, #324]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a4e:	f7ff f9f9 	bl	8000e44 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a56:	f7ff f9f5 	bl	8000e44 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e2e6      	b.n	8002036 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a68:	4b48      	ldr	r3, [pc, #288]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a74:	4b45      	ldr	r3, [pc, #276]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a44      	ldr	r2, [pc, #272]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001a7a:	f043 0308 	orr.w	r3, r3, #8
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	4b42      	ldr	r3, [pc, #264]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	493f      	ldr	r1, [pc, #252]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a92:	4b3e      	ldr	r3, [pc, #248]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	021b      	lsls	r3, r3, #8
 8001aa0:	493a      	ldr	r1, [pc, #232]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	604b      	str	r3, [r1, #4]
 8001aa6:	e01a      	b.n	8001ade <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001aa8:	4b38      	ldr	r3, [pc, #224]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a37      	ldr	r2, [pc, #220]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001aae:	f023 0301 	bic.w	r3, r3, #1
 8001ab2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff f9c6 	bl	8000e44 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001abc:	f7ff f9c2 	bl	8000e44 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e2b3      	b.n	8002036 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ace:	4b2f      	ldr	r3, [pc, #188]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x1d4>
 8001ada:	e000      	b.n	8001ade <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001adc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d074      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d005      	beq.n	8001afc <HAL_RCC_OscConfig+0x214>
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	2b0c      	cmp	r3, #12
 8001af4:	d10e      	bne.n	8001b14 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d10b      	bne.n	8001b14 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afc:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d064      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x2ea>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d160      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e290      	b.n	8002036 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b1c:	d106      	bne.n	8001b2c <HAL_RCC_OscConfig+0x244>
 8001b1e:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a1a      	ldr	r2, [pc, #104]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	e01d      	b.n	8001b68 <HAL_RCC_OscConfig+0x280>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b34:	d10c      	bne.n	8001b50 <HAL_RCC_OscConfig+0x268>
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a14      	ldr	r2, [pc, #80]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a11      	ldr	r2, [pc, #68]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	e00b      	b.n	8001b68 <HAL_RCC_OscConfig+0x280>
 8001b50:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <HAL_RCC_OscConfig+0x2a4>)
 8001b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d01c      	beq.n	8001baa <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b70:	f7ff f968 	bl	8000e44 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b76:	e011      	b.n	8001b9c <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b78:	f7ff f964 	bl	8000e44 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b64      	cmp	r3, #100	; 0x64
 8001b84:	d90a      	bls.n	8001b9c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e255      	b.n	8002036 <HAL_RCC_OscConfig+0x74e>
 8001b8a:	bf00      	nop
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	080080e8 	.word	0x080080e8
 8001b94:	20001238 	.word	0x20001238
 8001b98:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b9c:	4bae      	ldr	r3, [pc, #696]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0e7      	beq.n	8001b78 <HAL_RCC_OscConfig+0x290>
 8001ba8:	e014      	b.n	8001bd4 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001baa:	f7ff f94b 	bl	8000e44 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb2:	f7ff f947 	bl	8000e44 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b64      	cmp	r3, #100	; 0x64
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e238      	b.n	8002036 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bc4:	4ba4      	ldr	r3, [pc, #656]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f0      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x2ca>
 8001bd0:	e000      	b.n	8001bd4 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d060      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d005      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x30a>
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	2b0c      	cmp	r3, #12
 8001bea:	d119      	bne.n	8001c20 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d116      	bne.n	8001c20 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bf2:	4b99      	ldr	r3, [pc, #612]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d005      	beq.n	8001c0a <HAL_RCC_OscConfig+0x322>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e215      	b.n	8002036 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0a:	4b93      	ldr	r3, [pc, #588]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	061b      	lsls	r3, r3, #24
 8001c18:	498f      	ldr	r1, [pc, #572]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c1e:	e040      	b.n	8001ca2 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d023      	beq.n	8001c70 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c28:	4b8b      	ldr	r3, [pc, #556]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a8a      	ldr	r2, [pc, #552]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c34:	f7ff f906 	bl	8000e44 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c3c:	f7ff f902 	bl	8000e44 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e1f3      	b.n	8002036 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c4e:	4b82      	ldr	r3, [pc, #520]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5a:	4b7f      	ldr	r3, [pc, #508]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	061b      	lsls	r3, r3, #24
 8001c68:	497b      	ldr	r1, [pc, #492]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	604b      	str	r3, [r1, #4]
 8001c6e:	e018      	b.n	8001ca2 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c70:	4b79      	ldr	r3, [pc, #484]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a78      	ldr	r2, [pc, #480]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001c76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7c:	f7ff f8e2 	bl	8000e44 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c84:	f7ff f8de 	bl	8000e44 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e1cf      	b.n	8002036 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c96:	4b70      	ldr	r3, [pc, #448]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d03c      	beq.n	8001d28 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d01c      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb6:	4b68      	ldr	r3, [pc, #416]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cbc:	4a66      	ldr	r2, [pc, #408]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc6:	f7ff f8bd 	bl	8000e44 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cce:	f7ff f8b9 	bl	8000e44 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e1aa      	b.n	8002036 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ce0:	4b5d      	ldr	r3, [pc, #372]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0ef      	beq.n	8001cce <HAL_RCC_OscConfig+0x3e6>
 8001cee:	e01b      	b.n	8001d28 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cf0:	4b59      	ldr	r3, [pc, #356]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf6:	4a58      	ldr	r2, [pc, #352]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001cf8:	f023 0301 	bic.w	r3, r3, #1
 8001cfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d00:	f7ff f8a0 	bl	8000e44 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d08:	f7ff f89c 	bl	8000e44 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e18d      	b.n	8002036 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d1a:	4b4f      	ldr	r3, [pc, #316]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1ef      	bne.n	8001d08 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 80a5 	beq.w	8001e80 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d3a:	4b47      	ldr	r3, [pc, #284]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10d      	bne.n	8001d62 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	4b44      	ldr	r3, [pc, #272]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4a:	4a43      	ldr	r2, [pc, #268]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d50:	6593      	str	r3, [r2, #88]	; 0x58
 8001d52:	4b41      	ldr	r3, [pc, #260]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d62:	4b3e      	ldr	r3, [pc, #248]	; (8001e5c <HAL_RCC_OscConfig+0x574>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d118      	bne.n	8001da0 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d6e:	4b3b      	ldr	r3, [pc, #236]	; (8001e5c <HAL_RCC_OscConfig+0x574>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a3a      	ldr	r2, [pc, #232]	; (8001e5c <HAL_RCC_OscConfig+0x574>)
 8001d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d7a:	f7ff f863 	bl	8000e44 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d82:	f7ff f85f 	bl	8000e44 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e150      	b.n	8002036 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d94:	4b31      	ldr	r3, [pc, #196]	; (8001e5c <HAL_RCC_OscConfig+0x574>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d108      	bne.n	8001dba <HAL_RCC_OscConfig+0x4d2>
 8001da8:	4b2b      	ldr	r3, [pc, #172]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dae:	4a2a      	ldr	r2, [pc, #168]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001db8:	e024      	b.n	8001e04 <HAL_RCC_OscConfig+0x51c>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b05      	cmp	r3, #5
 8001dc0:	d110      	bne.n	8001de4 <HAL_RCC_OscConfig+0x4fc>
 8001dc2:	4b25      	ldr	r3, [pc, #148]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc8:	4a23      	ldr	r2, [pc, #140]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001dca:	f043 0304 	orr.w	r3, r3, #4
 8001dce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dd2:	4b21      	ldr	r3, [pc, #132]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd8:	4a1f      	ldr	r2, [pc, #124]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001de2:	e00f      	b.n	8001e04 <HAL_RCC_OscConfig+0x51c>
 8001de4:	4b1c      	ldr	r3, [pc, #112]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dea:	4a1b      	ldr	r2, [pc, #108]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001dec:	f023 0301 	bic.w	r3, r3, #1
 8001df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001df4:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfa:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001dfc:	f023 0304 	bic.w	r3, r3, #4
 8001e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d016      	beq.n	8001e3a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0c:	f7ff f81a 	bl	8000e44 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e12:	e00a      	b.n	8001e2a <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e14:	f7ff f816 	bl	8000e44 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e105      	b.n	8002036 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_RCC_OscConfig+0x570>)
 8001e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0ed      	beq.n	8001e14 <HAL_RCC_OscConfig+0x52c>
 8001e38:	e019      	b.n	8001e6e <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3a:	f7ff f803 	bl	8000e44 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e40:	e00e      	b.n	8001e60 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e42:	f7fe ffff 	bl	8000e44 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d905      	bls.n	8001e60 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e0ee      	b.n	8002036 <HAL_RCC_OscConfig+0x74e>
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e60:	4b77      	ldr	r3, [pc, #476]	; (8002040 <HAL_RCC_OscConfig+0x758>)
 8001e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1e9      	bne.n	8001e42 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e6e:	7ffb      	ldrb	r3, [r7, #31]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d105      	bne.n	8001e80 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e74:	4b72      	ldr	r3, [pc, #456]	; (8002040 <HAL_RCC_OscConfig+0x758>)
 8001e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e78:	4a71      	ldr	r2, [pc, #452]	; (8002040 <HAL_RCC_OscConfig+0x758>)
 8001e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80d5 	beq.w	8002034 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	2b0c      	cmp	r3, #12
 8001e8e:	f000 808e 	beq.w	8001fae <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d15b      	bne.n	8001f52 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9a:	4b69      	ldr	r3, [pc, #420]	; (8002040 <HAL_RCC_OscConfig+0x758>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a68      	ldr	r2, [pc, #416]	; (8002040 <HAL_RCC_OscConfig+0x758>)
 8001ea0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea6:	f7fe ffcd 	bl	8000e44 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eae:	f7fe ffc9 	bl	8000e44 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e0ba      	b.n	8002036 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec0:	4b5f      	ldr	r3, [pc, #380]	; (8002040 <HAL_RCC_OscConfig+0x758>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1f0      	bne.n	8001eae <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ecc:	4b5c      	ldr	r3, [pc, #368]	; (8002040 <HAL_RCC_OscConfig+0x758>)
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	4b5c      	ldr	r3, [pc, #368]	; (8002044 <HAL_RCC_OscConfig+0x75c>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001edc:	3a01      	subs	r2, #1
 8001ede:	0112      	lsls	r2, r2, #4
 8001ee0:	4311      	orrs	r1, r2
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ee6:	0212      	lsls	r2, r2, #8
 8001ee8:	4311      	orrs	r1, r2
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001eee:	0852      	lsrs	r2, r2, #1
 8001ef0:	3a01      	subs	r2, #1
 8001ef2:	0552      	lsls	r2, r2, #21
 8001ef4:	4311      	orrs	r1, r2
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001efa:	0852      	lsrs	r2, r2, #1
 8001efc:	3a01      	subs	r2, #1
 8001efe:	0652      	lsls	r2, r2, #25
 8001f00:	4311      	orrs	r1, r2
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f06:	0912      	lsrs	r2, r2, #4
 8001f08:	0452      	lsls	r2, r2, #17
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	494c      	ldr	r1, [pc, #304]	; (8002040 <HAL_RCC_OscConfig+0x758>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f12:	4b4b      	ldr	r3, [pc, #300]	; (8002040 <HAL_RCC_OscConfig+0x758>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a4a      	ldr	r2, [pc, #296]	; (8002040 <HAL_RCC_OscConfig+0x758>)
 8001f18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f1c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f1e:	4b48      	ldr	r3, [pc, #288]	; (8002040 <HAL_RCC_OscConfig+0x758>)
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	4a47      	ldr	r2, [pc, #284]	; (8002040 <HAL_RCC_OscConfig+0x758>)
 8001f24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f28:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2a:	f7fe ff8b 	bl	8000e44 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f32:	f7fe ff87 	bl	8000e44 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e078      	b.n	8002036 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f44:	4b3e      	ldr	r3, [pc, #248]	; (8002040 <HAL_RCC_OscConfig+0x758>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0f0      	beq.n	8001f32 <HAL_RCC_OscConfig+0x64a>
 8001f50:	e070      	b.n	8002034 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f52:	4b3b      	ldr	r3, [pc, #236]	; (8002040 <HAL_RCC_OscConfig+0x758>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a3a      	ldr	r2, [pc, #232]	; (8002040 <HAL_RCC_OscConfig+0x758>)
 8001f58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f5c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001f5e:	4b38      	ldr	r3, [pc, #224]	; (8002040 <HAL_RCC_OscConfig+0x758>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d105      	bne.n	8001f76 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f6a:	4b35      	ldr	r3, [pc, #212]	; (8002040 <HAL_RCC_OscConfig+0x758>)
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	4a34      	ldr	r2, [pc, #208]	; (8002040 <HAL_RCC_OscConfig+0x758>)
 8001f70:	f023 0303 	bic.w	r3, r3, #3
 8001f74:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f76:	4b32      	ldr	r3, [pc, #200]	; (8002040 <HAL_RCC_OscConfig+0x758>)
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	4a31      	ldr	r2, [pc, #196]	; (8002040 <HAL_RCC_OscConfig+0x758>)
 8001f7c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f84:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7fe ff5d 	bl	8000e44 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8e:	f7fe ff59 	bl	8000e44 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e04a      	b.n	8002036 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fa0:	4b27      	ldr	r3, [pc, #156]	; (8002040 <HAL_RCC_OscConfig+0x758>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1f0      	bne.n	8001f8e <HAL_RCC_OscConfig+0x6a6>
 8001fac:	e042      	b.n	8002034 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e03d      	b.n	8002036 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001fba:	4b21      	ldr	r3, [pc, #132]	; (8002040 <HAL_RCC_OscConfig+0x758>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f003 0203 	and.w	r2, r3, #3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d130      	bne.n	8002030 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d127      	bne.n	8002030 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fea:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d11f      	bne.n	8002030 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ffa:	2a07      	cmp	r2, #7
 8001ffc:	bf14      	ite	ne
 8001ffe:	2201      	movne	r2, #1
 8002000:	2200      	moveq	r2, #0
 8002002:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002004:	4293      	cmp	r3, r2
 8002006:	d113      	bne.n	8002030 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002012:	085b      	lsrs	r3, r3, #1
 8002014:	3b01      	subs	r3, #1
 8002016:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002018:	429a      	cmp	r2, r3
 800201a:	d109      	bne.n	8002030 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	085b      	lsrs	r3, r3, #1
 8002028:	3b01      	subs	r3, #1
 800202a:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800202c:	429a      	cmp	r2, r3
 800202e:	d001      	beq.n	8002034 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3720      	adds	r7, #32
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000
 8002044:	f99d808c 	.word	0xf99d808c

08002048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0c8      	b.n	80021ee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800205c:	4b66      	ldr	r3, [pc, #408]	; (80021f8 <HAL_RCC_ClockConfig+0x1b0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d910      	bls.n	800208c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b63      	ldr	r3, [pc, #396]	; (80021f8 <HAL_RCC_ClockConfig+0x1b0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 0207 	bic.w	r2, r3, #7
 8002072:	4961      	ldr	r1, [pc, #388]	; (80021f8 <HAL_RCC_ClockConfig+0x1b0>)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800207a:	4b5f      	ldr	r3, [pc, #380]	; (80021f8 <HAL_RCC_ClockConfig+0x1b0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0b0      	b.n	80021ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b00      	cmp	r3, #0
 8002096:	d04c      	beq.n	8002132 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b03      	cmp	r3, #3
 800209e:	d107      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a0:	4b56      	ldr	r3, [pc, #344]	; (80021fc <HAL_RCC_ClockConfig+0x1b4>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d121      	bne.n	80020f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e09e      	b.n	80021ee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d107      	bne.n	80020c8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020b8:	4b50      	ldr	r3, [pc, #320]	; (80021fc <HAL_RCC_ClockConfig+0x1b4>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d115      	bne.n	80020f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e092      	b.n	80021ee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d107      	bne.n	80020e0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020d0:	4b4a      	ldr	r3, [pc, #296]	; (80021fc <HAL_RCC_ClockConfig+0x1b4>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d109      	bne.n	80020f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e086      	b.n	80021ee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e0:	4b46      	ldr	r3, [pc, #280]	; (80021fc <HAL_RCC_ClockConfig+0x1b4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e07e      	b.n	80021ee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020f0:	4b42      	ldr	r3, [pc, #264]	; (80021fc <HAL_RCC_ClockConfig+0x1b4>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f023 0203 	bic.w	r2, r3, #3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	493f      	ldr	r1, [pc, #252]	; (80021fc <HAL_RCC_ClockConfig+0x1b4>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002102:	f7fe fe9f 	bl	8000e44 <HAL_GetTick>
 8002106:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002108:	e00a      	b.n	8002120 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800210a:	f7fe fe9b 	bl	8000e44 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	f241 3288 	movw	r2, #5000	; 0x1388
 8002118:	4293      	cmp	r3, r2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e066      	b.n	80021ee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002120:	4b36      	ldr	r3, [pc, #216]	; (80021fc <HAL_RCC_ClockConfig+0x1b4>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 020c 	and.w	r2, r3, #12
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	429a      	cmp	r2, r3
 8002130:	d1eb      	bne.n	800210a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d008      	beq.n	8002150 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800213e:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <HAL_RCC_ClockConfig+0x1b4>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	492c      	ldr	r1, [pc, #176]	; (80021fc <HAL_RCC_ClockConfig+0x1b4>)
 800214c:	4313      	orrs	r3, r2
 800214e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002150:	4b29      	ldr	r3, [pc, #164]	; (80021f8 <HAL_RCC_ClockConfig+0x1b0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d210      	bcs.n	8002180 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	4b26      	ldr	r3, [pc, #152]	; (80021f8 <HAL_RCC_ClockConfig+0x1b0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 0207 	bic.w	r2, r3, #7
 8002166:	4924      	ldr	r1, [pc, #144]	; (80021f8 <HAL_RCC_ClockConfig+0x1b0>)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	4b22      	ldr	r3, [pc, #136]	; (80021f8 <HAL_RCC_ClockConfig+0x1b0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e036      	b.n	80021ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800218c:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <HAL_RCC_ClockConfig+0x1b4>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4918      	ldr	r1, [pc, #96]	; (80021fc <HAL_RCC_ClockConfig+0x1b4>)
 800219a:	4313      	orrs	r3, r2
 800219c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d009      	beq.n	80021be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021aa:	4b14      	ldr	r3, [pc, #80]	; (80021fc <HAL_RCC_ClockConfig+0x1b4>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4910      	ldr	r1, [pc, #64]	; (80021fc <HAL_RCC_ClockConfig+0x1b4>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021be:	f000 f825 	bl	800220c <HAL_RCC_GetSysClockFreq>
 80021c2:	4601      	mov	r1, r0
 80021c4:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <HAL_RCC_ClockConfig+0x1b4>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	4a0c      	ldr	r2, [pc, #48]	; (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 80021d0:	5cd3      	ldrb	r3, [r2, r3]
 80021d2:	f003 031f 	and.w	r3, r3, #31
 80021d6:	fa21 f303 	lsr.w	r3, r1, r3
 80021da:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80021dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <HAL_RCC_ClockConfig+0x1c0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe fde2 	bl	8000dac <HAL_InitTick>
 80021e8:	4603      	mov	r3, r0
 80021ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80021ec:	7afb      	ldrb	r3, [r7, #11]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40022000 	.word	0x40022000
 80021fc:	40021000 	.word	0x40021000
 8002200:	080080e8 	.word	0x080080e8
 8002204:	20001238 	.word	0x20001238
 8002208:	20000000 	.word	0x20000000

0800220c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	; 0x24
 8002210:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
 8002216:	2300      	movs	r3, #0
 8002218:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800221a:	4b3d      	ldr	r3, [pc, #244]	; (8002310 <HAL_RCC_GetSysClockFreq+0x104>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 030c 	and.w	r3, r3, #12
 8002222:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002224:	4b3a      	ldr	r3, [pc, #232]	; (8002310 <HAL_RCC_GetSysClockFreq+0x104>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f003 0303 	and.w	r3, r3, #3
 800222c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_RCC_GetSysClockFreq+0x34>
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	2b0c      	cmp	r3, #12
 8002238:	d121      	bne.n	800227e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d11e      	bne.n	800227e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002240:	4b33      	ldr	r3, [pc, #204]	; (8002310 <HAL_RCC_GetSysClockFreq+0x104>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d107      	bne.n	800225c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800224c:	4b30      	ldr	r3, [pc, #192]	; (8002310 <HAL_RCC_GetSysClockFreq+0x104>)
 800224e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002252:	0a1b      	lsrs	r3, r3, #8
 8002254:	f003 030f 	and.w	r3, r3, #15
 8002258:	61fb      	str	r3, [r7, #28]
 800225a:	e005      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800225c:	4b2c      	ldr	r3, [pc, #176]	; (8002310 <HAL_RCC_GetSysClockFreq+0x104>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002268:	4a2a      	ldr	r2, [pc, #168]	; (8002314 <HAL_RCC_GetSysClockFreq+0x108>)
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002270:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10d      	bne.n	8002294 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800227c:	e00a      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	2b04      	cmp	r3, #4
 8002282:	d102      	bne.n	800228a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002284:	4b24      	ldr	r3, [pc, #144]	; (8002318 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002286:	61bb      	str	r3, [r7, #24]
 8002288:	e004      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	2b08      	cmp	r3, #8
 800228e:	d101      	bne.n	8002294 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002290:	4b22      	ldr	r3, [pc, #136]	; (800231c <HAL_RCC_GetSysClockFreq+0x110>)
 8002292:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	2b0c      	cmp	r3, #12
 8002298:	d133      	bne.n	8002302 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800229a:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <HAL_RCC_GetSysClockFreq+0x104>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d002      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0xa4>
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d003      	beq.n	80022b6 <HAL_RCC_GetSysClockFreq+0xaa>
 80022ae:	e005      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022b0:	4b19      	ldr	r3, [pc, #100]	; (8002318 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022b2:	617b      	str	r3, [r7, #20]
      break;
 80022b4:	e005      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022b6:	4b19      	ldr	r3, [pc, #100]	; (800231c <HAL_RCC_GetSysClockFreq+0x110>)
 80022b8:	617b      	str	r3, [r7, #20]
      break;
 80022ba:	e002      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	617b      	str	r3, [r7, #20]
      break;
 80022c0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022c2:	4b13      	ldr	r3, [pc, #76]	; (8002310 <HAL_RCC_GetSysClockFreq+0x104>)
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	091b      	lsrs	r3, r3, #4
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	3301      	adds	r3, #1
 80022ce:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <HAL_RCC_GetSysClockFreq+0x104>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	0a1b      	lsrs	r3, r3, #8
 80022d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	fb02 f203 	mul.w	r2, r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <HAL_RCC_GetSysClockFreq+0x104>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	0e5b      	lsrs	r3, r3, #25
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	3301      	adds	r3, #1
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002300:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002302:	69bb      	ldr	r3, [r7, #24]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3724      	adds	r7, #36	; 0x24
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	40021000 	.word	0x40021000
 8002314:	08008100 	.word	0x08008100
 8002318:	00f42400 	.word	0x00f42400
 800231c:	007a1200 	.word	0x007a1200

08002320 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002324:	4b03      	ldr	r3, [pc, #12]	; (8002334 <HAL_RCC_GetHCLKFreq+0x14>)
 8002326:	681b      	ldr	r3, [r3, #0]
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	20001238 	.word	0x20001238

08002338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800233c:	f7ff fff0 	bl	8002320 <HAL_RCC_GetHCLKFreq>
 8002340:	4601      	mov	r1, r0
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	4a04      	ldr	r2, [pc, #16]	; (8002360 <HAL_RCC_GetPCLK1Freq+0x28>)
 800234e:	5cd3      	ldrb	r3, [r2, r3]
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002358:	4618      	mov	r0, r3
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40021000 	.word	0x40021000
 8002360:	080080f8 	.word	0x080080f8

08002364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002368:	f7ff ffda 	bl	8002320 <HAL_RCC_GetHCLKFreq>
 800236c:	4601      	mov	r1, r0
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	0adb      	lsrs	r3, r3, #11
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	4a04      	ldr	r2, [pc, #16]	; (800238c <HAL_RCC_GetPCLK2Freq+0x28>)
 800237a:	5cd3      	ldrb	r3, [r2, r3]
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002384:	4618      	mov	r0, r3
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40021000 	.word	0x40021000
 800238c:	080080f8 	.word	0x080080f8

08002390 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002398:	2300      	movs	r3, #0
 800239a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800239c:	4b2a      	ldr	r3, [pc, #168]	; (8002448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800239e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023a8:	f7ff fa3a 	bl	8001820 <HAL_PWREx_GetVoltageRange>
 80023ac:	6178      	str	r0, [r7, #20]
 80023ae:	e014      	b.n	80023da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023b0:	4b25      	ldr	r3, [pc, #148]	; (8002448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b4:	4a24      	ldr	r2, [pc, #144]	; (8002448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ba:	6593      	str	r3, [r2, #88]	; 0x58
 80023bc:	4b22      	ldr	r3, [pc, #136]	; (8002448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023c8:	f7ff fa2a 	bl	8001820 <HAL_PWREx_GetVoltageRange>
 80023cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023ce:	4b1e      	ldr	r3, [pc, #120]	; (8002448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d2:	4a1d      	ldr	r2, [pc, #116]	; (8002448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023e0:	d10b      	bne.n	80023fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b80      	cmp	r3, #128	; 0x80
 80023e6:	d919      	bls.n	800241c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2ba0      	cmp	r3, #160	; 0xa0
 80023ec:	d902      	bls.n	80023f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023ee:	2302      	movs	r3, #2
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	e013      	b.n	800241c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023f4:	2301      	movs	r3, #1
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	e010      	b.n	800241c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b80      	cmp	r3, #128	; 0x80
 80023fe:	d902      	bls.n	8002406 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002400:	2303      	movs	r3, #3
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	e00a      	b.n	800241c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b80      	cmp	r3, #128	; 0x80
 800240a:	d102      	bne.n	8002412 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800240c:	2302      	movs	r3, #2
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	e004      	b.n	800241c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b70      	cmp	r3, #112	; 0x70
 8002416:	d101      	bne.n	800241c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002418:	2301      	movs	r3, #1
 800241a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f023 0207 	bic.w	r2, r3, #7
 8002424:	4909      	ldr	r1, [pc, #36]	; (800244c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800242c:	4b07      	ldr	r3, [pc, #28]	; (800244c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	429a      	cmp	r2, r3
 8002438:	d001      	beq.n	800243e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40021000 	.word	0x40021000
 800244c:	40022000 	.word	0x40022000

08002450 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002458:	2300      	movs	r3, #0
 800245a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800245c:	2300      	movs	r3, #0
 800245e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002468:	2b00      	cmp	r3, #0
 800246a:	d03f      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002474:	d01c      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800247a:	d802      	bhi.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00e      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002480:	e01f      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002482:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002486:	d003      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002488:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800248c:	d01c      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800248e:	e018      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002490:	4b85      	ldr	r3, [pc, #532]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4a84      	ldr	r2, [pc, #528]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800249a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800249c:	e015      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3304      	adds	r3, #4
 80024a2:	2100      	movs	r1, #0
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 fab9 	bl	8002a1c <RCCEx_PLLSAI1_Config>
 80024aa:	4603      	mov	r3, r0
 80024ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024ae:	e00c      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3320      	adds	r3, #32
 80024b4:	2100      	movs	r1, #0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 fba0 	bl	8002bfc <RCCEx_PLLSAI2_Config>
 80024bc:	4603      	mov	r3, r0
 80024be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024c0:	e003      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	74fb      	strb	r3, [r7, #19]
      break;
 80024c6:	e000      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80024c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024ca:	7cfb      	ldrb	r3, [r7, #19]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10b      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024d0:	4b75      	ldr	r3, [pc, #468]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024de:	4972      	ldr	r1, [pc, #456]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024e6:	e001      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024e8:	7cfb      	ldrb	r3, [r7, #19]
 80024ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d03f      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002500:	d01c      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002502:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002506:	d802      	bhi.n	800250e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00e      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800250c:	e01f      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800250e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002512:	d003      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002514:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002518:	d01c      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800251a:	e018      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800251c:	4b62      	ldr	r3, [pc, #392]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	4a61      	ldr	r2, [pc, #388]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002526:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002528:	e015      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3304      	adds	r3, #4
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f000 fa73 	bl	8002a1c <RCCEx_PLLSAI1_Config>
 8002536:	4603      	mov	r3, r0
 8002538:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800253a:	e00c      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3320      	adds	r3, #32
 8002540:	2100      	movs	r1, #0
 8002542:	4618      	mov	r0, r3
 8002544:	f000 fb5a 	bl	8002bfc <RCCEx_PLLSAI2_Config>
 8002548:	4603      	mov	r3, r0
 800254a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800254c:	e003      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	74fb      	strb	r3, [r7, #19]
      break;
 8002552:	e000      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002554:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002556:	7cfb      	ldrb	r3, [r7, #19]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10b      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800255c:	4b52      	ldr	r3, [pc, #328]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002562:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800256a:	494f      	ldr	r1, [pc, #316]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002572:	e001      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002574:	7cfb      	ldrb	r3, [r7, #19]
 8002576:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80a0 	beq.w	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002586:	2300      	movs	r3, #0
 8002588:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800258a:	4b47      	ldr	r3, [pc, #284]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800259a:	2300      	movs	r3, #0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00d      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a0:	4b41      	ldr	r3, [pc, #260]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a4:	4a40      	ldr	r2, [pc, #256]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025aa:	6593      	str	r3, [r2, #88]	; 0x58
 80025ac:	4b3e      	ldr	r3, [pc, #248]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025b8:	2301      	movs	r3, #1
 80025ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025bc:	4b3b      	ldr	r3, [pc, #236]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a3a      	ldr	r2, [pc, #232]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025c8:	f7fe fc3c 	bl	8000e44 <HAL_GetTick>
 80025cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025ce:	e009      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d0:	f7fe fc38 	bl	8000e44 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d902      	bls.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	74fb      	strb	r3, [r7, #19]
        break;
 80025e2:	e005      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025e4:	4b31      	ldr	r3, [pc, #196]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0ef      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80025f0:	7cfb      	ldrb	r3, [r7, #19]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d15c      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025f6:	4b2c      	ldr	r3, [pc, #176]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002600:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d01f      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	429a      	cmp	r2, r3
 8002612:	d019      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002614:	4b24      	ldr	r3, [pc, #144]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800261e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002620:	4b21      	ldr	r3, [pc, #132]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002626:	4a20      	ldr	r2, [pc, #128]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002630:	4b1d      	ldr	r3, [pc, #116]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002636:	4a1c      	ldr	r2, [pc, #112]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800263c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002640:	4a19      	ldr	r2, [pc, #100]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d016      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002652:	f7fe fbf7 	bl	8000e44 <HAL_GetTick>
 8002656:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002658:	e00b      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265a:	f7fe fbf3 	bl	8000e44 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	f241 3288 	movw	r2, #5000	; 0x1388
 8002668:	4293      	cmp	r3, r2
 800266a:	d902      	bls.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	74fb      	strb	r3, [r7, #19]
            break;
 8002670:	e006      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002672:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0ec      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002680:	7cfb      	ldrb	r3, [r7, #19]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10c      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002696:	4904      	ldr	r1, [pc, #16]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800269e:	e009      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026a0:	7cfb      	ldrb	r3, [r7, #19]
 80026a2:	74bb      	strb	r3, [r7, #18]
 80026a4:	e006      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80026a6:	bf00      	nop
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026b0:	7cfb      	ldrb	r3, [r7, #19]
 80026b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026b4:	7c7b      	ldrb	r3, [r7, #17]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d105      	bne.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ba:	4b9e      	ldr	r3, [pc, #632]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026be:	4a9d      	ldr	r2, [pc, #628]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026d2:	4b98      	ldr	r3, [pc, #608]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d8:	f023 0203 	bic.w	r2, r3, #3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e0:	4994      	ldr	r1, [pc, #592]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00a      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026f4:	4b8f      	ldr	r3, [pc, #572]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 020c 	bic.w	r2, r3, #12
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002702:	498c      	ldr	r1, [pc, #560]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00a      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002716:	4b87      	ldr	r3, [pc, #540]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	4983      	ldr	r1, [pc, #524]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00a      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002738:	4b7e      	ldr	r3, [pc, #504]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	497b      	ldr	r1, [pc, #492]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800275a:	4b76      	ldr	r3, [pc, #472]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800275c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002760:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002768:	4972      	ldr	r1, [pc, #456]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800276a:	4313      	orrs	r3, r2
 800276c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0320 	and.w	r3, r3, #32
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00a      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800277c:	4b6d      	ldr	r3, [pc, #436]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002782:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278a:	496a      	ldr	r1, [pc, #424]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00a      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800279e:	4b65      	ldr	r3, [pc, #404]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ac:	4961      	ldr	r1, [pc, #388]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00a      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027c0:	4b5c      	ldr	r3, [pc, #368]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ce:	4959      	ldr	r1, [pc, #356]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027e2:	4b54      	ldr	r3, [pc, #336]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f0:	4950      	ldr	r1, [pc, #320]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00a      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002804:	4b4b      	ldr	r3, [pc, #300]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002812:	4948      	ldr	r1, [pc, #288]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00a      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002826:	4b43      	ldr	r3, [pc, #268]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002834:	493f      	ldr	r1, [pc, #252]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d028      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002848:	4b3a      	ldr	r3, [pc, #232]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002856:	4937      	ldr	r1, [pc, #220]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002862:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002866:	d106      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002868:	4b32      	ldr	r3, [pc, #200]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4a31      	ldr	r2, [pc, #196]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800286e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002872:	60d3      	str	r3, [r2, #12]
 8002874:	e011      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800287a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800287e:	d10c      	bne.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3304      	adds	r3, #4
 8002884:	2101      	movs	r1, #1
 8002886:	4618      	mov	r0, r3
 8002888:	f000 f8c8 	bl	8002a1c <RCCEx_PLLSAI1_Config>
 800288c:	4603      	mov	r3, r0
 800288e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002890:	7cfb      	ldrb	r3, [r7, #19]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002896:	7cfb      	ldrb	r3, [r7, #19]
 8002898:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d028      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028a6:	4b23      	ldr	r3, [pc, #140]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b4:	491f      	ldr	r1, [pc, #124]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028c4:	d106      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028c6:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	4a1a      	ldr	r2, [pc, #104]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028d0:	60d3      	str	r3, [r2, #12]
 80028d2:	e011      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028dc:	d10c      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3304      	adds	r3, #4
 80028e2:	2101      	movs	r1, #1
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 f899 	bl	8002a1c <RCCEx_PLLSAI1_Config>
 80028ea:	4603      	mov	r3, r0
 80028ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028ee:	7cfb      	ldrb	r3, [r7, #19]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80028f4:	7cfb      	ldrb	r3, [r7, #19]
 80028f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d02b      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002912:	4908      	ldr	r1, [pc, #32]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002914:	4313      	orrs	r3, r2
 8002916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800291e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002922:	d109      	bne.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002924:	4b03      	ldr	r3, [pc, #12]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	4a02      	ldr	r2, [pc, #8]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800292a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800292e:	60d3      	str	r3, [r2, #12]
 8002930:	e014      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800293c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002940:	d10c      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3304      	adds	r3, #4
 8002946:	2101      	movs	r1, #1
 8002948:	4618      	mov	r0, r3
 800294a:	f000 f867 	bl	8002a1c <RCCEx_PLLSAI1_Config>
 800294e:	4603      	mov	r3, r0
 8002950:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002952:	7cfb      	ldrb	r3, [r7, #19]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002958:	7cfb      	ldrb	r3, [r7, #19]
 800295a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d02f      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002968:	4b2b      	ldr	r3, [pc, #172]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002976:	4928      	ldr	r1, [pc, #160]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002986:	d10d      	bne.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3304      	adds	r3, #4
 800298c:	2102      	movs	r1, #2
 800298e:	4618      	mov	r0, r3
 8002990:	f000 f844 	bl	8002a1c <RCCEx_PLLSAI1_Config>
 8002994:	4603      	mov	r3, r0
 8002996:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002998:	7cfb      	ldrb	r3, [r7, #19]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d014      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800299e:	7cfb      	ldrb	r3, [r7, #19]
 80029a0:	74bb      	strb	r3, [r7, #18]
 80029a2:	e011      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029ac:	d10c      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3320      	adds	r3, #32
 80029b2:	2102      	movs	r1, #2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 f921 	bl	8002bfc <RCCEx_PLLSAI2_Config>
 80029ba:	4603      	mov	r3, r0
 80029bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029be:	7cfb      	ldrb	r3, [r7, #19]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80029c4:	7cfb      	ldrb	r3, [r7, #19]
 80029c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029d4:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029e2:	490d      	ldr	r1, [pc, #52]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00b      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029f6:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a06:	4904      	ldr	r1, [pc, #16]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a0e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40021000 	.word	0x40021000

08002a1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a2a:	4b73      	ldr	r3, [pc, #460]	; (8002bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d018      	beq.n	8002a68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a36:	4b70      	ldr	r3, [pc, #448]	; (8002bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f003 0203 	and.w	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d10d      	bne.n	8002a62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
       ||
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d009      	beq.n	8002a62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a4e:	4b6a      	ldr	r3, [pc, #424]	; (8002bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	091b      	lsrs	r3, r3, #4
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
       ||
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d044      	beq.n	8002aec <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	73fb      	strb	r3, [r7, #15]
 8002a66:	e041      	b.n	8002aec <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d00c      	beq.n	8002a8a <RCCEx_PLLSAI1_Config+0x6e>
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d013      	beq.n	8002a9c <RCCEx_PLLSAI1_Config+0x80>
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d120      	bne.n	8002aba <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a78:	4b5f      	ldr	r3, [pc, #380]	; (8002bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d11d      	bne.n	8002ac0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a88:	e01a      	b.n	8002ac0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a8a:	4b5b      	ldr	r3, [pc, #364]	; (8002bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d116      	bne.n	8002ac4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a9a:	e013      	b.n	8002ac4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a9c:	4b56      	ldr	r3, [pc, #344]	; (8002bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10f      	bne.n	8002ac8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002aa8:	4b53      	ldr	r3, [pc, #332]	; (8002bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d109      	bne.n	8002ac8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ab8:	e006      	b.n	8002ac8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	73fb      	strb	r3, [r7, #15]
      break;
 8002abe:	e004      	b.n	8002aca <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002ac0:	bf00      	nop
 8002ac2:	e002      	b.n	8002aca <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002ac4:	bf00      	nop
 8002ac6:	e000      	b.n	8002aca <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002ac8:	bf00      	nop
    }

    if(status == HAL_OK)
 8002aca:	7bfb      	ldrb	r3, [r7, #15]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10d      	bne.n	8002aec <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ad0:	4b49      	ldr	r3, [pc, #292]	; (8002bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6819      	ldr	r1, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	430b      	orrs	r3, r1
 8002ae6:	4944      	ldr	r1, [pc, #272]	; (8002bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d17d      	bne.n	8002bee <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002af2:	4b41      	ldr	r3, [pc, #260]	; (8002bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a40      	ldr	r2, [pc, #256]	; (8002bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002af8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002afc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002afe:	f7fe f9a1 	bl	8000e44 <HAL_GetTick>
 8002b02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b04:	e009      	b.n	8002b1a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b06:	f7fe f99d 	bl	8000e44 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d902      	bls.n	8002b1a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	73fb      	strb	r3, [r7, #15]
        break;
 8002b18:	e005      	b.n	8002b26 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b1a:	4b37      	ldr	r3, [pc, #220]	; (8002bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1ef      	bne.n	8002b06 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d160      	bne.n	8002bee <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d111      	bne.n	8002b56 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b32:	4b31      	ldr	r3, [pc, #196]	; (8002bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6892      	ldr	r2, [r2, #8]
 8002b42:	0211      	lsls	r1, r2, #8
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	68d2      	ldr	r2, [r2, #12]
 8002b48:	0912      	lsrs	r2, r2, #4
 8002b4a:	0452      	lsls	r2, r2, #17
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	492a      	ldr	r1, [pc, #168]	; (8002bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	610b      	str	r3, [r1, #16]
 8002b54:	e027      	b.n	8002ba6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d112      	bne.n	8002b82 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b5c:	4b26      	ldr	r3, [pc, #152]	; (8002bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6892      	ldr	r2, [r2, #8]
 8002b6c:	0211      	lsls	r1, r2, #8
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6912      	ldr	r2, [r2, #16]
 8002b72:	0852      	lsrs	r2, r2, #1
 8002b74:	3a01      	subs	r2, #1
 8002b76:	0552      	lsls	r2, r2, #21
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	491f      	ldr	r1, [pc, #124]	; (8002bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	610b      	str	r3, [r1, #16]
 8002b80:	e011      	b.n	8002ba6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b82:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b8a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6892      	ldr	r2, [r2, #8]
 8002b92:	0211      	lsls	r1, r2, #8
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6952      	ldr	r2, [r2, #20]
 8002b98:	0852      	lsrs	r2, r2, #1
 8002b9a:	3a01      	subs	r2, #1
 8002b9c:	0652      	lsls	r2, r2, #25
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	4915      	ldr	r1, [pc, #84]	; (8002bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ba6:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a13      	ldr	r2, [pc, #76]	; (8002bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bb0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb2:	f7fe f947 	bl	8000e44 <HAL_GetTick>
 8002bb6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bb8:	e009      	b.n	8002bce <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bba:	f7fe f943 	bl	8000e44 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d902      	bls.n	8002bce <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	73fb      	strb	r3, [r7, #15]
          break;
 8002bcc:	e005      	b.n	8002bda <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bce:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0ef      	beq.n	8002bba <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d106      	bne.n	8002bee <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002be0:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	4903      	ldr	r1, [pc, #12]	; (8002bf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021000 	.word	0x40021000

08002bfc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c0a:	4b68      	ldr	r3, [pc, #416]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d018      	beq.n	8002c48 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c16:	4b65      	ldr	r3, [pc, #404]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f003 0203 	and.w	r2, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d10d      	bne.n	8002c42 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
       ||
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d009      	beq.n	8002c42 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c2e:	4b5f      	ldr	r3, [pc, #380]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	091b      	lsrs	r3, r3, #4
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
       ||
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d044      	beq.n	8002ccc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	73fb      	strb	r3, [r7, #15]
 8002c46:	e041      	b.n	8002ccc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d00c      	beq.n	8002c6a <RCCEx_PLLSAI2_Config+0x6e>
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d013      	beq.n	8002c7c <RCCEx_PLLSAI2_Config+0x80>
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d120      	bne.n	8002c9a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c58:	4b54      	ldr	r3, [pc, #336]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d11d      	bne.n	8002ca0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c68:	e01a      	b.n	8002ca0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c6a:	4b50      	ldr	r3, [pc, #320]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d116      	bne.n	8002ca4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c7a:	e013      	b.n	8002ca4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c7c:	4b4b      	ldr	r3, [pc, #300]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10f      	bne.n	8002ca8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c88:	4b48      	ldr	r3, [pc, #288]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d109      	bne.n	8002ca8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c98:	e006      	b.n	8002ca8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c9e:	e004      	b.n	8002caa <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ca0:	bf00      	nop
 8002ca2:	e002      	b.n	8002caa <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ca4:	bf00      	nop
 8002ca6:	e000      	b.n	8002caa <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ca8:	bf00      	nop
    }

    if(status == HAL_OK)
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10d      	bne.n	8002ccc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cb0:	4b3e      	ldr	r3, [pc, #248]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6819      	ldr	r1, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	430b      	orrs	r3, r1
 8002cc6:	4939      	ldr	r1, [pc, #228]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d167      	bne.n	8002da2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002cd2:	4b36      	ldr	r3, [pc, #216]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a35      	ldr	r2, [pc, #212]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cde:	f7fe f8b1 	bl	8000e44 <HAL_GetTick>
 8002ce2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ce4:	e009      	b.n	8002cfa <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ce6:	f7fe f8ad 	bl	8000e44 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d902      	bls.n	8002cfa <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	73fb      	strb	r3, [r7, #15]
        break;
 8002cf8:	e005      	b.n	8002d06 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cfa:	4b2c      	ldr	r3, [pc, #176]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1ef      	bne.n	8002ce6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d14a      	bne.n	8002da2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d111      	bne.n	8002d36 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d12:	4b26      	ldr	r3, [pc, #152]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	6892      	ldr	r2, [r2, #8]
 8002d22:	0211      	lsls	r1, r2, #8
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	68d2      	ldr	r2, [r2, #12]
 8002d28:	0912      	lsrs	r2, r2, #4
 8002d2a:	0452      	lsls	r2, r2, #17
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	491f      	ldr	r1, [pc, #124]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	614b      	str	r3, [r1, #20]
 8002d34:	e011      	b.n	8002d5a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d36:	4b1d      	ldr	r3, [pc, #116]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6892      	ldr	r2, [r2, #8]
 8002d46:	0211      	lsls	r1, r2, #8
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6912      	ldr	r2, [r2, #16]
 8002d4c:	0852      	lsrs	r2, r2, #1
 8002d4e:	3a01      	subs	r2, #1
 8002d50:	0652      	lsls	r2, r2, #25
 8002d52:	430a      	orrs	r2, r1
 8002d54:	4915      	ldr	r1, [pc, #84]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d5a:	4b14      	ldr	r3, [pc, #80]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a13      	ldr	r2, [pc, #76]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d64:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d66:	f7fe f86d 	bl	8000e44 <HAL_GetTick>
 8002d6a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d6c:	e009      	b.n	8002d82 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d6e:	f7fe f869 	bl	8000e44 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d902      	bls.n	8002d82 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	73fb      	strb	r3, [r7, #15]
          break;
 8002d80:	e005      	b.n	8002d8e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d82:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0ef      	beq.n	8002d6e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d106      	bne.n	8002da2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d96:	695a      	ldr	r2, [r3, #20]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	4903      	ldr	r1, [pc, #12]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000

08002db0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e07c      	b.n	8002ebc <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d106      	bne.n	8002de2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f003 ff7f 	bl	8006ce0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2202      	movs	r2, #2
 8002de6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002df8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e02:	d902      	bls.n	8002e0a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e04:	2300      	movs	r3, #0
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	e002      	b.n	8002e10 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e0e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002e18:	d007      	beq.n	8002e2a <HAL_SPI_Init+0x7a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e22:	d002      	beq.n	8002e2a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10b      	bne.n	8002e4a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e3a:	d903      	bls.n	8002e44 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	631a      	str	r2, [r3, #48]	; 0x30
 8002e42:	e002      	b.n	8002e4a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	ea42 0103 	orr.w	r1, r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	0c1b      	lsrs	r3, r3, #16
 8002e8a:	f003 0204 	and.w	r2, r3, #4
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	ea42 0103 	orr.w	r1, r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d101      	bne.n	8002ee6 <HAL_SPI_Transmit+0x22>
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	e150      	b.n	8003188 <HAL_SPI_Transmit+0x2c4>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eee:	f7fd ffa9 	bl	8000e44 <HAL_GetTick>
 8002ef2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d002      	beq.n	8002f0a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f04:	2302      	movs	r3, #2
 8002f06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f08:	e135      	b.n	8003176 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <HAL_SPI_Transmit+0x52>
 8002f10:	88fb      	ldrh	r3, [r7, #6]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d102      	bne.n	8002f1c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f1a:	e12c      	b.n	8003176 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2203      	movs	r2, #3
 8002f20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	88fa      	ldrh	r2, [r7, #6]
 8002f34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	88fa      	ldrh	r2, [r7, #6]
 8002f3a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f66:	d107      	bne.n	8002f78 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f82:	2b40      	cmp	r3, #64	; 0x40
 8002f84:	d007      	beq.n	8002f96 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f9e:	d94b      	bls.n	8003038 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <HAL_SPI_Transmit+0xea>
 8002fa8:	8afb      	ldrh	r3, [r7, #22]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d13e      	bne.n	800302c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	881a      	ldrh	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbe:	1c9a      	adds	r2, r3, #2
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fd2:	e02b      	b.n	800302c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d112      	bne.n	8003008 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe6:	881a      	ldrh	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff2:	1c9a      	adds	r2, r3, #2
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003006:	e011      	b.n	800302c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003008:	f7fd ff1c 	bl	8000e44 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d803      	bhi.n	8003020 <HAL_SPI_Transmit+0x15c>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301e:	d102      	bne.n	8003026 <HAL_SPI_Transmit+0x162>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d102      	bne.n	800302c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	77fb      	strb	r3, [r7, #31]
          goto error;
 800302a:	e0a4      	b.n	8003176 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1ce      	bne.n	8002fd4 <HAL_SPI_Transmit+0x110>
 8003036:	e07c      	b.n	8003132 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <HAL_SPI_Transmit+0x182>
 8003040:	8afb      	ldrh	r3, [r7, #22]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d170      	bne.n	8003128 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b01      	cmp	r3, #1
 800304e:	d912      	bls.n	8003076 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003054:	881a      	ldrh	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003060:	1c9a      	adds	r2, r3, #2
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800306a:	b29b      	uxth	r3, r3
 800306c:	3b02      	subs	r3, #2
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003074:	e058      	b.n	8003128 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	330c      	adds	r3, #12
 8003080:	7812      	ldrb	r2, [r2, #0]
 8003082:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800309c:	e044      	b.n	8003128 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d12b      	bne.n	8003104 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d912      	bls.n	80030dc <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ba:	881a      	ldrh	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c6:	1c9a      	adds	r2, r3, #2
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3b02      	subs	r3, #2
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030da:	e025      	b.n	8003128 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	330c      	adds	r3, #12
 80030e6:	7812      	ldrb	r2, [r2, #0]
 80030e8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003102:	e011      	b.n	8003128 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003104:	f7fd fe9e 	bl	8000e44 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d803      	bhi.n	800311c <HAL_SPI_Transmit+0x258>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311a:	d102      	bne.n	8003122 <HAL_SPI_Transmit+0x25e>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d102      	bne.n	8003128 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003126:	e026      	b.n	8003176 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800312c:	b29b      	uxth	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1b5      	bne.n	800309e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	6839      	ldr	r1, [r7, #0]
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f901 	bl	800333e <SPI_EndRxTxTransaction>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10a      	bne.n	8003166 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003150:	2300      	movs	r3, #0
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	613b      	str	r3, [r7, #16]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	77fb      	strb	r3, [r7, #31]
 8003172:	e000      	b.n	8003176 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003174:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003186:	7ffb      	ldrb	r3, [r7, #31]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3720      	adds	r7, #32
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	603b      	str	r3, [r7, #0]
 800319c:	4613      	mov	r3, r2
 800319e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031a0:	e04c      	b.n	800323c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a8:	d048      	beq.n	800323c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80031aa:	f7fd fe4b 	bl	8000e44 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d902      	bls.n	80031c0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d13d      	bne.n	800323c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031d8:	d111      	bne.n	80031fe <SPI_WaitFlagStateUntilTimeout+0x6e>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031e2:	d004      	beq.n	80031ee <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ec:	d107      	bne.n	80031fe <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003206:	d10f      	bne.n	8003228 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003226:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e00f      	b.n	800325c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	4013      	ands	r3, r2
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	429a      	cmp	r2, r3
 800324a:	bf0c      	ite	eq
 800324c:	2301      	moveq	r3, #1
 800324e:	2300      	movne	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	461a      	mov	r2, r3
 8003254:	79fb      	ldrb	r3, [r7, #7]
 8003256:	429a      	cmp	r2, r3
 8003258:	d1a3      	bne.n	80031a2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003272:	e057      	b.n	8003324 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800327a:	d106      	bne.n	800328a <SPI_WaitFifoStateUntilTimeout+0x26>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d103      	bne.n	800328a <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	330c      	adds	r3, #12
 8003288:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003290:	d048      	beq.n	8003324 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003292:	f7fd fdd7 	bl	8000e44 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d902      	bls.n	80032a8 <SPI_WaitFifoStateUntilTimeout+0x44>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d13d      	bne.n	8003324 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032c0:	d111      	bne.n	80032e6 <SPI_WaitFifoStateUntilTimeout+0x82>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ca:	d004      	beq.n	80032d6 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d4:	d107      	bne.n	80032e6 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ee:	d10f      	bne.n	8003310 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800330e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e008      	b.n	8003336 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	4013      	ands	r3, r2
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	429a      	cmp	r2, r3
 8003332:	d19f      	bne.n	8003274 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b086      	sub	sp, #24
 8003342:	af02      	add	r7, sp, #8
 8003344:	60f8      	str	r0, [r7, #12]
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2200      	movs	r2, #0
 8003352:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f7ff ff84 	bl	8003264 <SPI_WaitFifoStateUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d007      	beq.n	8003372 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003366:	f043 0220 	orr.w	r2, r3, #32
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e027      	b.n	80033c2 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2200      	movs	r2, #0
 800337a:	2180      	movs	r1, #128	; 0x80
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f7ff ff07 	bl	8003190 <SPI_WaitFlagStateUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d007      	beq.n	8003398 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800338c:	f043 0220 	orr.w	r2, r3, #32
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e014      	b.n	80033c2 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2200      	movs	r2, #0
 80033a0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f7ff ff5d 	bl	8003264 <SPI_WaitFifoStateUntilTimeout>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d007      	beq.n	80033c0 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b4:	f043 0220 	orr.w	r2, r3, #32
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e000      	b.n	80033c2 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e01d      	b.n	8003418 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d106      	bne.n	80033f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f003 fcd5 	bl	8006da0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2202      	movs	r2, #2
 80033fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3304      	adds	r3, #4
 8003406:	4619      	mov	r1, r3
 8003408:	4610      	mov	r0, r2
 800340a:	f000 fa69 	bl	80038e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e01d      	b.n	800346e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f815 	bl	8003476 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3304      	adds	r3, #4
 800345c:	4619      	mov	r1, r3
 800345e:	4610      	mov	r0, r2
 8003460:	f000 fa3e 	bl	80038e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
	...

0800348c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2201      	movs	r2, #1
 800349c:	6839      	ldr	r1, [r7, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fe28 	bl	80040f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a1e      	ldr	r2, [pc, #120]	; (8003524 <HAL_TIM_PWM_Start+0x98>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d013      	beq.n	80034d6 <HAL_TIM_PWM_Start+0x4a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1d      	ldr	r2, [pc, #116]	; (8003528 <HAL_TIM_PWM_Start+0x9c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d00e      	beq.n	80034d6 <HAL_TIM_PWM_Start+0x4a>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a1b      	ldr	r2, [pc, #108]	; (800352c <HAL_TIM_PWM_Start+0xa0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d009      	beq.n	80034d6 <HAL_TIM_PWM_Start+0x4a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a1a      	ldr	r2, [pc, #104]	; (8003530 <HAL_TIM_PWM_Start+0xa4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d004      	beq.n	80034d6 <HAL_TIM_PWM_Start+0x4a>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a18      	ldr	r2, [pc, #96]	; (8003534 <HAL_TIM_PWM_Start+0xa8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d101      	bne.n	80034da <HAL_TIM_PWM_Start+0x4e>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <HAL_TIM_PWM_Start+0x50>
 80034da:	2300      	movs	r3, #0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d007      	beq.n	80034f0 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	4b10      	ldr	r3, [pc, #64]	; (8003538 <HAL_TIM_PWM_Start+0xac>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b06      	cmp	r3, #6
 8003500:	d00b      	beq.n	800351a <HAL_TIM_PWM_Start+0x8e>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003508:	d007      	beq.n	800351a <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0201 	orr.w	r2, r2, #1
 8003518:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40012c00 	.word	0x40012c00
 8003528:	40013400 	.word	0x40013400
 800352c:	40014000 	.word	0x40014000
 8003530:	40014400 	.word	0x40014400
 8003534:	40014800 	.word	0x40014800
 8003538:	00010007 	.word	0x00010007

0800353c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003552:	2302      	movs	r3, #2
 8003554:	e105      	b.n	8003762 <HAL_TIM_PWM_ConfigChannel+0x226>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2202      	movs	r2, #2
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b14      	cmp	r3, #20
 800356a:	f200 80f0 	bhi.w	800374e <HAL_TIM_PWM_ConfigChannel+0x212>
 800356e:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003574:	080035c9 	.word	0x080035c9
 8003578:	0800374f 	.word	0x0800374f
 800357c:	0800374f 	.word	0x0800374f
 8003580:	0800374f 	.word	0x0800374f
 8003584:	08003609 	.word	0x08003609
 8003588:	0800374f 	.word	0x0800374f
 800358c:	0800374f 	.word	0x0800374f
 8003590:	0800374f 	.word	0x0800374f
 8003594:	0800364b 	.word	0x0800364b
 8003598:	0800374f 	.word	0x0800374f
 800359c:	0800374f 	.word	0x0800374f
 80035a0:	0800374f 	.word	0x0800374f
 80035a4:	0800368b 	.word	0x0800368b
 80035a8:	0800374f 	.word	0x0800374f
 80035ac:	0800374f 	.word	0x0800374f
 80035b0:	0800374f 	.word	0x0800374f
 80035b4:	080036cd 	.word	0x080036cd
 80035b8:	0800374f 	.word	0x0800374f
 80035bc:	0800374f 	.word	0x0800374f
 80035c0:	0800374f 	.word	0x0800374f
 80035c4:	0800370d 	.word	0x0800370d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68b9      	ldr	r1, [r7, #8]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fa20 	bl	8003a14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0208 	orr.w	r2, r2, #8
 80035e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699a      	ldr	r2, [r3, #24]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0204 	bic.w	r2, r2, #4
 80035f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6999      	ldr	r1, [r3, #24]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	691a      	ldr	r2, [r3, #16]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	619a      	str	r2, [r3, #24]
      break;
 8003606:	e0a3      	b.n	8003750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fa90 	bl	8003b34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699a      	ldr	r2, [r3, #24]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699a      	ldr	r2, [r3, #24]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6999      	ldr	r1, [r3, #24]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	021a      	lsls	r2, r3, #8
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	619a      	str	r2, [r3, #24]
      break;
 8003648:	e082      	b.n	8003750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	4618      	mov	r0, r3
 8003652:	f000 faf9 	bl	8003c48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69da      	ldr	r2, [r3, #28]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0208 	orr.w	r2, r2, #8
 8003664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69da      	ldr	r2, [r3, #28]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0204 	bic.w	r2, r2, #4
 8003674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69d9      	ldr	r1, [r3, #28]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	61da      	str	r2, [r3, #28]
      break;
 8003688:	e062      	b.n	8003750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68b9      	ldr	r1, [r7, #8]
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fb61 	bl	8003d58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69da      	ldr	r2, [r3, #28]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69da      	ldr	r2, [r3, #28]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	69d9      	ldr	r1, [r3, #28]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	021a      	lsls	r2, r3, #8
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	61da      	str	r2, [r3, #28]
      break;
 80036ca:	e041      	b.n	8003750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68b9      	ldr	r1, [r7, #8]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 fbaa 	bl	8003e2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0208 	orr.w	r2, r2, #8
 80036e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0204 	bic.w	r2, r2, #4
 80036f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	691a      	ldr	r2, [r3, #16]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800370a:	e021      	b.n	8003750 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68b9      	ldr	r1, [r7, #8]
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fbee 	bl	8003ef4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003726:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003736:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	021a      	lsls	r2, r3, #8
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800374c:	e000      	b.n	8003750 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800374e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop

0800376c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_TIM_ConfigClockSource+0x18>
 8003780:	2302      	movs	r3, #2
 8003782:	e0a8      	b.n	80038d6 <HAL_TIM_ConfigClockSource+0x16a>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b40      	cmp	r3, #64	; 0x40
 80037be:	d067      	beq.n	8003890 <HAL_TIM_ConfigClockSource+0x124>
 80037c0:	2b40      	cmp	r3, #64	; 0x40
 80037c2:	d80b      	bhi.n	80037dc <HAL_TIM_ConfigClockSource+0x70>
 80037c4:	2b10      	cmp	r3, #16
 80037c6:	d073      	beq.n	80038b0 <HAL_TIM_ConfigClockSource+0x144>
 80037c8:	2b10      	cmp	r3, #16
 80037ca:	d802      	bhi.n	80037d2 <HAL_TIM_ConfigClockSource+0x66>
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d06f      	beq.n	80038b0 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80037d0:	e078      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80037d2:	2b20      	cmp	r3, #32
 80037d4:	d06c      	beq.n	80038b0 <HAL_TIM_ConfigClockSource+0x144>
 80037d6:	2b30      	cmp	r3, #48	; 0x30
 80037d8:	d06a      	beq.n	80038b0 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80037da:	e073      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80037dc:	2b70      	cmp	r3, #112	; 0x70
 80037de:	d00d      	beq.n	80037fc <HAL_TIM_ConfigClockSource+0x90>
 80037e0:	2b70      	cmp	r3, #112	; 0x70
 80037e2:	d804      	bhi.n	80037ee <HAL_TIM_ConfigClockSource+0x82>
 80037e4:	2b50      	cmp	r3, #80	; 0x50
 80037e6:	d033      	beq.n	8003850 <HAL_TIM_ConfigClockSource+0xe4>
 80037e8:	2b60      	cmp	r3, #96	; 0x60
 80037ea:	d041      	beq.n	8003870 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80037ec:	e06a      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80037ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f2:	d066      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x156>
 80037f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f8:	d017      	beq.n	800382a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80037fa:	e063      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6818      	ldr	r0, [r3, #0]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	6899      	ldr	r1, [r3, #8]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f000 fc52 	bl	80040b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800381e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	609a      	str	r2, [r3, #8]
      break;
 8003828:	e04c      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	6899      	ldr	r1, [r3, #8]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f000 fc3b 	bl	80040b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800384c:	609a      	str	r2, [r3, #8]
      break;
 800384e:	e039      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	6859      	ldr	r1, [r3, #4]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	461a      	mov	r2, r3
 800385e:	f000 fbaf 	bl	8003fc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2150      	movs	r1, #80	; 0x50
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fc08 	bl	800407e <TIM_ITRx_SetConfig>
      break;
 800386e:	e029      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	6859      	ldr	r1, [r3, #4]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	461a      	mov	r2, r3
 800387e:	f000 fbce 	bl	800401e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2160      	movs	r1, #96	; 0x60
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fbf8 	bl	800407e <TIM_ITRx_SetConfig>
      break;
 800388e:	e019      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6818      	ldr	r0, [r3, #0]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	6859      	ldr	r1, [r3, #4]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	461a      	mov	r2, r3
 800389e:	f000 fb8f 	bl	8003fc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2140      	movs	r1, #64	; 0x40
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 fbe8 	bl	800407e <TIM_ITRx_SetConfig>
      break;
 80038ae:	e009      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4619      	mov	r1, r3
 80038ba:	4610      	mov	r0, r2
 80038bc:	f000 fbdf 	bl	800407e <TIM_ITRx_SetConfig>
      break;
 80038c0:	e000      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80038c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a40      	ldr	r2, [pc, #256]	; (80039f4 <TIM_Base_SetConfig+0x114>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d013      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fe:	d00f      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a3d      	ldr	r2, [pc, #244]	; (80039f8 <TIM_Base_SetConfig+0x118>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00b      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a3c      	ldr	r2, [pc, #240]	; (80039fc <TIM_Base_SetConfig+0x11c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d007      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a3b      	ldr	r2, [pc, #236]	; (8003a00 <TIM_Base_SetConfig+0x120>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d003      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a3a      	ldr	r2, [pc, #232]	; (8003a04 <TIM_Base_SetConfig+0x124>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d108      	bne.n	8003932 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a2f      	ldr	r2, [pc, #188]	; (80039f4 <TIM_Base_SetConfig+0x114>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d01f      	beq.n	800397a <TIM_Base_SetConfig+0x9a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003940:	d01b      	beq.n	800397a <TIM_Base_SetConfig+0x9a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a2c      	ldr	r2, [pc, #176]	; (80039f8 <TIM_Base_SetConfig+0x118>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d017      	beq.n	800397a <TIM_Base_SetConfig+0x9a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a2b      	ldr	r2, [pc, #172]	; (80039fc <TIM_Base_SetConfig+0x11c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d013      	beq.n	800397a <TIM_Base_SetConfig+0x9a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a2a      	ldr	r2, [pc, #168]	; (8003a00 <TIM_Base_SetConfig+0x120>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d00f      	beq.n	800397a <TIM_Base_SetConfig+0x9a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a29      	ldr	r2, [pc, #164]	; (8003a04 <TIM_Base_SetConfig+0x124>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00b      	beq.n	800397a <TIM_Base_SetConfig+0x9a>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a28      	ldr	r2, [pc, #160]	; (8003a08 <TIM_Base_SetConfig+0x128>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d007      	beq.n	800397a <TIM_Base_SetConfig+0x9a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a27      	ldr	r2, [pc, #156]	; (8003a0c <TIM_Base_SetConfig+0x12c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d003      	beq.n	800397a <TIM_Base_SetConfig+0x9a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a26      	ldr	r2, [pc, #152]	; (8003a10 <TIM_Base_SetConfig+0x130>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d108      	bne.n	800398c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4313      	orrs	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a10      	ldr	r2, [pc, #64]	; (80039f4 <TIM_Base_SetConfig+0x114>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d00f      	beq.n	80039d8 <TIM_Base_SetConfig+0xf8>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a12      	ldr	r2, [pc, #72]	; (8003a04 <TIM_Base_SetConfig+0x124>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00b      	beq.n	80039d8 <TIM_Base_SetConfig+0xf8>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a11      	ldr	r2, [pc, #68]	; (8003a08 <TIM_Base_SetConfig+0x128>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d007      	beq.n	80039d8 <TIM_Base_SetConfig+0xf8>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a10      	ldr	r2, [pc, #64]	; (8003a0c <TIM_Base_SetConfig+0x12c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d003      	beq.n	80039d8 <TIM_Base_SetConfig+0xf8>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a0f      	ldr	r2, [pc, #60]	; (8003a10 <TIM_Base_SetConfig+0x130>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d103      	bne.n	80039e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	615a      	str	r2, [r3, #20]
}
 80039e6:	bf00      	nop
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40012c00 	.word	0x40012c00
 80039f8:	40000400 	.word	0x40000400
 80039fc:	40000800 	.word	0x40000800
 8003a00:	40000c00 	.word	0x40000c00
 8003a04:	40013400 	.word	0x40013400
 8003a08:	40014000 	.word	0x40014000
 8003a0c:	40014400 	.word	0x40014400
 8003a10:	40014800 	.word	0x40014800

08003a14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	f023 0201 	bic.w	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0303 	bic.w	r3, r3, #3
 8003a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f023 0302 	bic.w	r3, r3, #2
 8003a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a2c      	ldr	r2, [pc, #176]	; (8003b20 <TIM_OC1_SetConfig+0x10c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00f      	beq.n	8003a94 <TIM_OC1_SetConfig+0x80>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a2b      	ldr	r2, [pc, #172]	; (8003b24 <TIM_OC1_SetConfig+0x110>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00b      	beq.n	8003a94 <TIM_OC1_SetConfig+0x80>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a2a      	ldr	r2, [pc, #168]	; (8003b28 <TIM_OC1_SetConfig+0x114>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d007      	beq.n	8003a94 <TIM_OC1_SetConfig+0x80>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a29      	ldr	r2, [pc, #164]	; (8003b2c <TIM_OC1_SetConfig+0x118>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d003      	beq.n	8003a94 <TIM_OC1_SetConfig+0x80>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a28      	ldr	r2, [pc, #160]	; (8003b30 <TIM_OC1_SetConfig+0x11c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d10c      	bne.n	8003aae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f023 0308 	bic.w	r3, r3, #8
 8003a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f023 0304 	bic.w	r3, r3, #4
 8003aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a1b      	ldr	r2, [pc, #108]	; (8003b20 <TIM_OC1_SetConfig+0x10c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d00f      	beq.n	8003ad6 <TIM_OC1_SetConfig+0xc2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a1a      	ldr	r2, [pc, #104]	; (8003b24 <TIM_OC1_SetConfig+0x110>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00b      	beq.n	8003ad6 <TIM_OC1_SetConfig+0xc2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a19      	ldr	r2, [pc, #100]	; (8003b28 <TIM_OC1_SetConfig+0x114>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d007      	beq.n	8003ad6 <TIM_OC1_SetConfig+0xc2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a18      	ldr	r2, [pc, #96]	; (8003b2c <TIM_OC1_SetConfig+0x118>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d003      	beq.n	8003ad6 <TIM_OC1_SetConfig+0xc2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a17      	ldr	r2, [pc, #92]	; (8003b30 <TIM_OC1_SetConfig+0x11c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d111      	bne.n	8003afa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	621a      	str	r2, [r3, #32]
}
 8003b14:	bf00      	nop
 8003b16:	371c      	adds	r7, #28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	40012c00 	.word	0x40012c00
 8003b24:	40013400 	.word	0x40013400
 8003b28:	40014000 	.word	0x40014000
 8003b2c:	40014400 	.word	0x40014400
 8003b30:	40014800 	.word	0x40014800

08003b34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	f023 0210 	bic.w	r2, r3, #16
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	021b      	lsls	r3, r3, #8
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f023 0320 	bic.w	r3, r3, #32
 8003b82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a28      	ldr	r2, [pc, #160]	; (8003c34 <TIM_OC2_SetConfig+0x100>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d003      	beq.n	8003ba0 <TIM_OC2_SetConfig+0x6c>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a27      	ldr	r2, [pc, #156]	; (8003c38 <TIM_OC2_SetConfig+0x104>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d10d      	bne.n	8003bbc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <TIM_OC2_SetConfig+0x100>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d00f      	beq.n	8003be4 <TIM_OC2_SetConfig+0xb0>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a1c      	ldr	r2, [pc, #112]	; (8003c38 <TIM_OC2_SetConfig+0x104>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00b      	beq.n	8003be4 <TIM_OC2_SetConfig+0xb0>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a1b      	ldr	r2, [pc, #108]	; (8003c3c <TIM_OC2_SetConfig+0x108>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d007      	beq.n	8003be4 <TIM_OC2_SetConfig+0xb0>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a1a      	ldr	r2, [pc, #104]	; (8003c40 <TIM_OC2_SetConfig+0x10c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d003      	beq.n	8003be4 <TIM_OC2_SetConfig+0xb0>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a19      	ldr	r2, [pc, #100]	; (8003c44 <TIM_OC2_SetConfig+0x110>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d113      	bne.n	8003c0c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	621a      	str	r2, [r3, #32]
}
 8003c26:	bf00      	nop
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40012c00 	.word	0x40012c00
 8003c38:	40013400 	.word	0x40013400
 8003c3c:	40014000 	.word	0x40014000
 8003c40:	40014400 	.word	0x40014400
 8003c44:	40014800 	.word	0x40014800

08003c48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0303 	bic.w	r3, r3, #3
 8003c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	021b      	lsls	r3, r3, #8
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a27      	ldr	r2, [pc, #156]	; (8003d44 <TIM_OC3_SetConfig+0xfc>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d003      	beq.n	8003cb2 <TIM_OC3_SetConfig+0x6a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a26      	ldr	r2, [pc, #152]	; (8003d48 <TIM_OC3_SetConfig+0x100>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d10d      	bne.n	8003cce <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a1c      	ldr	r2, [pc, #112]	; (8003d44 <TIM_OC3_SetConfig+0xfc>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00f      	beq.n	8003cf6 <TIM_OC3_SetConfig+0xae>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a1b      	ldr	r2, [pc, #108]	; (8003d48 <TIM_OC3_SetConfig+0x100>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00b      	beq.n	8003cf6 <TIM_OC3_SetConfig+0xae>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a1a      	ldr	r2, [pc, #104]	; (8003d4c <TIM_OC3_SetConfig+0x104>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d007      	beq.n	8003cf6 <TIM_OC3_SetConfig+0xae>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a19      	ldr	r2, [pc, #100]	; (8003d50 <TIM_OC3_SetConfig+0x108>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d003      	beq.n	8003cf6 <TIM_OC3_SetConfig+0xae>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a18      	ldr	r2, [pc, #96]	; (8003d54 <TIM_OC3_SetConfig+0x10c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d113      	bne.n	8003d1e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	621a      	str	r2, [r3, #32]
}
 8003d38:	bf00      	nop
 8003d3a:	371c      	adds	r7, #28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	40012c00 	.word	0x40012c00
 8003d48:	40013400 	.word	0x40013400
 8003d4c:	40014000 	.word	0x40014000
 8003d50:	40014400 	.word	0x40014400
 8003d54:	40014800 	.word	0x40014800

08003d58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	021b      	lsls	r3, r3, #8
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003da6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	031b      	lsls	r3, r3, #12
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a18      	ldr	r2, [pc, #96]	; (8003e18 <TIM_OC4_SetConfig+0xc0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d00f      	beq.n	8003ddc <TIM_OC4_SetConfig+0x84>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a17      	ldr	r2, [pc, #92]	; (8003e1c <TIM_OC4_SetConfig+0xc4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d00b      	beq.n	8003ddc <TIM_OC4_SetConfig+0x84>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a16      	ldr	r2, [pc, #88]	; (8003e20 <TIM_OC4_SetConfig+0xc8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d007      	beq.n	8003ddc <TIM_OC4_SetConfig+0x84>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a15      	ldr	r2, [pc, #84]	; (8003e24 <TIM_OC4_SetConfig+0xcc>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d003      	beq.n	8003ddc <TIM_OC4_SetConfig+0x84>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a14      	ldr	r2, [pc, #80]	; (8003e28 <TIM_OC4_SetConfig+0xd0>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d109      	bne.n	8003df0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003de2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	019b      	lsls	r3, r3, #6
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	621a      	str	r2, [r3, #32]
}
 8003e0a:	bf00      	nop
 8003e0c:	371c      	adds	r7, #28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40012c00 	.word	0x40012c00
 8003e1c:	40013400 	.word	0x40013400
 8003e20:	40014000 	.word	0x40014000
 8003e24:	40014400 	.word	0x40014400
 8003e28:	40014800 	.word	0x40014800

08003e2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	041b      	lsls	r3, r3, #16
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a17      	ldr	r2, [pc, #92]	; (8003ee0 <TIM_OC5_SetConfig+0xb4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00f      	beq.n	8003ea6 <TIM_OC5_SetConfig+0x7a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a16      	ldr	r2, [pc, #88]	; (8003ee4 <TIM_OC5_SetConfig+0xb8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00b      	beq.n	8003ea6 <TIM_OC5_SetConfig+0x7a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a15      	ldr	r2, [pc, #84]	; (8003ee8 <TIM_OC5_SetConfig+0xbc>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d007      	beq.n	8003ea6 <TIM_OC5_SetConfig+0x7a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a14      	ldr	r2, [pc, #80]	; (8003eec <TIM_OC5_SetConfig+0xc0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d003      	beq.n	8003ea6 <TIM_OC5_SetConfig+0x7a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a13      	ldr	r2, [pc, #76]	; (8003ef0 <TIM_OC5_SetConfig+0xc4>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d109      	bne.n	8003eba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	621a      	str	r2, [r3, #32]
}
 8003ed4:	bf00      	nop
 8003ed6:	371c      	adds	r7, #28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	40012c00 	.word	0x40012c00
 8003ee4:	40013400 	.word	0x40013400
 8003ee8:	40014000 	.word	0x40014000
 8003eec:	40014400 	.word	0x40014400
 8003ef0:	40014800 	.word	0x40014800

08003ef4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	021b      	lsls	r3, r3, #8
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	051b      	lsls	r3, r3, #20
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a18      	ldr	r2, [pc, #96]	; (8003fac <TIM_OC6_SetConfig+0xb8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d00f      	beq.n	8003f70 <TIM_OC6_SetConfig+0x7c>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a17      	ldr	r2, [pc, #92]	; (8003fb0 <TIM_OC6_SetConfig+0xbc>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d00b      	beq.n	8003f70 <TIM_OC6_SetConfig+0x7c>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a16      	ldr	r2, [pc, #88]	; (8003fb4 <TIM_OC6_SetConfig+0xc0>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d007      	beq.n	8003f70 <TIM_OC6_SetConfig+0x7c>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a15      	ldr	r2, [pc, #84]	; (8003fb8 <TIM_OC6_SetConfig+0xc4>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d003      	beq.n	8003f70 <TIM_OC6_SetConfig+0x7c>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a14      	ldr	r2, [pc, #80]	; (8003fbc <TIM_OC6_SetConfig+0xc8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d109      	bne.n	8003f84 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	029b      	lsls	r3, r3, #10
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	621a      	str	r2, [r3, #32]
}
 8003f9e:	bf00      	nop
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40012c00 	.word	0x40012c00
 8003fb0:	40013400 	.word	0x40013400
 8003fb4:	40014000 	.word	0x40014000
 8003fb8:	40014400 	.word	0x40014400
 8003fbc:	40014800 	.word	0x40014800

08003fc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	f023 0201 	bic.w	r2, r3, #1
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f023 030a 	bic.w	r3, r3, #10
 8003ffc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4313      	orrs	r3, r2
 8004004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	621a      	str	r2, [r3, #32]
}
 8004012:	bf00      	nop
 8004014:	371c      	adds	r7, #28
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800401e:	b480      	push	{r7}
 8004020:	b087      	sub	sp, #28
 8004022:	af00      	add	r7, sp, #0
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	f023 0210 	bic.w	r2, r3, #16
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004048:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	031b      	lsls	r3, r3, #12
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4313      	orrs	r3, r2
 8004052:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800405a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	621a      	str	r2, [r3, #32]
}
 8004072:	bf00      	nop
 8004074:	371c      	adds	r7, #28
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800407e:	b480      	push	{r7}
 8004080:	b085      	sub	sp, #20
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004094:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	f043 0307 	orr.w	r3, r3, #7
 80040a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	609a      	str	r2, [r3, #8]
}
 80040a8:	bf00      	nop
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	021a      	lsls	r2, r3, #8
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	431a      	orrs	r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4313      	orrs	r3, r2
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	4313      	orrs	r3, r2
 80040e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	609a      	str	r2, [r3, #8]
}
 80040e8:	bf00      	nop
 80040ea:	371c      	adds	r7, #28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f003 031f 	and.w	r3, r3, #31
 8004106:	2201      	movs	r2, #1
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a1a      	ldr	r2, [r3, #32]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	43db      	mvns	r3, r3
 8004116:	401a      	ands	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a1a      	ldr	r2, [r3, #32]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f003 031f 	and.w	r3, r3, #31
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	fa01 f303 	lsl.w	r3, r1, r3
 800412c:	431a      	orrs	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	621a      	str	r2, [r3, #32]
}
 8004132:	bf00      	nop
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
	...

08004140 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004154:	2302      	movs	r3, #2
 8004156:	e045      	b.n	80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a1c      	ldr	r2, [pc, #112]	; (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d004      	beq.n	800418c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a1b      	ldr	r2, [pc, #108]	; (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d108      	bne.n	800419e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004192:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041b6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	40012c00 	.word	0x40012c00
 80041f4:	40013400 	.word	0x40013400

080041f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004210:	2302      	movs	r3, #2
 8004212:	e065      	b.n	80042e0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	4313      	orrs	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4313      	orrs	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4313      	orrs	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	041b      	lsls	r3, r3, #16
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a16      	ldr	r2, [pc, #88]	; (80042ec <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d004      	beq.n	80042a2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a14      	ldr	r2, [pc, #80]	; (80042f0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d115      	bne.n	80042ce <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	051b      	lsls	r3, r3, #20
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	40012c00 	.word	0x40012c00
 80042f0:	40013400 	.word	0x40013400

080042f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e040      	b.n	8004388 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f002 fd9a 	bl	8006e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2224      	movs	r2, #36	; 0x24
 8004320:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0201 	bic.w	r2, r2, #1
 8004330:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fa6e 	bl	8004814 <UART_SetConfig>
 8004338:	4603      	mov	r3, r0
 800433a:	2b01      	cmp	r3, #1
 800433c:	d101      	bne.n	8004342 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e022      	b.n	8004388 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fdaa 	bl	8004ea4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800435e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800436e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 fe31 	bl	8004fe8 <UART_CheckIdleState>
 8004386:	4603      	mov	r3, r0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	4613      	mov	r3, r2
 800439c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a2:	2b20      	cmp	r3, #32
 80043a4:	d144      	bne.n	8004430 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <HAL_UART_Transmit_IT+0x22>
 80043ac:	88fb      	ldrh	r3, [r7, #6]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e03d      	b.n	8004432 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d101      	bne.n	80043c4 <HAL_UART_Transmit_IT+0x34>
 80043c0:	2302      	movs	r3, #2
 80043c2:	e036      	b.n	8004432 <HAL_UART_Transmit_IT+0xa2>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	88fa      	ldrh	r2, [r7, #6]
 80043d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	88fa      	ldrh	r2, [r7, #6]
 80043de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2221      	movs	r2, #33	; 0x21
 80043f2:	675a      	str	r2, [r3, #116]	; 0x74
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043fc:	d107      	bne.n	800440e <HAL_UART_Transmit_IT+0x7e>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d103      	bne.n	800440e <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	4a0d      	ldr	r2, [pc, #52]	; (8004440 <HAL_UART_Transmit_IT+0xb0>)
 800440a:	665a      	str	r2, [r3, #100]	; 0x64
 800440c:	e002      	b.n	8004414 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4a0c      	ldr	r2, [pc, #48]	; (8004444 <HAL_UART_Transmit_IT+0xb4>)
 8004412:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800442a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	e000      	b.n	8004432 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8004430:	2302      	movs	r3, #2
  }
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	080051e3 	.word	0x080051e3
 8004444:	0800516f 	.word	0x0800516f

08004448 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	4613      	mov	r3, r2
 8004454:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800445a:	2b20      	cmp	r3, #32
 800445c:	f040 808a 	bne.w	8004574 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <HAL_UART_Receive_IT+0x24>
 8004466:	88fb      	ldrh	r3, [r7, #6]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e082      	b.n	8004576 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_UART_Receive_IT+0x36>
 800447a:	2302      	movs	r3, #2
 800447c:	e07b      	b.n	8004576 <HAL_UART_Receive_IT+0x12e>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	88fa      	ldrh	r2, [r7, #6]
 8004490:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	88fa      	ldrh	r2, [r7, #6]
 8004498:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044aa:	d10e      	bne.n	80044ca <HAL_UART_Receive_IT+0x82>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d105      	bne.n	80044c0 <HAL_UART_Receive_IT+0x78>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80044ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044be:	e02d      	b.n	800451c <HAL_UART_Receive_IT+0xd4>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	22ff      	movs	r2, #255	; 0xff
 80044c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044c8:	e028      	b.n	800451c <HAL_UART_Receive_IT+0xd4>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10d      	bne.n	80044ee <HAL_UART_Receive_IT+0xa6>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d104      	bne.n	80044e4 <HAL_UART_Receive_IT+0x9c>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	22ff      	movs	r2, #255	; 0xff
 80044de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044e2:	e01b      	b.n	800451c <HAL_UART_Receive_IT+0xd4>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	227f      	movs	r2, #127	; 0x7f
 80044e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044ec:	e016      	b.n	800451c <HAL_UART_Receive_IT+0xd4>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044f6:	d10d      	bne.n	8004514 <HAL_UART_Receive_IT+0xcc>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d104      	bne.n	800450a <HAL_UART_Receive_IT+0xc2>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	227f      	movs	r2, #127	; 0x7f
 8004504:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004508:	e008      	b.n	800451c <HAL_UART_Receive_IT+0xd4>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	223f      	movs	r2, #63	; 0x3f
 800450e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004512:	e003      	b.n	800451c <HAL_UART_Receive_IT+0xd4>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2222      	movs	r2, #34	; 0x22
 8004526:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004540:	d107      	bne.n	8004552 <HAL_UART_Receive_IT+0x10a>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d103      	bne.n	8004552 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4a0d      	ldr	r2, [pc, #52]	; (8004584 <HAL_UART_Receive_IT+0x13c>)
 800454e:	661a      	str	r2, [r3, #96]	; 0x60
 8004550:	e002      	b.n	8004558 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4a0c      	ldr	r2, [pc, #48]	; (8004588 <HAL_UART_Receive_IT+0x140>)
 8004556:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800456e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004570:	2300      	movs	r3, #0
 8004572:	e000      	b.n	8004576 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004574:	2302      	movs	r3, #2
  }
}
 8004576:	4618      	mov	r0, r3
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	0800533b 	.word	0x0800533b
 8004588:	08005291 	.word	0x08005291

0800458c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b088      	sub	sp, #32
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d113      	bne.n	80045e2 <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00e      	beq.n	80045e2 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d009      	beq.n	80045e2 <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 80ff 	beq.w	80047d6 <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	4798      	blx	r3
      }
      return;
 80045e0:	e0f9      	b.n	80047d6 <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 80c1 	beq.w	800476c <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d105      	bne.n	8004600 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 80b6 	beq.w	800476c <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00e      	beq.n	8004628 <HAL_UART_IRQHandler+0x9c>
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004610:	2b00      	cmp	r3, #0
 8004612:	d009      	beq.n	8004628 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2201      	movs	r2, #1
 800461a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004620:	f043 0201 	orr.w	r2, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00e      	beq.n	8004650 <HAL_UART_IRQHandler+0xc4>
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d009      	beq.n	8004650 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2202      	movs	r2, #2
 8004642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004648:	f043 0204 	orr.w	r2, r3, #4
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00e      	beq.n	8004678 <HAL_UART_IRQHandler+0xec>
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d009      	beq.n	8004678 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2204      	movs	r2, #4
 800466a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004670:	f043 0202 	orr.w	r2, r3, #2
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d013      	beq.n	80046aa <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	f003 0320 	and.w	r3, r3, #32
 8004688:	2b00      	cmp	r3, #0
 800468a:	d104      	bne.n	8004696 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2208      	movs	r2, #8
 800469c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046a2:	f043 0208 	orr.w	r2, r3, #8
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 8093 	beq.w	80047da <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	f003 0320 	and.w	r3, r3, #32
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00c      	beq.n	80046d8 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	f003 0320 	and.w	r3, r3, #32
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d007      	beq.n	80046d8 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046dc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e8:	2b40      	cmp	r3, #64	; 0x40
 80046ea:	d004      	beq.n	80046f6 <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d031      	beq.n	800475a <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fd03 	bl	8005102 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004706:	2b40      	cmp	r3, #64	; 0x40
 8004708:	d123      	bne.n	8004752 <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004718:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800471e:	2b00      	cmp	r3, #0
 8004720:	d013      	beq.n	800474a <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004726:	4a30      	ldr	r2, [pc, #192]	; (80047e8 <HAL_UART_IRQHandler+0x25c>)
 8004728:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800472e:	4618      	mov	r0, r3
 8004730:	f7fc fe75 	bl	800141e <HAL_DMA_Abort_IT>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d016      	beq.n	8004768 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004744:	4610      	mov	r0, r2
 8004746:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004748:	e00e      	b.n	8004768 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f858 	bl	8004800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004750:	e00a      	b.n	8004768 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f854 	bl	8004800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004758:	e006      	b.n	8004768 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f850 	bl	8004800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004766:	e038      	b.n	80047da <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004768:	bf00      	nop
    return;
 800476a:	e036      	b.n	80047da <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00d      	beq.n	8004792 <HAL_UART_IRQHandler+0x206>
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004788:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 fe2a 	bl	80053e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004790:	e026      	b.n	80047e0 <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00d      	beq.n	80047b8 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d008      	beq.n	80047b8 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d017      	beq.n	80047de <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	4798      	blx	r3
    }
    return;
 80047b6:	e012      	b.n	80047de <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00e      	beq.n	80047e0 <HAL_UART_IRQHandler+0x254>
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d009      	beq.n	80047e0 <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 fd46 	bl	800525e <UART_EndTransmit_IT>
    return;
 80047d2:	bf00      	nop
 80047d4:	e004      	b.n	80047e0 <HAL_UART_IRQHandler+0x254>
      return;
 80047d6:	bf00      	nop
 80047d8:	e002      	b.n	80047e0 <HAL_UART_IRQHandler+0x254>
    return;
 80047da:	bf00      	nop
 80047dc:	e000      	b.n	80047e0 <HAL_UART_IRQHandler+0x254>
    return;
 80047de:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80047e0:	3720      	adds	r7, #32
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	08005143 	.word	0x08005143

080047ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004814:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004818:	b088      	sub	sp, #32
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004826:	2300      	movs	r3, #0
 8004828:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	4313      	orrs	r3, r2
 8004840:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	4bac      	ldr	r3, [pc, #688]	; (8004afc <UART_SetConfig+0x2e8>)
 800484a:	4013      	ands	r3, r2
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6812      	ldr	r2, [r2, #0]
 8004850:	69f9      	ldr	r1, [r7, #28]
 8004852:	430b      	orrs	r3, r1
 8004854:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4aa2      	ldr	r2, [pc, #648]	; (8004b00 <UART_SetConfig+0x2ec>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d004      	beq.n	8004886 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	69fa      	ldr	r2, [r7, #28]
 8004882:	4313      	orrs	r3, r2
 8004884:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	69fa      	ldr	r2, [r7, #28]
 8004896:	430a      	orrs	r2, r1
 8004898:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a99      	ldr	r2, [pc, #612]	; (8004b04 <UART_SetConfig+0x2f0>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d121      	bne.n	80048e8 <UART_SetConfig+0xd4>
 80048a4:	4b98      	ldr	r3, [pc, #608]	; (8004b08 <UART_SetConfig+0x2f4>)
 80048a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	2b03      	cmp	r3, #3
 80048b0:	d816      	bhi.n	80048e0 <UART_SetConfig+0xcc>
 80048b2:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <UART_SetConfig+0xa4>)
 80048b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b8:	080048c9 	.word	0x080048c9
 80048bc:	080048d5 	.word	0x080048d5
 80048c0:	080048cf 	.word	0x080048cf
 80048c4:	080048db 	.word	0x080048db
 80048c8:	2301      	movs	r3, #1
 80048ca:	76fb      	strb	r3, [r7, #27]
 80048cc:	e0e8      	b.n	8004aa0 <UART_SetConfig+0x28c>
 80048ce:	2302      	movs	r3, #2
 80048d0:	76fb      	strb	r3, [r7, #27]
 80048d2:	e0e5      	b.n	8004aa0 <UART_SetConfig+0x28c>
 80048d4:	2304      	movs	r3, #4
 80048d6:	76fb      	strb	r3, [r7, #27]
 80048d8:	e0e2      	b.n	8004aa0 <UART_SetConfig+0x28c>
 80048da:	2308      	movs	r3, #8
 80048dc:	76fb      	strb	r3, [r7, #27]
 80048de:	e0df      	b.n	8004aa0 <UART_SetConfig+0x28c>
 80048e0:	2310      	movs	r3, #16
 80048e2:	76fb      	strb	r3, [r7, #27]
 80048e4:	bf00      	nop
 80048e6:	e0db      	b.n	8004aa0 <UART_SetConfig+0x28c>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a87      	ldr	r2, [pc, #540]	; (8004b0c <UART_SetConfig+0x2f8>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d134      	bne.n	800495c <UART_SetConfig+0x148>
 80048f2:	4b85      	ldr	r3, [pc, #532]	; (8004b08 <UART_SetConfig+0x2f4>)
 80048f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f8:	f003 030c 	and.w	r3, r3, #12
 80048fc:	2b0c      	cmp	r3, #12
 80048fe:	d829      	bhi.n	8004954 <UART_SetConfig+0x140>
 8004900:	a201      	add	r2, pc, #4	; (adr r2, 8004908 <UART_SetConfig+0xf4>)
 8004902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004906:	bf00      	nop
 8004908:	0800493d 	.word	0x0800493d
 800490c:	08004955 	.word	0x08004955
 8004910:	08004955 	.word	0x08004955
 8004914:	08004955 	.word	0x08004955
 8004918:	08004949 	.word	0x08004949
 800491c:	08004955 	.word	0x08004955
 8004920:	08004955 	.word	0x08004955
 8004924:	08004955 	.word	0x08004955
 8004928:	08004943 	.word	0x08004943
 800492c:	08004955 	.word	0x08004955
 8004930:	08004955 	.word	0x08004955
 8004934:	08004955 	.word	0x08004955
 8004938:	0800494f 	.word	0x0800494f
 800493c:	2300      	movs	r3, #0
 800493e:	76fb      	strb	r3, [r7, #27]
 8004940:	e0ae      	b.n	8004aa0 <UART_SetConfig+0x28c>
 8004942:	2302      	movs	r3, #2
 8004944:	76fb      	strb	r3, [r7, #27]
 8004946:	e0ab      	b.n	8004aa0 <UART_SetConfig+0x28c>
 8004948:	2304      	movs	r3, #4
 800494a:	76fb      	strb	r3, [r7, #27]
 800494c:	e0a8      	b.n	8004aa0 <UART_SetConfig+0x28c>
 800494e:	2308      	movs	r3, #8
 8004950:	76fb      	strb	r3, [r7, #27]
 8004952:	e0a5      	b.n	8004aa0 <UART_SetConfig+0x28c>
 8004954:	2310      	movs	r3, #16
 8004956:	76fb      	strb	r3, [r7, #27]
 8004958:	bf00      	nop
 800495a:	e0a1      	b.n	8004aa0 <UART_SetConfig+0x28c>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a6b      	ldr	r2, [pc, #428]	; (8004b10 <UART_SetConfig+0x2fc>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d120      	bne.n	80049a8 <UART_SetConfig+0x194>
 8004966:	4b68      	ldr	r3, [pc, #416]	; (8004b08 <UART_SetConfig+0x2f4>)
 8004968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004970:	2b10      	cmp	r3, #16
 8004972:	d00f      	beq.n	8004994 <UART_SetConfig+0x180>
 8004974:	2b10      	cmp	r3, #16
 8004976:	d802      	bhi.n	800497e <UART_SetConfig+0x16a>
 8004978:	2b00      	cmp	r3, #0
 800497a:	d005      	beq.n	8004988 <UART_SetConfig+0x174>
 800497c:	e010      	b.n	80049a0 <UART_SetConfig+0x18c>
 800497e:	2b20      	cmp	r3, #32
 8004980:	d005      	beq.n	800498e <UART_SetConfig+0x17a>
 8004982:	2b30      	cmp	r3, #48	; 0x30
 8004984:	d009      	beq.n	800499a <UART_SetConfig+0x186>
 8004986:	e00b      	b.n	80049a0 <UART_SetConfig+0x18c>
 8004988:	2300      	movs	r3, #0
 800498a:	76fb      	strb	r3, [r7, #27]
 800498c:	e088      	b.n	8004aa0 <UART_SetConfig+0x28c>
 800498e:	2302      	movs	r3, #2
 8004990:	76fb      	strb	r3, [r7, #27]
 8004992:	e085      	b.n	8004aa0 <UART_SetConfig+0x28c>
 8004994:	2304      	movs	r3, #4
 8004996:	76fb      	strb	r3, [r7, #27]
 8004998:	e082      	b.n	8004aa0 <UART_SetConfig+0x28c>
 800499a:	2308      	movs	r3, #8
 800499c:	76fb      	strb	r3, [r7, #27]
 800499e:	e07f      	b.n	8004aa0 <UART_SetConfig+0x28c>
 80049a0:	2310      	movs	r3, #16
 80049a2:	76fb      	strb	r3, [r7, #27]
 80049a4:	bf00      	nop
 80049a6:	e07b      	b.n	8004aa0 <UART_SetConfig+0x28c>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a59      	ldr	r2, [pc, #356]	; (8004b14 <UART_SetConfig+0x300>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d120      	bne.n	80049f4 <UART_SetConfig+0x1e0>
 80049b2:	4b55      	ldr	r3, [pc, #340]	; (8004b08 <UART_SetConfig+0x2f4>)
 80049b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049bc:	2b40      	cmp	r3, #64	; 0x40
 80049be:	d00f      	beq.n	80049e0 <UART_SetConfig+0x1cc>
 80049c0:	2b40      	cmp	r3, #64	; 0x40
 80049c2:	d802      	bhi.n	80049ca <UART_SetConfig+0x1b6>
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <UART_SetConfig+0x1c0>
 80049c8:	e010      	b.n	80049ec <UART_SetConfig+0x1d8>
 80049ca:	2b80      	cmp	r3, #128	; 0x80
 80049cc:	d005      	beq.n	80049da <UART_SetConfig+0x1c6>
 80049ce:	2bc0      	cmp	r3, #192	; 0xc0
 80049d0:	d009      	beq.n	80049e6 <UART_SetConfig+0x1d2>
 80049d2:	e00b      	b.n	80049ec <UART_SetConfig+0x1d8>
 80049d4:	2300      	movs	r3, #0
 80049d6:	76fb      	strb	r3, [r7, #27]
 80049d8:	e062      	b.n	8004aa0 <UART_SetConfig+0x28c>
 80049da:	2302      	movs	r3, #2
 80049dc:	76fb      	strb	r3, [r7, #27]
 80049de:	e05f      	b.n	8004aa0 <UART_SetConfig+0x28c>
 80049e0:	2304      	movs	r3, #4
 80049e2:	76fb      	strb	r3, [r7, #27]
 80049e4:	e05c      	b.n	8004aa0 <UART_SetConfig+0x28c>
 80049e6:	2308      	movs	r3, #8
 80049e8:	76fb      	strb	r3, [r7, #27]
 80049ea:	e059      	b.n	8004aa0 <UART_SetConfig+0x28c>
 80049ec:	2310      	movs	r3, #16
 80049ee:	76fb      	strb	r3, [r7, #27]
 80049f0:	bf00      	nop
 80049f2:	e055      	b.n	8004aa0 <UART_SetConfig+0x28c>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a47      	ldr	r2, [pc, #284]	; (8004b18 <UART_SetConfig+0x304>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d124      	bne.n	8004a48 <UART_SetConfig+0x234>
 80049fe:	4b42      	ldr	r3, [pc, #264]	; (8004b08 <UART_SetConfig+0x2f4>)
 8004a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a0c:	d012      	beq.n	8004a34 <UART_SetConfig+0x220>
 8004a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a12:	d802      	bhi.n	8004a1a <UART_SetConfig+0x206>
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d007      	beq.n	8004a28 <UART_SetConfig+0x214>
 8004a18:	e012      	b.n	8004a40 <UART_SetConfig+0x22c>
 8004a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a1e:	d006      	beq.n	8004a2e <UART_SetConfig+0x21a>
 8004a20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a24:	d009      	beq.n	8004a3a <UART_SetConfig+0x226>
 8004a26:	e00b      	b.n	8004a40 <UART_SetConfig+0x22c>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	76fb      	strb	r3, [r7, #27]
 8004a2c:	e038      	b.n	8004aa0 <UART_SetConfig+0x28c>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	76fb      	strb	r3, [r7, #27]
 8004a32:	e035      	b.n	8004aa0 <UART_SetConfig+0x28c>
 8004a34:	2304      	movs	r3, #4
 8004a36:	76fb      	strb	r3, [r7, #27]
 8004a38:	e032      	b.n	8004aa0 <UART_SetConfig+0x28c>
 8004a3a:	2308      	movs	r3, #8
 8004a3c:	76fb      	strb	r3, [r7, #27]
 8004a3e:	e02f      	b.n	8004aa0 <UART_SetConfig+0x28c>
 8004a40:	2310      	movs	r3, #16
 8004a42:	76fb      	strb	r3, [r7, #27]
 8004a44:	bf00      	nop
 8004a46:	e02b      	b.n	8004aa0 <UART_SetConfig+0x28c>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a2c      	ldr	r2, [pc, #176]	; (8004b00 <UART_SetConfig+0x2ec>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d124      	bne.n	8004a9c <UART_SetConfig+0x288>
 8004a52:	4b2d      	ldr	r3, [pc, #180]	; (8004b08 <UART_SetConfig+0x2f4>)
 8004a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a60:	d012      	beq.n	8004a88 <UART_SetConfig+0x274>
 8004a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a66:	d802      	bhi.n	8004a6e <UART_SetConfig+0x25a>
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d007      	beq.n	8004a7c <UART_SetConfig+0x268>
 8004a6c:	e012      	b.n	8004a94 <UART_SetConfig+0x280>
 8004a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a72:	d006      	beq.n	8004a82 <UART_SetConfig+0x26e>
 8004a74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a78:	d009      	beq.n	8004a8e <UART_SetConfig+0x27a>
 8004a7a:	e00b      	b.n	8004a94 <UART_SetConfig+0x280>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	76fb      	strb	r3, [r7, #27]
 8004a80:	e00e      	b.n	8004aa0 <UART_SetConfig+0x28c>
 8004a82:	2302      	movs	r3, #2
 8004a84:	76fb      	strb	r3, [r7, #27]
 8004a86:	e00b      	b.n	8004aa0 <UART_SetConfig+0x28c>
 8004a88:	2304      	movs	r3, #4
 8004a8a:	76fb      	strb	r3, [r7, #27]
 8004a8c:	e008      	b.n	8004aa0 <UART_SetConfig+0x28c>
 8004a8e:	2308      	movs	r3, #8
 8004a90:	76fb      	strb	r3, [r7, #27]
 8004a92:	e005      	b.n	8004aa0 <UART_SetConfig+0x28c>
 8004a94:	2310      	movs	r3, #16
 8004a96:	76fb      	strb	r3, [r7, #27]
 8004a98:	bf00      	nop
 8004a9a:	e001      	b.n	8004aa0 <UART_SetConfig+0x28c>
 8004a9c:	2310      	movs	r3, #16
 8004a9e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a16      	ldr	r2, [pc, #88]	; (8004b00 <UART_SetConfig+0x2ec>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	f040 80fa 	bne.w	8004ca0 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004aac:	7efb      	ldrb	r3, [r7, #27]
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d836      	bhi.n	8004b20 <UART_SetConfig+0x30c>
 8004ab2:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <UART_SetConfig+0x2a4>)
 8004ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab8:	08004add 	.word	0x08004add
 8004abc:	08004b21 	.word	0x08004b21
 8004ac0:	08004ae5 	.word	0x08004ae5
 8004ac4:	08004b21 	.word	0x08004b21
 8004ac8:	08004aeb 	.word	0x08004aeb
 8004acc:	08004b21 	.word	0x08004b21
 8004ad0:	08004b21 	.word	0x08004b21
 8004ad4:	08004b21 	.word	0x08004b21
 8004ad8:	08004af3 	.word	0x08004af3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004adc:	f7fd fc2c 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 8004ae0:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ae2:	e020      	b.n	8004b26 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004ae4:	4b0d      	ldr	r3, [pc, #52]	; (8004b1c <UART_SetConfig+0x308>)
 8004ae6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ae8:	e01d      	b.n	8004b26 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004aea:	f7fd fb8f 	bl	800220c <HAL_RCC_GetSysClockFreq>
 8004aee:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004af0:	e019      	b.n	8004b26 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004af6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004af8:	e015      	b.n	8004b26 <UART_SetConfig+0x312>
 8004afa:	bf00      	nop
 8004afc:	efff69f3 	.word	0xefff69f3
 8004b00:	40008000 	.word	0x40008000
 8004b04:	40013800 	.word	0x40013800
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	40004400 	.word	0x40004400
 8004b10:	40004800 	.word	0x40004800
 8004b14:	40004c00 	.word	0x40004c00
 8004b18:	40005000 	.word	0x40005000
 8004b1c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	74fb      	strb	r3, [r7, #19]
        break;
 8004b24:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 81ac 	beq.w	8004e86 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	4613      	mov	r3, r2
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	4413      	add	r3, r2
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d305      	bcc.n	8004b4a <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d902      	bls.n	8004b50 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	74fb      	strb	r3, [r7, #19]
 8004b4e:	e19a      	b.n	8004e86 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8004b50:	7efb      	ldrb	r3, [r7, #27]
 8004b52:	2b08      	cmp	r3, #8
 8004b54:	f200 8091 	bhi.w	8004c7a <UART_SetConfig+0x466>
 8004b58:	a201      	add	r2, pc, #4	; (adr r2, 8004b60 <UART_SetConfig+0x34c>)
 8004b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5e:	bf00      	nop
 8004b60:	08004b85 	.word	0x08004b85
 8004b64:	08004c7b 	.word	0x08004c7b
 8004b68:	08004bd1 	.word	0x08004bd1
 8004b6c:	08004c7b 	.word	0x08004c7b
 8004b70:	08004c05 	.word	0x08004c05
 8004b74:	08004c7b 	.word	0x08004c7b
 8004b78:	08004c7b 	.word	0x08004c7b
 8004b7c:	08004c7b 	.word	0x08004c7b
 8004b80:	08004c51 	.word	0x08004c51
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004b84:	f7fd fbd8 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	f04f 0400 	mov.w	r4, #0
 8004b98:	0214      	lsls	r4, r2, #8
 8004b9a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004b9e:	020b      	lsls	r3, r1, #8
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6852      	ldr	r2, [r2, #4]
 8004ba4:	0852      	lsrs	r2, r2, #1
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	eb13 0b01 	adds.w	fp, r3, r1
 8004bb0:	eb44 0c02 	adc.w	ip, r4, r2
 8004bb4:	4658      	mov	r0, fp
 8004bb6:	4661      	mov	r1, ip
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f04f 0400 	mov.w	r4, #0
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	4623      	mov	r3, r4
 8004bc4:	f7fb ff5a 	bl	8000a7c <__aeabi_uldivmod>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	460c      	mov	r4, r1
 8004bcc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004bce:	e057      	b.n	8004c80 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	085b      	lsrs	r3, r3, #1
 8004bd6:	f04f 0400 	mov.w	r4, #0
 8004bda:	49b1      	ldr	r1, [pc, #708]	; (8004ea0 <UART_SetConfig+0x68c>)
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	eb13 0b01 	adds.w	fp, r3, r1
 8004be4:	eb44 0c02 	adc.w	ip, r4, r2
 8004be8:	4658      	mov	r0, fp
 8004bea:	4661      	mov	r1, ip
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f04f 0400 	mov.w	r4, #0
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	4623      	mov	r3, r4
 8004bf8:	f7fb ff40 	bl	8000a7c <__aeabi_uldivmod>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	460c      	mov	r4, r1
 8004c00:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004c02:	e03d      	b.n	8004c80 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004c04:	f7fd fb02 	bl	800220c <HAL_RCC_GetSysClockFreq>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	f04f 0400 	mov.w	r4, #0
 8004c18:	0214      	lsls	r4, r2, #8
 8004c1a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004c1e:	020b      	lsls	r3, r1, #8
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6852      	ldr	r2, [r2, #4]
 8004c24:	0852      	lsrs	r2, r2, #1
 8004c26:	4611      	mov	r1, r2
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	eb13 0b01 	adds.w	fp, r3, r1
 8004c30:	eb44 0c02 	adc.w	ip, r4, r2
 8004c34:	4658      	mov	r0, fp
 8004c36:	4661      	mov	r1, ip
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f04f 0400 	mov.w	r4, #0
 8004c40:	461a      	mov	r2, r3
 8004c42:	4623      	mov	r3, r4
 8004c44:	f7fb ff1a 	bl	8000a7c <__aeabi_uldivmod>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	460c      	mov	r4, r1
 8004c4c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004c4e:	e017      	b.n	8004c80 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	085b      	lsrs	r3, r3, #1
 8004c56:	f04f 0400 	mov.w	r4, #0
 8004c5a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004c5e:	f144 0100 	adc.w	r1, r4, #0
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f04f 0400 	mov.w	r4, #0
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	4623      	mov	r3, r4
 8004c6e:	f7fb ff05 	bl	8000a7c <__aeabi_uldivmod>
 8004c72:	4603      	mov	r3, r0
 8004c74:	460c      	mov	r4, r1
 8004c76:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004c78:	e002      	b.n	8004c80 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	74fb      	strb	r3, [r7, #19]
            break;
 8004c7e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c86:	d308      	bcc.n	8004c9a <UART_SetConfig+0x486>
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c8e:	d204      	bcs.n	8004c9a <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	60da      	str	r2, [r3, #12]
 8004c98:	e0f5      	b.n	8004e86 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	74fb      	strb	r3, [r7, #19]
 8004c9e:	e0f2      	b.n	8004e86 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca8:	d17f      	bne.n	8004daa <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8004caa:	7efb      	ldrb	r3, [r7, #27]
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d85c      	bhi.n	8004d6a <UART_SetConfig+0x556>
 8004cb0:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <UART_SetConfig+0x4a4>)
 8004cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb6:	bf00      	nop
 8004cb8:	08004cdd 	.word	0x08004cdd
 8004cbc:	08004cfb 	.word	0x08004cfb
 8004cc0:	08004d19 	.word	0x08004d19
 8004cc4:	08004d6b 	.word	0x08004d6b
 8004cc8:	08004d35 	.word	0x08004d35
 8004ccc:	08004d6b 	.word	0x08004d6b
 8004cd0:	08004d6b 	.word	0x08004d6b
 8004cd4:	08004d6b 	.word	0x08004d6b
 8004cd8:	08004d53 	.word	0x08004d53
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004cdc:	f7fd fb2c 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	005a      	lsls	r2, r3, #1
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	085b      	lsrs	r3, r3, #1
 8004cea:	441a      	add	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004cf8:	e03a      	b.n	8004d70 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004cfa:	f7fd fb33 	bl	8002364 <HAL_RCC_GetPCLK2Freq>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	005a      	lsls	r2, r3, #1
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	085b      	lsrs	r3, r3, #1
 8004d08:	441a      	add	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d16:	e02b      	b.n	8004d70 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	085b      	lsrs	r3, r3, #1
 8004d1e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004d22:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6852      	ldr	r2, [r2, #4]
 8004d2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d32:	e01d      	b.n	8004d70 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004d34:	f7fd fa6a 	bl	800220c <HAL_RCC_GetSysClockFreq>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	005a      	lsls	r2, r3, #1
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	085b      	lsrs	r3, r3, #1
 8004d42:	441a      	add	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d50:	e00e      	b.n	8004d70 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	085b      	lsrs	r3, r3, #1
 8004d58:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d68:	e002      	b.n	8004d70 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	74fb      	strb	r3, [r7, #19]
        break;
 8004d6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	2b0f      	cmp	r3, #15
 8004d74:	d916      	bls.n	8004da4 <UART_SetConfig+0x590>
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d7c:	d212      	bcs.n	8004da4 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	f023 030f 	bic.w	r3, r3, #15
 8004d86:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	085b      	lsrs	r3, r3, #1
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	897b      	ldrh	r3, [r7, #10]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	897a      	ldrh	r2, [r7, #10]
 8004da0:	60da      	str	r2, [r3, #12]
 8004da2:	e070      	b.n	8004e86 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	74fb      	strb	r3, [r7, #19]
 8004da8:	e06d      	b.n	8004e86 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8004daa:	7efb      	ldrb	r3, [r7, #27]
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d859      	bhi.n	8004e64 <UART_SetConfig+0x650>
 8004db0:	a201      	add	r2, pc, #4	; (adr r2, 8004db8 <UART_SetConfig+0x5a4>)
 8004db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db6:	bf00      	nop
 8004db8:	08004ddd 	.word	0x08004ddd
 8004dbc:	08004df9 	.word	0x08004df9
 8004dc0:	08004e15 	.word	0x08004e15
 8004dc4:	08004e65 	.word	0x08004e65
 8004dc8:	08004e31 	.word	0x08004e31
 8004dcc:	08004e65 	.word	0x08004e65
 8004dd0:	08004e65 	.word	0x08004e65
 8004dd4:	08004e65 	.word	0x08004e65
 8004dd8:	08004e4d 	.word	0x08004e4d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004ddc:	f7fd faac 	bl	8002338 <HAL_RCC_GetPCLK1Freq>
 8004de0:	4602      	mov	r2, r0
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	085b      	lsrs	r3, r3, #1
 8004de8:	441a      	add	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004df6:	e038      	b.n	8004e6a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004df8:	f7fd fab4 	bl	8002364 <HAL_RCC_GetPCLK2Freq>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	085b      	lsrs	r3, r3, #1
 8004e04:	441a      	add	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e12:	e02a      	b.n	8004e6a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	085b      	lsrs	r3, r3, #1
 8004e1a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004e1e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6852      	ldr	r2, [r2, #4]
 8004e26:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e2e:	e01c      	b.n	8004e6a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004e30:	f7fd f9ec 	bl	800220c <HAL_RCC_GetSysClockFreq>
 8004e34:	4602      	mov	r2, r0
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	085b      	lsrs	r3, r3, #1
 8004e3c:	441a      	add	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e4a:	e00e      	b.n	8004e6a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	085b      	lsrs	r3, r3, #1
 8004e52:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e62:	e002      	b.n	8004e6a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	74fb      	strb	r3, [r7, #19]
        break;
 8004e68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2b0f      	cmp	r3, #15
 8004e6e:	d908      	bls.n	8004e82 <UART_SetConfig+0x66e>
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e76:	d204      	bcs.n	8004e82 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	60da      	str	r2, [r3, #12]
 8004e80:	e001      	b.n	8004e86 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004e92:	7cfb      	ldrb	r3, [r7, #19]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3720      	adds	r7, #32
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004e9e:	bf00      	nop
 8004ea0:	f4240000 	.word	0xf4240000

08004ea4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00a      	beq.n	8004ece <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00a      	beq.n	8004f12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00a      	beq.n	8004f34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00a      	beq.n	8004f56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00a      	beq.n	8004f78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d01a      	beq.n	8004fba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fa2:	d10a      	bne.n	8004fba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	605a      	str	r2, [r3, #4]
  }
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004ff6:	f7fb ff25 	bl	8000e44 <HAL_GetTick>
 8004ffa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b08      	cmp	r3, #8
 8005008:	d10e      	bne.n	8005028 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800500a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f82a 	bl	8005072 <UART_WaitOnFlagUntilTimeout>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d001      	beq.n	8005028 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e020      	b.n	800506a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0304 	and.w	r3, r3, #4
 8005032:	2b04      	cmp	r3, #4
 8005034:	d10e      	bne.n	8005054 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005036:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f814 	bl	8005072 <UART_WaitOnFlagUntilTimeout>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d001      	beq.n	8005054 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e00a      	b.n	800506a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2220      	movs	r2, #32
 8005058:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2220      	movs	r2, #32
 800505e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b084      	sub	sp, #16
 8005076:	af00      	add	r7, sp, #0
 8005078:	60f8      	str	r0, [r7, #12]
 800507a:	60b9      	str	r1, [r7, #8]
 800507c:	603b      	str	r3, [r7, #0]
 800507e:	4613      	mov	r3, r2
 8005080:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005082:	e02a      	b.n	80050da <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508a:	d026      	beq.n	80050da <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800508c:	f7fb feda 	bl	8000e44 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	429a      	cmp	r2, r3
 800509a:	d302      	bcc.n	80050a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d11b      	bne.n	80050da <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050b0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0201 	bic.w	r2, r2, #1
 80050c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2220      	movs	r2, #32
 80050c6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2220      	movs	r2, #32
 80050cc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e00f      	b.n	80050fa <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69da      	ldr	r2, [r3, #28]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4013      	ands	r3, r2
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	bf0c      	ite	eq
 80050ea:	2301      	moveq	r3, #1
 80050ec:	2300      	movne	r3, #0
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	461a      	mov	r2, r3
 80050f2:	79fb      	ldrb	r3, [r7, #7]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d0c5      	beq.n	8005084 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005102:	b480      	push	{r7}
 8005104:	b083      	sub	sp, #12
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005118:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0201 	bic.w	r2, r2, #1
 8005128:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2220      	movs	r2, #32
 800512e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f7ff fb4d 	bl	8004800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005166:	bf00      	nop
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800516e:	b480      	push	{r7}
 8005170:	b083      	sub	sp, #12
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800517a:	2b21      	cmp	r3, #33	; 0x21
 800517c:	d12b      	bne.n	80051d6 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005184:	b29b      	uxth	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d110      	bne.n	80051ac <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005198:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051a8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80051aa:	e014      	b.n	80051d6 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b0:	781a      	ldrb	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	b292      	uxth	r2, r2
 80051b8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b085      	sub	sp, #20
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ee:	2b21      	cmp	r3, #33	; 0x21
 80051f0:	d12f      	bne.n	8005252 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d110      	bne.n	8005220 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800520c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800521c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800521e:	e018      	b.n	8005252 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005224:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	881a      	ldrh	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005232:	b292      	uxth	r2, r2
 8005234:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800523a:	1c9a      	adds	r2, r3, #2
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005246:	b29b      	uxth	r3, r3
 8005248:	3b01      	subs	r3, #1
 800524a:	b29a      	uxth	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005252:	bf00      	nop
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b082      	sub	sp, #8
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005274:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2220      	movs	r2, #32
 800527a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7ff fab2 	bl	80047ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005288:	bf00      	nop
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800529e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052a4:	2b22      	cmp	r3, #34	; 0x22
 80052a6:	d13a      	bne.n	800531e <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80052ae:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80052b0:	89bb      	ldrh	r3, [r7, #12]
 80052b2:	b2d9      	uxtb	r1, r3
 80052b4:	89fb      	ldrh	r3, [r7, #14]
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052bc:	400a      	ands	r2, r1
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d123      	bne.n	8005332 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052f8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0201 	bic.w	r2, r2, #1
 8005308:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f001 fab6 	bl	8006888 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800531c:	e009      	b.n	8005332 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	8b1b      	ldrh	r3, [r3, #24]
 8005324:	b29a      	uxth	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0208 	orr.w	r2, r2, #8
 800532e:	b292      	uxth	r2, r2
 8005330:	831a      	strh	r2, [r3, #24]
}
 8005332:	bf00      	nop
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b084      	sub	sp, #16
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005348:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800534e:	2b22      	cmp	r3, #34	; 0x22
 8005350:	d13a      	bne.n	80053c8 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005358:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005360:	89ba      	ldrh	r2, [r7, #12]
 8005362:	89fb      	ldrh	r3, [r7, #14]
 8005364:	4013      	ands	r3, r2
 8005366:	b29a      	uxth	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005370:	1c9a      	adds	r2, r3, #2
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800537c:	b29b      	uxth	r3, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	b29a      	uxth	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d123      	bne.n	80053dc <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80053a2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689a      	ldr	r2, [r3, #8]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 0201 	bic.w	r2, r2, #1
 80053b2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2220      	movs	r2, #32
 80053b8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f001 fa61 	bl	8006888 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053c6:	e009      	b.n	80053dc <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	8b1b      	ldrh	r3, [r3, #24]
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f042 0208 	orr.w	r2, r2, #8
 80053d8:	b292      	uxth	r2, r2
 80053da:	831a      	strh	r2, [r3, #24]
}
 80053dc:	bf00      	nop
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <Source_Command>:
 */

#include <Commands_Fun.h>

uint16_t Source_Command(const char tableWithMessagePieces[MAX_NUMBER_OF_PIECES][MAX_LENGTH_OF_A_PIECE], const uint8_t *numberOfPieces, const uint16_t *CommandNumbers, char *SCPI_buffer)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
 8005404:	603b      	str	r3, [r7, #0]
	ERROR_CODE errorCode = 0x00;
 8005406:	2300      	movs	r3, #0
 8005408:	75fb      	strb	r3, [r7, #23]

	switch (CommandNumbers[1])
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	3302      	adds	r3, #2
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	2b53      	cmp	r3, #83	; 0x53
 8005412:	d108      	bne.n	8005426 <Source_Command+0x2e>
	{
		case 0x53:		//FM
		{
			errorCode = Source_FM_Command(tableWithMessagePieces, numberOfPieces, CommandNumbers, SCPI_buffer);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	68b9      	ldr	r1, [r7, #8]
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f000 f80c 	bl	8005438 <Source_FM_Command>
 8005420:	4603      	mov	r3, r0
 8005422:	75fb      	strb	r3, [r7, #23]
			break;
 8005424:	e002      	b.n	800542c <Source_Command+0x34>
		}
		default:
		{
			errorCode = COMMAND_NOT_RECOGNIZED;
 8005426:	2325      	movs	r3, #37	; 0x25
 8005428:	75fb      	strb	r3, [r7, #23]
			break;
 800542a:	bf00      	nop
		}
	}

	return errorCode;
 800542c:	7dfb      	ldrb	r3, [r7, #23]
 800542e:	b29b      	uxth	r3, r3
}
 8005430:	4618      	mov	r0, r3
 8005432:	3718      	adds	r7, #24
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <Source_FM_Command>:

uint16_t Source_FM_Command(const char tableWithMessagePieces[MAX_NUMBER_OF_PIECES][MAX_LENGTH_OF_A_PIECE], const uint8_t *numberOfPieces, const uint16_t *CommandNumbers, char *SCPI_buffer)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	603b      	str	r3, [r7, #0]
	ERROR_CODE errorCode = 0x00;
 8005446:	2300      	movs	r3, #0
 8005448:	75fb      	strb	r3, [r7, #23]

	switch (CommandNumbers[2])
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	3304      	adds	r3, #4
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	2b7d      	cmp	r3, #125	; 0x7d
 8005452:	d108      	bne.n	8005466 <Source_FM_Command+0x2e>
	{
		case 0x7D:		//INT, INTernal
		{
			errorCode = Source_FM_INT_Command(tableWithMessagePieces, numberOfPieces, CommandNumbers, SCPI_buffer);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	68b9      	ldr	r1, [r7, #8]
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 f80c 	bl	8005478 <Source_FM_INT_Command>
 8005460:	4603      	mov	r3, r0
 8005462:	75fb      	strb	r3, [r7, #23]
			break;
 8005464:	e002      	b.n	800546c <Source_FM_Command+0x34>
		}
		default:
		{
			errorCode = COMMAND_NOT_RECOGNIZED;
 8005466:	2325      	movs	r3, #37	; 0x25
 8005468:	75fb      	strb	r3, [r7, #23]
			break;
 800546a:	bf00      	nop
		}
	}

	return errorCode;
 800546c:	7dfb      	ldrb	r3, [r7, #23]
 800546e:	b29b      	uxth	r3, r3
}
 8005470:	4618      	mov	r0, r3
 8005472:	3718      	adds	r7, #24
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <Source_FM_INT_Command>:

uint16_t Source_FM_INT_Command(const char tableWithMessagePieces[MAX_NUMBER_OF_PIECES][MAX_LENGTH_OF_A_PIECE], const uint8_t *numberOfPieces, const uint16_t *CommandNumbers, char *SCPI_buffer)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	603b      	str	r3, [r7, #0]
	ERROR_CODE errorCode = 0x00;
 8005486:	2300      	movs	r3, #0
 8005488:	75fb      	strb	r3, [r7, #23]

	switch (CommandNumbers[3])
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3306      	adds	r3, #6
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	2ba0      	cmp	r3, #160	; 0xa0
 8005492:	d108      	bne.n	80054a6 <Source_FM_INT_Command+0x2e>
	{
		case 0xA0:		//WAVE
		{
			errorCode = Source_FM_INT_WAVE_Command(tableWithMessagePieces, numberOfPieces, CommandNumbers, SCPI_buffer);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 f80c 	bl	80054b8 <Source_FM_INT_WAVE_Command>
 80054a0:	4603      	mov	r3, r0
 80054a2:	75fb      	strb	r3, [r7, #23]
			break;
 80054a4:	e002      	b.n	80054ac <Source_FM_INT_Command+0x34>
		}
		default:
		{
			errorCode = COMMAND_NOT_RECOGNIZED;
 80054a6:	2325      	movs	r3, #37	; 0x25
 80054a8:	75fb      	strb	r3, [r7, #23]
			break;
 80054aa:	bf00      	nop
		}
	}

	return errorCode;
 80054ac:	7dfb      	ldrb	r3, [r7, #23]
 80054ae:	b29b      	uxth	r3, r3
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3718      	adds	r7, #24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <Source_FM_INT_WAVE_Command>:

uint16_t Source_FM_INT_WAVE_Command(const char tableWithMessagePieces[MAX_NUMBER_OF_PIECES][MAX_LENGTH_OF_A_PIECE], const uint8_t *numberOfPieces, const uint16_t *CommandNumbers, char *SCPI_buffer)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
	ERROR_CODE errorCode = 0x00;
 80054c6:	2300      	movs	r3, #0
 80054c8:	75fb      	strb	r3, [r7, #23]

	switch (CommandNumbers[4])
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	3308      	adds	r3, #8
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	2b99      	cmp	r3, #153	; 0x99
 80054d2:	d00a      	beq.n	80054ea <Source_FM_INT_WAVE_Command+0x32>
 80054d4:	2b9a      	cmp	r3, #154	; 0x9a
 80054d6:	d00f      	beq.n	80054f8 <Source_FM_INT_WAVE_Command+0x40>
 80054d8:	2b98      	cmp	r3, #152	; 0x98
 80054da:	d114      	bne.n	8005506 <Source_FM_INT_WAVE_Command+0x4e>
	{
		case 0x98:		//SINE
		{
			setSignalType = SIN;
 80054dc:	4b0f      	ldr	r3, [pc, #60]	; (800551c <Source_FM_INT_WAVE_Command+0x64>)
 80054de:	2200      	movs	r2, #0
 80054e0:	701a      	strb	r2, [r3, #0]
			setSignalFlag = 1;
 80054e2:	4b0f      	ldr	r3, [pc, #60]	; (8005520 <Source_FM_INT_WAVE_Command+0x68>)
 80054e4:	2201      	movs	r2, #1
 80054e6:	701a      	strb	r2, [r3, #0]
			break;
 80054e8:	e010      	b.n	800550c <Source_FM_INT_WAVE_Command+0x54>
		}
		case 0x99:		//TRIANGLE
		{
			setSignalType = TRIANGLE;
 80054ea:	4b0c      	ldr	r3, [pc, #48]	; (800551c <Source_FM_INT_WAVE_Command+0x64>)
 80054ec:	2201      	movs	r2, #1
 80054ee:	701a      	strb	r2, [r3, #0]
			setSignalFlag = 1;
 80054f0:	4b0b      	ldr	r3, [pc, #44]	; (8005520 <Source_FM_INT_WAVE_Command+0x68>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	701a      	strb	r2, [r3, #0]
			break;
 80054f6:	e009      	b.n	800550c <Source_FM_INT_WAVE_Command+0x54>
		}
		case 0x9A:		//SQUARE
		{
			setSignalType = SQUARE;
 80054f8:	4b08      	ldr	r3, [pc, #32]	; (800551c <Source_FM_INT_WAVE_Command+0x64>)
 80054fa:	2202      	movs	r2, #2
 80054fc:	701a      	strb	r2, [r3, #0]
			setSignalFlag = 1;
 80054fe:	4b08      	ldr	r3, [pc, #32]	; (8005520 <Source_FM_INT_WAVE_Command+0x68>)
 8005500:	2201      	movs	r2, #1
 8005502:	701a      	strb	r2, [r3, #0]
			break;
 8005504:	e002      	b.n	800550c <Source_FM_INT_WAVE_Command+0x54>
		}
		default:
		{
			errorCode = COMMAND_NOT_RECOGNIZED;
 8005506:	2325      	movs	r3, #37	; 0x25
 8005508:	75fb      	strb	r3, [r7, #23]
			break;
 800550a:	bf00      	nop
		}
	}

	return errorCode;
 800550c:	7dfb      	ldrb	r3, [r7, #23]
 800550e:	b29b      	uxth	r3, r3
}
 8005510:	4618      	mov	r0, r3
 8005512:	371c      	adds	r7, #28
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	200018ca 	.word	0x200018ca
 8005520:	2000142a 	.word	0x2000142a

08005524 <Set_Command>:
//
//	return errorCode;
}
//
uint16_t Set_Command(const char tableWithMessagePieces[MAX_NUMBER_OF_PIECES][MAX_LENGTH_OF_A_PIECE], const uint8_t *numberOfPieces, const uint16_t *CommandNumbers, char *SCPI_buffer)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]
//			break;
//		}
//	}
//
//	return errorCode;
}
 8005532:	bf00      	nop
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <Return_Error_Description>:

#include "Errors.h"


char* Return_Error_Description(const uint16_t errorCode)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	4603      	mov	r3, r0
 8005548:	80fb      	strh	r3, [r7, #6]
	char *description;

	switch(errorCode)
 800554a:	88fb      	ldrh	r3, [r7, #6]
 800554c:	2b25      	cmp	r3, #37	; 0x25
 800554e:	d86a      	bhi.n	8005626 <Return_Error_Description+0xe6>
 8005550:	a201      	add	r2, pc, #4	; (adr r2, 8005558 <Return_Error_Description+0x18>)
 8005552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005556:	bf00      	nop
 8005558:	080055f1 	.word	0x080055f1
 800555c:	080055f7 	.word	0x080055f7
 8005560:	080055fd 	.word	0x080055fd
 8005564:	08005627 	.word	0x08005627
 8005568:	08005627 	.word	0x08005627
 800556c:	08005627 	.word	0x08005627
 8005570:	08005627 	.word	0x08005627
 8005574:	08005627 	.word	0x08005627
 8005578:	08005627 	.word	0x08005627
 800557c:	08005627 	.word	0x08005627
 8005580:	08005627 	.word	0x08005627
 8005584:	08005627 	.word	0x08005627
 8005588:	08005627 	.word	0x08005627
 800558c:	08005627 	.word	0x08005627
 8005590:	08005627 	.word	0x08005627
 8005594:	08005627 	.word	0x08005627
 8005598:	08005627 	.word	0x08005627
 800559c:	08005627 	.word	0x08005627
 80055a0:	08005627 	.word	0x08005627
 80055a4:	08005627 	.word	0x08005627
 80055a8:	08005627 	.word	0x08005627
 80055ac:	08005627 	.word	0x08005627
 80055b0:	08005627 	.word	0x08005627
 80055b4:	08005627 	.word	0x08005627
 80055b8:	08005627 	.word	0x08005627
 80055bc:	08005627 	.word	0x08005627
 80055c0:	08005627 	.word	0x08005627
 80055c4:	08005627 	.word	0x08005627
 80055c8:	08005627 	.word	0x08005627
 80055cc:	08005627 	.word	0x08005627
 80055d0:	08005627 	.word	0x08005627
 80055d4:	08005627 	.word	0x08005627
 80055d8:	08005603 	.word	0x08005603
 80055dc:	08005609 	.word	0x08005609
 80055e0:	0800560f 	.word	0x0800560f
 80055e4:	08005615 	.word	0x08005615
 80055e8:	0800561b 	.word	0x0800561b
 80055ec:	08005621 	.word	0x08005621
	{
		case 0x00:
		{
			description = "No error was detected.";
 80055f0:	4b12      	ldr	r3, [pc, #72]	; (800563c <Return_Error_Description+0xfc>)
 80055f2:	60fb      	str	r3, [r7, #12]
			break;
 80055f4:	e01a      	b.n	800562c <Return_Error_Description+0xec>
		}
		case 0x01:
		{
			description = "Received message is too long - shorten the message or increase the receive buffer size!";
 80055f6:	4b12      	ldr	r3, [pc, #72]	; (8005640 <Return_Error_Description+0x100>)
 80055f8:	60fb      	str	r3, [r7, #12]
			break;
 80055fa:	e017      	b.n	800562c <Return_Error_Description+0xec>
		}
		case 0x02:
		{
			description = "Message prepared to send is too long - increase the send buffer size!";
 80055fc:	4b11      	ldr	r3, [pc, #68]	; (8005644 <Return_Error_Description+0x104>)
 80055fe:	60fb      	str	r3, [r7, #12]
			break;
 8005600:	e014      	b.n	800562c <Return_Error_Description+0xec>
		}
		case 0x20:
		{
			description = "Received message is incorrect - check spelling!";
 8005602:	4b11      	ldr	r3, [pc, #68]	; (8005648 <Return_Error_Description+0x108>)
 8005604:	60fb      	str	r3, [r7, #12]
			break;
 8005606:	e011      	b.n	800562c <Return_Error_Description+0xec>
		}
		case 0x21:
		{
			description = "Received message has length 0! Check if message is sent correctly.";
 8005608:	4b10      	ldr	r3, [pc, #64]	; (800564c <Return_Error_Description+0x10c>)
 800560a:	60fb      	str	r3, [r7, #12]
			break;
 800560c:	e00e      	b.n	800562c <Return_Error_Description+0xec>
		}
		case 0x22:
		{
			description = "Received message has too many separators! Try shortening message or increase maximum allowed number of separators.";
 800560e:	4b10      	ldr	r3, [pc, #64]	; (8005650 <Return_Error_Description+0x110>)
 8005610:	60fb      	str	r3, [r7, #12]
			break;
 8005612:	e00b      	b.n	800562c <Return_Error_Description+0xec>
		}
		case 0x23:
		{
			description = "Wrong end of the message! There is a separator at the end - try deleting it.";
 8005614:	4b0f      	ldr	r3, [pc, #60]	; (8005654 <Return_Error_Description+0x114>)
 8005616:	60fb      	str	r3, [r7, #12]
			break;
 8005618:	e008      	b.n	800562c <Return_Error_Description+0xec>
		}
		case 0x24:
		{
			description = "A command in received message is too long! Try shortening (use abbreviation?) or increase maximum allowed command length.";
 800561a:	4b0f      	ldr	r3, [pc, #60]	; (8005658 <Return_Error_Description+0x118>)
 800561c:	60fb      	str	r3, [r7, #12]
			break;
 800561e:	e005      	b.n	800562c <Return_Error_Description+0xec>
		}
		case 0x25:
		{
			description = "Received message has an unrecognized command inside! Check spelling.";
 8005620:	4b0e      	ldr	r3, [pc, #56]	; (800565c <Return_Error_Description+0x11c>)
 8005622:	60fb      	str	r3, [r7, #12]
			break;
 8005624:	e002      	b.n	800562c <Return_Error_Description+0xec>
		}
		default:
		{
			description = "!!Unknown error!!";
 8005626:	4b0e      	ldr	r3, [pc, #56]	; (8005660 <Return_Error_Description+0x120>)
 8005628:	60fb      	str	r3, [r7, #12]
			break;
 800562a:	bf00      	nop
		}
	}
}
 800562c:	bf00      	nop
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	08007968 	.word	0x08007968
 8005640:	08007980 	.word	0x08007980
 8005644:	080079d8 	.word	0x080079d8
 8005648:	08007a20 	.word	0x08007a20
 800564c:	08007a50 	.word	0x08007a50
 8005650:	08007a94 	.word	0x08007a94
 8005654:	08007b08 	.word	0x08007b08
 8005658:	08007b58 	.word	0x08007b58
 800565c:	08007bd4 	.word	0x08007bd4
 8005660:	08007c1c 	.word	0x08007c1c

08005664 <Get_Message_Length>:
const uint16_t Ports_LENGTH = sizeof(Ports) / sizeof(Ports[0]);



static uint16_t Get_Message_Length(const char *MESSAGE)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
	ERROR_CODE errorCode = 0x00;
 800566c:	2300      	movs	r3, #0
 800566e:	73fb      	strb	r3, [r7, #15]
	messageLength = strlen(MESSAGE);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f7fa fdb7 	bl	80001e4 <strlen>
 8005676:	4603      	mov	r3, r0
 8005678:	b29a      	uxth	r2, r3
 800567a:	4b07      	ldr	r3, [pc, #28]	; (8005698 <Get_Message_Length+0x34>)
 800567c:	801a      	strh	r2, [r3, #0]

	if(0 == messageLength)
 800567e:	4b06      	ldr	r3, [pc, #24]	; (8005698 <Get_Message_Length+0x34>)
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <Get_Message_Length+0x26>
		errorCode = MESSAGE_HAS_LENGTH_ZERO;
 8005686:	2321      	movs	r3, #33	; 0x21
 8005688:	73fb      	strb	r3, [r7, #15]

	return errorCode;
 800568a:	7bfb      	ldrb	r3, [r7, #15]
 800568c:	b29b      	uxth	r3, r3
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20001428 	.word	0x20001428

0800569c <Message_To_Upper_Letters>:


static uint16_t Message_To_Upper_Letters(char* message)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
	ERROR_CODE errorCode = 0x00;
 80056a4:	2300      	movs	r3, #0
 80056a6:	737b      	strb	r3, [r7, #13]
	uint16_t i = 0;
 80056a8:	2300      	movs	r3, #0
 80056aa:	81fb      	strh	r3, [r7, #14]

	for (i = 0; i < messageLength; ++i)
 80056ac:	2300      	movs	r3, #0
 80056ae:	81fb      	strh	r3, [r7, #14]
 80056b0:	e018      	b.n	80056e4 <Message_To_Upper_Letters+0x48>
	{
		if (message[i] >= 97 && message[i] <= 122)
 80056b2:	89fb      	ldrh	r3, [r7, #14]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	4413      	add	r3, r2
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	2b60      	cmp	r3, #96	; 0x60
 80056bc:	d90f      	bls.n	80056de <Message_To_Upper_Letters+0x42>
 80056be:	89fb      	ldrh	r3, [r7, #14]
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	4413      	add	r3, r2
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	2b7a      	cmp	r3, #122	; 0x7a
 80056c8:	d809      	bhi.n	80056de <Message_To_Upper_Letters+0x42>
		{
			message[i] = message[i] - 32;
 80056ca:	89fb      	ldrh	r3, [r7, #14]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	4413      	add	r3, r2
 80056d0:	781a      	ldrb	r2, [r3, #0]
 80056d2:	89fb      	ldrh	r3, [r7, #14]
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	440b      	add	r3, r1
 80056d8:	3a20      	subs	r2, #32
 80056da:	b2d2      	uxtb	r2, r2
 80056dc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < messageLength; ++i)
 80056de:	89fb      	ldrh	r3, [r7, #14]
 80056e0:	3301      	adds	r3, #1
 80056e2:	81fb      	strh	r3, [r7, #14]
 80056e4:	4b06      	ldr	r3, [pc, #24]	; (8005700 <Message_To_Upper_Letters+0x64>)
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	89fa      	ldrh	r2, [r7, #14]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d3e1      	bcc.n	80056b2 <Message_To_Upper_Letters+0x16>
		}
	}

	return errorCode;
 80056ee:	7b7b      	ldrb	r3, [r7, #13]
 80056f0:	b29b      	uxth	r3, r3
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	20001428 	.word	0x20001428

08005704 <Find_Separators>:


static uint16_t Find_Separators(const char *MESSAGE, uint16_t *separatorIndexesTable, uint8_t *howManySeparatorsWereFound)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
	ERROR_CODE errorCode = 0x00;
 8005710:	2300      	movs	r3, #0
 8005712:	75fb      	strb	r3, [r7, #23]
	uint16_t i = 0;
 8005714:	2300      	movs	r3, #0
 8005716:	82bb      	strh	r3, [r7, #20]
	uint16_t j = 0;
 8005718:	2300      	movs	r3, #0
 800571a:	827b      	strh	r3, [r7, #18]

	for (i = 0; i < messageLength; ++i)
 800571c:	2300      	movs	r3, #0
 800571e:	82bb      	strh	r3, [r7, #20]
 8005720:	e041      	b.n	80057a6 <Find_Separators+0xa2>
	{
		if (':' == MESSAGE[i] || ' ' == MESSAGE[i] || ',' == MESSAGE[i])
 8005722:	8abb      	ldrh	r3, [r7, #20]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	4413      	add	r3, r2
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b3a      	cmp	r3, #58	; 0x3a
 800572c:	d00b      	beq.n	8005746 <Find_Separators+0x42>
 800572e:	8abb      	ldrh	r3, [r7, #20]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4413      	add	r3, r2
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	2b20      	cmp	r3, #32
 8005738:	d005      	beq.n	8005746 <Find_Separators+0x42>
 800573a:	8abb      	ldrh	r3, [r7, #20]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4413      	add	r3, r2
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	2b2c      	cmp	r3, #44	; 0x2c
 8005744:	d12c      	bne.n	80057a0 <Find_Separators+0x9c>
		{
			separatorIndexesTable[j] = i;
 8005746:	8a7b      	ldrh	r3, [r7, #18]
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	4413      	add	r3, r2
 800574e:	8aba      	ldrh	r2, [r7, #20]
 8005750:	801a      	strh	r2, [r3, #0]
			++*howManySeparatorsWereFound;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	3301      	adds	r3, #1
 8005758:	b2da      	uxtb	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	701a      	strb	r2, [r3, #0]

			if (*howManySeparatorsWereFound > MAX_NUMBER_OF_SEPARATORS)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b0a      	cmp	r3, #10
 8005764:	d902      	bls.n	800576c <Find_Separators+0x68>
			{
				errorCode = TOO_MANY_SEPARATORS;
 8005766:	2322      	movs	r3, #34	; 0x22
 8005768:	75fb      	strb	r3, [r7, #23]
				break;
 800576a:	e021      	b.n	80057b0 <Find_Separators+0xac>
			}

			if (0 != j)	//if it is not the first colon found
 800576c:	8a7b      	ldrh	r3, [r7, #18]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d013      	beq.n	800579a <Find_Separators+0x96>
			{
				if (separatorIndexesTable[j] - separatorIndexesTable[j-1] <= 1)	//check if there is something between colons
 8005772:	8a7b      	ldrh	r3, [r7, #18]
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	4413      	add	r3, r2
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	4619      	mov	r1, r3
 800577e:	8a7b      	ldrh	r3, [r7, #18]
 8005780:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005784:	3b01      	subs	r3, #1
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	4413      	add	r3, r2
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	1acb      	subs	r3, r1, r3
 8005790:	2b01      	cmp	r3, #1
 8005792:	dc02      	bgt.n	800579a <Find_Separators+0x96>
				{
					errorCode = MESSAGE_NOT_CORRECT;
 8005794:	2320      	movs	r3, #32
 8005796:	75fb      	strb	r3, [r7, #23]
					break;
 8005798:	e00a      	b.n	80057b0 <Find_Separators+0xac>
				}
			}
			++j;	// move to next position in separatorIndexesTable to remember next colons
 800579a:	8a7b      	ldrh	r3, [r7, #18]
 800579c:	3301      	adds	r3, #1
 800579e:	827b      	strh	r3, [r7, #18]
	for (i = 0; i < messageLength; ++i)
 80057a0:	8abb      	ldrh	r3, [r7, #20]
 80057a2:	3301      	adds	r3, #1
 80057a4:	82bb      	strh	r3, [r7, #20]
 80057a6:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <Find_Separators+0xbc>)
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	8aba      	ldrh	r2, [r7, #20]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d3b8      	bcc.n	8005722 <Find_Separators+0x1e>
		}
	}

	return errorCode;
 80057b0:	7dfb      	ldrb	r3, [r7, #23]
 80057b2:	b29b      	uxth	r3, r3
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	371c      	adds	r7, #28
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr
 80057c0:	20001428 	.word	0x20001428

080057c4 <Cut_Message_Into_Pieces>:


static uint16_t Cut_Message_Into_Pieces(const char *MESSAGE, char tableWithMessagePieces[MAX_NUMBER_OF_PIECES][MAX_LENGTH_OF_A_PIECE], uint8_t *numberOfPieces)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08c      	sub	sp, #48	; 0x30
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
	ERROR_CODE errorCode = 0x00;
 80057d0:	2300      	movs	r3, #0
 80057d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint16_t iteratorInMessage = 0;
 80057d6:	2300      	movs	r3, #0
 80057d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint16_t jteratorInseparatorIndexesTable = 0;
 80057da:	2300      	movs	r3, #0
 80057dc:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t lastPosition = 0;
 80057de:	2300      	movs	r3, #0
 80057e0:	853b      	strh	r3, [r7, #40]	; 0x28
	uint16_t pieceIterator = 0;
 80057e2:	2300      	movs	r3, #0
 80057e4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t howManySeparatorsWereFound = 0;
 80057e6:	2300      	movs	r3, #0
 80057e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint16_t separatorIndexesTable[MAX_NUMBER_OF_SEPARATORS] = {0};
 80057ec:	f107 0310 	add.w	r3, r7, #16
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	605a      	str	r2, [r3, #4]
 80057f6:	609a      	str	r2, [r3, #8]
 80057f8:	60da      	str	r2, [r3, #12]
 80057fa:	611a      	str	r2, [r3, #16]

	/* We look for separators between pieces of messages. The separators are: ":", " " and ",". */
	errorCode = Find_Separators(MESSAGE, separatorIndexesTable, &howManySeparatorsWereFound);
 80057fc:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8005800:	f107 0310 	add.w	r3, r7, #16
 8005804:	4619      	mov	r1, r3
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f7ff ff7c 	bl	8005704 <Find_Separators>
 800580c:	4603      	mov	r3, r0
 800580e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	*numberOfPieces = howManySeparatorsWereFound + 1;
 8005812:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005816:	3301      	adds	r3, #1
 8005818:	b2da      	uxtb	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	701a      	strb	r2, [r3, #0]

	if (0 != howManySeparatorsWereFound && 0 == errorCode)
 800581e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005822:	2b00      	cmp	r3, #0
 8005824:	d07a      	beq.n	800591c <Cut_Message_Into_Pieces+0x158>
 8005826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800582a:	2b00      	cmp	r3, #0
 800582c:	d176      	bne.n	800591c <Cut_Message_Into_Pieces+0x158>
	{
		for (jteratorInseparatorIndexesTable = 0; jteratorInseparatorIndexesTable < howManySeparatorsWereFound; ++jteratorInseparatorIndexesTable)
 800582e:	2300      	movs	r3, #0
 8005830:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005832:	e042      	b.n	80058ba <Cut_Message_Into_Pieces+0xf6>
		{
			if (errorCode != 0)
 8005834:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005838:	2b00      	cmp	r3, #0
 800583a:	d145      	bne.n	80058c8 <Cut_Message_Into_Pieces+0x104>
				break;

			for (iteratorInMessage = lastPosition; iteratorInMessage < separatorIndexesTable[jteratorInseparatorIndexesTable]; ++iteratorInMessage)
 800583c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800583e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005840:	e01a      	b.n	8005878 <Cut_Message_Into_Pieces+0xb4>
			{
				tableWithMessagePieces[jteratorInseparatorIndexesTable][pieceIterator] = MESSAGE[iteratorInMessage];
 8005842:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	18d1      	adds	r1, r2, r3
 8005848:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800584a:	4613      	mov	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	461a      	mov	r2, r3
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	441a      	add	r2, r3
 8005858:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800585a:	7809      	ldrb	r1, [r1, #0]
 800585c:	54d1      	strb	r1, [r2, r3]
				++pieceIterator;
 800585e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005860:	3301      	adds	r3, #1
 8005862:	84fb      	strh	r3, [r7, #38]	; 0x26

				if (pieceIterator >= MAX_LENGTH_OF_A_PIECE-1)
 8005864:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005866:	2b12      	cmp	r3, #18
 8005868:	d903      	bls.n	8005872 <Cut_Message_Into_Pieces+0xae>
				{
					errorCode = PIECE_TOO_LONG;
 800586a:	2324      	movs	r3, #36	; 0x24
 800586c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 8005870:	e00c      	b.n	800588c <Cut_Message_Into_Pieces+0xc8>
			for (iteratorInMessage = lastPosition; iteratorInMessage < separatorIndexesTable[jteratorInseparatorIndexesTable]; ++iteratorInMessage)
 8005872:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005874:	3301      	adds	r3, #1
 8005876:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005878:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800587a:	005b      	lsls	r3, r3, #1
 800587c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005880:	4413      	add	r3, r2
 8005882:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8005886:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005888:	429a      	cmp	r2, r3
 800588a:	d3da      	bcc.n	8005842 <Cut_Message_Into_Pieces+0x7e>
				}
			}

			lastPosition = separatorIndexesTable[jteratorInseparatorIndexesTable]+1;
 800588c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005894:	4413      	add	r3, r2
 8005896:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800589a:	3301      	adds	r3, #1
 800589c:	853b      	strh	r3, [r7, #40]	; 0x28
			pieceIterator = 0;
 800589e:	2300      	movs	r3, #0
 80058a0:	84fb      	strh	r3, [r7, #38]	; 0x26

			if (lastPosition >= messageLength)
 80058a2:	4b24      	ldr	r3, [pc, #144]	; (8005934 <Cut_Message_Into_Pieces+0x170>)
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d303      	bcc.n	80058b4 <Cut_Message_Into_Pieces+0xf0>
			{
				errorCode = SEPARATOR_AT_THE_END_OF_MESSAGE;
 80058ac:	2323      	movs	r3, #35	; 0x23
 80058ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80058b2:	e00a      	b.n	80058ca <Cut_Message_Into_Pieces+0x106>
		for (jteratorInseparatorIndexesTable = 0; jteratorInseparatorIndexesTable < howManySeparatorsWereFound; ++jteratorInseparatorIndexesTable)
 80058b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80058b6:	3301      	adds	r3, #1
 80058b8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80058ba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80058be:	b29b      	uxth	r3, r3
 80058c0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d3b6      	bcc.n	8005834 <Cut_Message_Into_Pieces+0x70>
 80058c6:	e000      	b.n	80058ca <Cut_Message_Into_Pieces+0x106>
				break;
 80058c8:	bf00      	nop
			}
		}

		if (0 == errorCode)
 80058ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d128      	bne.n	8005924 <Cut_Message_Into_Pieces+0x160>
		{
			for (iteratorInMessage = lastPosition; iteratorInMessage < messageLength; ++iteratorInMessage)
 80058d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80058d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80058d6:	e01b      	b.n	8005910 <Cut_Message_Into_Pieces+0x14c>
			{
				tableWithMessagePieces[jteratorInseparatorIndexesTable][pieceIterator] = MESSAGE[iteratorInMessage];
 80058d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	18d1      	adds	r1, r2, r3
 80058de:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80058e0:	4613      	mov	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	461a      	mov	r2, r3
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	441a      	add	r2, r3
 80058ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058f0:	7809      	ldrb	r1, [r1, #0]
 80058f2:	54d1      	strb	r1, [r2, r3]
				++pieceIterator;
 80058f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058f6:	3301      	adds	r3, #1
 80058f8:	84fb      	strh	r3, [r7, #38]	; 0x26

				if (pieceIterator >= MAX_LENGTH_OF_A_PIECE-1)
 80058fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058fc:	2b12      	cmp	r3, #18
 80058fe:	d904      	bls.n	800590a <Cut_Message_Into_Pieces+0x146>
				{
					errorCode = PIECE_TOO_LONG;
 8005900:	2324      	movs	r3, #36	; 0x24
 8005902:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 8005906:	bf00      	nop
		if (0 == errorCode)
 8005908:	e00c      	b.n	8005924 <Cut_Message_Into_Pieces+0x160>
			for (iteratorInMessage = lastPosition; iteratorInMessage < messageLength; ++iteratorInMessage)
 800590a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800590c:	3301      	adds	r3, #1
 800590e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005910:	4b08      	ldr	r3, [pc, #32]	; (8005934 <Cut_Message_Into_Pieces+0x170>)
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005916:	429a      	cmp	r2, r3
 8005918:	d3de      	bcc.n	80058d8 <Cut_Message_Into_Pieces+0x114>
		if (0 == errorCode)
 800591a:	e003      	b.n	8005924 <Cut_Message_Into_Pieces+0x160>
			}
		}
	}
	else
	{
		strcpy(tableWithMessagePieces[0], MESSAGE);
 800591c:	68f9      	ldr	r1, [r7, #12]
 800591e:	68b8      	ldr	r0, [r7, #8]
 8005920:	f001 fc24 	bl	800716c <strcpy>
	}

	return errorCode;
 8005924:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005928:	b29b      	uxth	r3, r3
}
 800592a:	4618      	mov	r0, r3
 800592c:	3730      	adds	r7, #48	; 0x30
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	20001428 	.word	0x20001428

08005938 <Recognize_Piece_Of_Message>:


static uint16_t Recognize_Piece_Of_Message(char *Piece, uint16_t *foundCommand)
{
 8005938:	b590      	push	{r4, r7, lr}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
	ERROR_CODE errorCode = 0x00;
 8005942:	2300      	movs	r3, #0
 8005944:	73fb      	strb	r3, [r7, #15]
	uint16_t i = 0;
 8005946:	2300      	movs	r3, #0
 8005948:	81bb      	strh	r3, [r7, #12]
	uint8_t FLAG_match = 0;
 800594a:	2300      	movs	r3, #0
 800594c:	72fb      	strb	r3, [r7, #11]
	uint8_t FLAG_isDigit = 0;
 800594e:	2300      	movs	r3, #0
 8005950:	72bb      	strb	r3, [r7, #10]

	if ('*' == Piece[0])
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	2b2a      	cmp	r3, #42	; 0x2a
 8005958:	d12b      	bne.n	80059b2 <Recognize_Piece_Of_Message+0x7a>
	{
		for (i = 0; i < MandatedCommands_LENGTH; ++i)
 800595a:	2300      	movs	r3, #0
 800595c:	81bb      	strh	r3, [r7, #12]
 800595e:	e023      	b.n	80059a8 <Recognize_Piece_Of_Message+0x70>
		{
			FLAG_match = (strcmp(Piece, MandatedCommands[i].name) ? 0 : 1);
 8005960:	89ba      	ldrh	r2, [r7, #12]
 8005962:	4613      	mov	r3, r2
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	1a9b      	subs	r3, r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4a9c      	ldr	r2, [pc, #624]	; (8005bdc <Recognize_Piece_Of_Message+0x2a4>)
 800596c:	4413      	add	r3, r2
 800596e:	4619      	mov	r1, r3
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7fa fc2d 	bl	80001d0 <strcmp>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	bf0c      	ite	eq
 800597c:	2301      	moveq	r3, #1
 800597e:	2300      	movne	r3, #0
 8005980:	b2db      	uxtb	r3, r3
 8005982:	72fb      	strb	r3, [r7, #11]

			if (1 == FLAG_match)
 8005984:	7afb      	ldrb	r3, [r7, #11]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d10b      	bne.n	80059a2 <Recognize_Piece_Of_Message+0x6a>
			{
				*foundCommand = MandatedCommands[i].commandNumber;
 800598a:	89ba      	ldrh	r2, [r7, #12]
 800598c:	4993      	ldr	r1, [pc, #588]	; (8005bdc <Recognize_Piece_Of_Message+0x2a4>)
 800598e:	4613      	mov	r3, r2
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	1a9b      	subs	r3, r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	440b      	add	r3, r1
 8005998:	331a      	adds	r3, #26
 800599a:	881a      	ldrh	r2, [r3, #0]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	801a      	strh	r2, [r3, #0]
				break;
 80059a0:	e137      	b.n	8005c12 <Recognize_Piece_Of_Message+0x2da>
		for (i = 0; i < MandatedCommands_LENGTH; ++i)
 80059a2:	89bb      	ldrh	r3, [r7, #12]
 80059a4:	3301      	adds	r3, #1
 80059a6:	81bb      	strh	r3, [r7, #12]
 80059a8:	2212      	movs	r2, #18
 80059aa:	89bb      	ldrh	r3, [r7, #12]
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d3d7      	bcc.n	8005960 <Recognize_Piece_Of_Message+0x28>
 80059b0:	e12f      	b.n	8005c12 <Recognize_Piece_Of_Message+0x2da>
			}
		}
	}
	else
	{
		if (0 == FLAG_match)
 80059b2:	7afb      	ldrb	r3, [r7, #11]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d12a      	bne.n	8005a0e <Recognize_Piece_Of_Message+0xd6>
		{
			for (i = 0; i < Commands_1_LENGTH; ++i)
 80059b8:	2300      	movs	r3, #0
 80059ba:	81bb      	strh	r3, [r7, #12]
 80059bc:	e023      	b.n	8005a06 <Recognize_Piece_Of_Message+0xce>
			{
				FLAG_match = (strcmp(Piece, Commands_1[i].name) ? 0 : 1);
 80059be:	89ba      	ldrh	r2, [r7, #12]
 80059c0:	4613      	mov	r3, r2
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	1a9b      	subs	r3, r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4a85      	ldr	r2, [pc, #532]	; (8005be0 <Recognize_Piece_Of_Message+0x2a8>)
 80059ca:	4413      	add	r3, r2
 80059cc:	4619      	mov	r1, r3
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7fa fbfe 	bl	80001d0 <strcmp>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	bf0c      	ite	eq
 80059da:	2301      	moveq	r3, #1
 80059dc:	2300      	movne	r3, #0
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	72fb      	strb	r3, [r7, #11]

				if (1 == FLAG_match)
 80059e2:	7afb      	ldrb	r3, [r7, #11]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d10b      	bne.n	8005a00 <Recognize_Piece_Of_Message+0xc8>
				{
					*foundCommand = Commands_1[i].commandNumber;
 80059e8:	89ba      	ldrh	r2, [r7, #12]
 80059ea:	497d      	ldr	r1, [pc, #500]	; (8005be0 <Recognize_Piece_Of_Message+0x2a8>)
 80059ec:	4613      	mov	r3, r2
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	1a9b      	subs	r3, r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	331a      	adds	r3, #26
 80059f8:	881a      	ldrh	r2, [r3, #0]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	801a      	strh	r2, [r3, #0]
					break;
 80059fe:	e006      	b.n	8005a0e <Recognize_Piece_Of_Message+0xd6>
			for (i = 0; i < Commands_1_LENGTH; ++i)
 8005a00:	89bb      	ldrh	r3, [r7, #12]
 8005a02:	3301      	adds	r3, #1
 8005a04:	81bb      	strh	r3, [r7, #12]
 8005a06:	2215      	movs	r2, #21
 8005a08:	89bb      	ldrh	r3, [r7, #12]
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d3d7      	bcc.n	80059be <Recognize_Piece_Of_Message+0x86>
				}
			}
		}

		if (0 == FLAG_match)
 8005a0e:	7afb      	ldrb	r3, [r7, #11]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d12a      	bne.n	8005a6a <Recognize_Piece_Of_Message+0x132>
		{
			for (i = 0; i < Commands_2_LENGTH; ++i)
 8005a14:	2300      	movs	r3, #0
 8005a16:	81bb      	strh	r3, [r7, #12]
 8005a18:	e023      	b.n	8005a62 <Recognize_Piece_Of_Message+0x12a>
			{
				FLAG_match = (strcmp(Piece, Commands_2[i].name) ? 0 : 1);
 8005a1a:	89ba      	ldrh	r2, [r7, #12]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	1a9b      	subs	r3, r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4a6f      	ldr	r2, [pc, #444]	; (8005be4 <Recognize_Piece_Of_Message+0x2ac>)
 8005a26:	4413      	add	r3, r2
 8005a28:	4619      	mov	r1, r3
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7fa fbd0 	bl	80001d0 <strcmp>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	bf0c      	ite	eq
 8005a36:	2301      	moveq	r3, #1
 8005a38:	2300      	movne	r3, #0
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	72fb      	strb	r3, [r7, #11]

				if (1 == FLAG_match)
 8005a3e:	7afb      	ldrb	r3, [r7, #11]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d10b      	bne.n	8005a5c <Recognize_Piece_Of_Message+0x124>
				{
					*foundCommand = Commands_2[i].commandNumber;
 8005a44:	89ba      	ldrh	r2, [r7, #12]
 8005a46:	4967      	ldr	r1, [pc, #412]	; (8005be4 <Recognize_Piece_Of_Message+0x2ac>)
 8005a48:	4613      	mov	r3, r2
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	1a9b      	subs	r3, r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	440b      	add	r3, r1
 8005a52:	331a      	adds	r3, #26
 8005a54:	881a      	ldrh	r2, [r3, #0]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	801a      	strh	r2, [r3, #0]
					break;
 8005a5a:	e006      	b.n	8005a6a <Recognize_Piece_Of_Message+0x132>
			for (i = 0; i < Commands_2_LENGTH; ++i)
 8005a5c:	89bb      	ldrh	r3, [r7, #12]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	81bb      	strh	r3, [r7, #12]
 8005a62:	2225      	movs	r2, #37	; 0x25
 8005a64:	89bb      	ldrh	r3, [r7, #12]
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d3d7      	bcc.n	8005a1a <Recognize_Piece_Of_Message+0xe2>
				}
			}
		}

		if (0 == FLAG_match)
 8005a6a:	7afb      	ldrb	r3, [r7, #11]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d12a      	bne.n	8005ac6 <Recognize_Piece_Of_Message+0x18e>
		{
			for (i = 0; i < Commands_3_LENGTH; ++i)
 8005a70:	2300      	movs	r3, #0
 8005a72:	81bb      	strh	r3, [r7, #12]
 8005a74:	e023      	b.n	8005abe <Recognize_Piece_Of_Message+0x186>
			{
				FLAG_match = (strcmp(Piece, Commands_3[i].name) ? 0 : 1);
 8005a76:	89ba      	ldrh	r2, [r7, #12]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	1a9b      	subs	r3, r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4a59      	ldr	r2, [pc, #356]	; (8005be8 <Recognize_Piece_Of_Message+0x2b0>)
 8005a82:	4413      	add	r3, r2
 8005a84:	4619      	mov	r1, r3
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7fa fba2 	bl	80001d0 <strcmp>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	bf0c      	ite	eq
 8005a92:	2301      	moveq	r3, #1
 8005a94:	2300      	movne	r3, #0
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	72fb      	strb	r3, [r7, #11]

				if (1 == FLAG_match)
 8005a9a:	7afb      	ldrb	r3, [r7, #11]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d10b      	bne.n	8005ab8 <Recognize_Piece_Of_Message+0x180>
				{
					*foundCommand = Commands_3[i].commandNumber;
 8005aa0:	89ba      	ldrh	r2, [r7, #12]
 8005aa2:	4951      	ldr	r1, [pc, #324]	; (8005be8 <Recognize_Piece_Of_Message+0x2b0>)
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	1a9b      	subs	r3, r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	440b      	add	r3, r1
 8005aae:	331a      	adds	r3, #26
 8005ab0:	881a      	ldrh	r2, [r3, #0]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	801a      	strh	r2, [r3, #0]
					break;
 8005ab6:	e006      	b.n	8005ac6 <Recognize_Piece_Of_Message+0x18e>
			for (i = 0; i < Commands_3_LENGTH; ++i)
 8005ab8:	89bb      	ldrh	r3, [r7, #12]
 8005aba:	3301      	adds	r3, #1
 8005abc:	81bb      	strh	r3, [r7, #12]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	89bb      	ldrh	r3, [r7, #12]
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d3d7      	bcc.n	8005a76 <Recognize_Piece_Of_Message+0x13e>
				}
			}
		}

		if (0 == FLAG_match)
 8005ac6:	7afb      	ldrb	r3, [r7, #11]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d12a      	bne.n	8005b22 <Recognize_Piece_Of_Message+0x1ea>
		{
			for (i = 0; i < Commands_4_LENGTH; ++i)
 8005acc:	2300      	movs	r3, #0
 8005ace:	81bb      	strh	r3, [r7, #12]
 8005ad0:	e023      	b.n	8005b1a <Recognize_Piece_Of_Message+0x1e2>
			{
				FLAG_match = (strcmp(Piece, Commands_4[i].name) ? 0 : 1);
 8005ad2:	89ba      	ldrh	r2, [r7, #12]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	1a9b      	subs	r3, r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4a43      	ldr	r2, [pc, #268]	; (8005bec <Recognize_Piece_Of_Message+0x2b4>)
 8005ade:	4413      	add	r3, r2
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7fa fb74 	bl	80001d0 <strcmp>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	bf0c      	ite	eq
 8005aee:	2301      	moveq	r3, #1
 8005af0:	2300      	movne	r3, #0
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	72fb      	strb	r3, [r7, #11]

				if (1 == FLAG_match)
 8005af6:	7afb      	ldrb	r3, [r7, #11]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d10b      	bne.n	8005b14 <Recognize_Piece_Of_Message+0x1dc>
				{
					*foundCommand = Commands_4[i].commandNumber;
 8005afc:	89ba      	ldrh	r2, [r7, #12]
 8005afe:	493b      	ldr	r1, [pc, #236]	; (8005bec <Recognize_Piece_Of_Message+0x2b4>)
 8005b00:	4613      	mov	r3, r2
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	1a9b      	subs	r3, r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	440b      	add	r3, r1
 8005b0a:	331a      	adds	r3, #26
 8005b0c:	881a      	ldrh	r2, [r3, #0]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	801a      	strh	r2, [r3, #0]
					break;
 8005b12:	e006      	b.n	8005b22 <Recognize_Piece_Of_Message+0x1ea>
			for (i = 0; i < Commands_4_LENGTH; ++i)
 8005b14:	89bb      	ldrh	r3, [r7, #12]
 8005b16:	3301      	adds	r3, #1
 8005b18:	81bb      	strh	r3, [r7, #12]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	89bb      	ldrh	r3, [r7, #12]
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d3d7      	bcc.n	8005ad2 <Recognize_Piece_Of_Message+0x19a>
				}
			}
		}

		if (0 == FLAG_match)
 8005b22:	7afb      	ldrb	r3, [r7, #11]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d12a      	bne.n	8005b7e <Recognize_Piece_Of_Message+0x246>
		{
			for (i = 0; i < Ports_LENGTH; ++i)
 8005b28:	2300      	movs	r3, #0
 8005b2a:	81bb      	strh	r3, [r7, #12]
 8005b2c:	e023      	b.n	8005b76 <Recognize_Piece_Of_Message+0x23e>
			{
				FLAG_match = (strcmp(Piece, Ports[i].name) ? 0 : 1);
 8005b2e:	89ba      	ldrh	r2, [r7, #12]
 8005b30:	4613      	mov	r3, r2
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	1a9b      	subs	r3, r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4a2d      	ldr	r2, [pc, #180]	; (8005bf0 <Recognize_Piece_Of_Message+0x2b8>)
 8005b3a:	4413      	add	r3, r2
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7fa fb46 	bl	80001d0 <strcmp>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	bf0c      	ite	eq
 8005b4a:	2301      	moveq	r3, #1
 8005b4c:	2300      	movne	r3, #0
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	72fb      	strb	r3, [r7, #11]

				if (1 == FLAG_match)
 8005b52:	7afb      	ldrb	r3, [r7, #11]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d10b      	bne.n	8005b70 <Recognize_Piece_Of_Message+0x238>
				{
					*foundCommand = Ports[i].commandNumber;
 8005b58:	89ba      	ldrh	r2, [r7, #12]
 8005b5a:	4925      	ldr	r1, [pc, #148]	; (8005bf0 <Recognize_Piece_Of_Message+0x2b8>)
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	1a9b      	subs	r3, r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	440b      	add	r3, r1
 8005b66:	331a      	adds	r3, #26
 8005b68:	881a      	ldrh	r2, [r3, #0]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	801a      	strh	r2, [r3, #0]
					break;
 8005b6e:	e006      	b.n	8005b7e <Recognize_Piece_Of_Message+0x246>
			for (i = 0; i < Ports_LENGTH; ++i)
 8005b70:	89bb      	ldrh	r3, [r7, #12]
 8005b72:	3301      	adds	r3, #1
 8005b74:	81bb      	strh	r3, [r7, #12]
 8005b76:	2239      	movs	r2, #57	; 0x39
 8005b78:	89bb      	ldrh	r3, [r7, #12]
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d3d7      	bcc.n	8005b2e <Recognize_Piece_Of_Message+0x1f6>
				}
			}
		}

		if (0 == FLAG_match)
 8005b7e:	7afb      	ldrb	r3, [r7, #11]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d146      	bne.n	8005c12 <Recognize_Piece_Of_Message+0x2da>
		{
			for (i = 0; i < strlen(Piece); ++i)
 8005b84:	2300      	movs	r3, #0
 8005b86:	81bb      	strh	r3, [r7, #12]
 8005b88:	e034      	b.n	8005bf4 <Recognize_Piece_Of_Message+0x2bc>
			{
				if ((isdigit(Piece[i])) || ('e' == Piece[i]) || ('E' == Piece[i]) || ('.' == Piece[i]))
 8005b8a:	f001 fa9b 	bl	80070c4 <__locale_ctype_ptr>
 8005b8e:	4601      	mov	r1, r0
 8005b90:	89bb      	ldrh	r3, [r7, #12]
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	4413      	add	r3, r2
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	440b      	add	r3, r1
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	f003 0304 	and.w	r3, r3, #4
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d111      	bne.n	8005bca <Recognize_Piece_Of_Message+0x292>
 8005ba6:	89bb      	ldrh	r3, [r7, #12]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	4413      	add	r3, r2
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	2b65      	cmp	r3, #101	; 0x65
 8005bb0:	d00b      	beq.n	8005bca <Recognize_Piece_Of_Message+0x292>
 8005bb2:	89bb      	ldrh	r3, [r7, #12]
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	2b45      	cmp	r3, #69	; 0x45
 8005bbc:	d005      	beq.n	8005bca <Recognize_Piece_Of_Message+0x292>
 8005bbe:	89bb      	ldrh	r3, [r7, #12]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b2e      	cmp	r3, #46	; 0x2e
 8005bc8:	d105      	bne.n	8005bd6 <Recognize_Piece_Of_Message+0x29e>
				{
					FLAG_isDigit = 1;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	72bb      	strb	r3, [r7, #10]
			for (i = 0; i < strlen(Piece); ++i)
 8005bce:	89bb      	ldrh	r3, [r7, #12]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	81bb      	strh	r3, [r7, #12]
 8005bd4:	e00e      	b.n	8005bf4 <Recognize_Piece_Of_Message+0x2bc>
				}
				else
				{
					FLAG_isDigit = 0;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	72bb      	strb	r3, [r7, #10]
					break;
 8005bda:	e012      	b.n	8005c02 <Recognize_Piece_Of_Message+0x2ca>
 8005bdc:	20000008 	.word	0x20000008
 8005be0:	20000200 	.word	0x20000200
 8005be4:	2000044c 	.word	0x2000044c
 8005be8:	20000858 	.word	0x20000858
 8005bec:	20000bd8 	.word	0x20000bd8
 8005bf0:	20000bf4 	.word	0x20000bf4
			for (i = 0; i < strlen(Piece); ++i)
 8005bf4:	89bc      	ldrh	r4, [r7, #12]
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7fa faf4 	bl	80001e4 <strlen>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	429c      	cmp	r4, r3
 8005c00:	d3c3      	bcc.n	8005b8a <Recognize_Piece_Of_Message+0x252>
				}
			}

			if (1 == FLAG_isDigit)
 8005c02:	7abb      	ldrb	r3, [r7, #10]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d104      	bne.n	8005c12 <Recognize_Piece_Of_Message+0x2da>
			{
				FLAG_match = 1;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	72fb      	strb	r3, [r7, #11]
				*foundCommand = IS_A_NUMERIC_VALUE;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	801a      	strh	r2, [r3, #0]
			}
		}
	}

	if (0 == FLAG_match)
 8005c12:	7afb      	ldrb	r3, [r7, #11]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <Recognize_Piece_Of_Message+0x2e4>
		errorCode = COMMAND_NOT_RECOGNIZED;
 8005c18:	2325      	movs	r3, #37	; 0x25
 8005c1a:	73fb      	strb	r3, [r7, #15]

	return errorCode;
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
 8005c1e:	b29b      	uxth	r3, r3
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd90      	pop	{r4, r7, pc}

08005c28 <Recognize_Message>:


static uint16_t Recognize_Message(char tableWithMessagePieces[MAX_NUMBER_OF_PIECES][MAX_LENGTH_OF_A_PIECE], const uint8_t *numberOfPieces, uint16_t *CommandNumbers)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
	ERROR_CODE errorCode = 0x00;
 8005c34:	2300      	movs	r3, #0
 8005c36:	75fb      	strb	r3, [r7, #23]
	uint16_t i = 0;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	82bb      	strh	r3, [r7, #20]
	uint16_t command = 0;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	827b      	strh	r3, [r7, #18]

	for (i = 0; i < *numberOfPieces; ++i)
 8005c40:	2300      	movs	r3, #0
 8005c42:	82bb      	strh	r3, [r7, #20]
 8005c44:	e01b      	b.n	8005c7e <Recognize_Message+0x56>
	{
		errorCode = Recognize_Piece_Of_Message(tableWithMessagePieces[i], &command);
 8005c46:	8aba      	ldrh	r2, [r7, #20]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	461a      	mov	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4413      	add	r3, r2
 8005c56:	f107 0212 	add.w	r2, r7, #18
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7ff fe6b 	bl	8005938 <Recognize_Piece_Of_Message>
 8005c62:	4603      	mov	r3, r0
 8005c64:	75fb      	strb	r3, [r7, #23]
		CommandNumbers[i] = command;
 8005c66:	8abb      	ldrh	r3, [r7, #20]
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	8a7a      	ldrh	r2, [r7, #18]
 8005c70:	801a      	strh	r2, [r3, #0]

		if (0 != errorCode)
 8005c72:	7dfb      	ldrb	r3, [r7, #23]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d109      	bne.n	8005c8c <Recognize_Message+0x64>
	for (i = 0; i < *numberOfPieces; ++i)
 8005c78:	8abb      	ldrh	r3, [r7, #20]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	82bb      	strh	r3, [r7, #20]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	8aba      	ldrh	r2, [r7, #20]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d3dd      	bcc.n	8005c46 <Recognize_Message+0x1e>
 8005c8a:	e000      	b.n	8005c8e <Recognize_Message+0x66>
			break;
 8005c8c:	bf00      	nop
	}

	return errorCode;
 8005c8e:	7dfb      	ldrb	r3, [r7, #23]
 8005c90:	b29b      	uxth	r3, r3
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
	...

08005c9c <Do_The_Command>:


static uint16_t Do_The_Command(const char tableWithMessagePieces[MAX_NUMBER_OF_PIECES][MAX_LENGTH_OF_A_PIECE], const uint8_t *numberOfPieces, const uint16_t *CommandNumbers, char *SCPI_buffer)
{
 8005c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	603b      	str	r3, [r7, #0]
	ERROR_CODE errorCode = 0x00;
 8005caa:	2300      	movs	r3, #0
 8005cac:	75fb      	strb	r3, [r7, #23]
	uint8_t command_found_FLAG = 0;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	75bb      	strb	r3, [r7, #22]

	if (0 == errorCode)
 8005cb2:	7dfb      	ldrb	r3, [r7, #23]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f040 82bd 	bne.w	8006234 <Do_The_Command+0x598>
	{
		if ((1 == *numberOfPieces) && (0 == command_found_FLAG))
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	f040 81f2 	bne.w	80060a8 <Do_The_Command+0x40c>
 8005cc4:	7dbb      	ldrb	r3, [r7, #22]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f040 81ee 	bne.w	80060a8 <Do_The_Command+0x40c>
		{
			switch(CommandNumbers[0])
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	2b11      	cmp	r3, #17
 8005cd4:	f200 81c2 	bhi.w	800605c <Do_The_Command+0x3c0>
 8005cd8:	a201      	add	r2, pc, #4	; (adr r2, 8005ce0 <Do_The_Command+0x44>)
 8005cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cde:	bf00      	nop
 8005ce0:	08005d29 	.word	0x08005d29
 8005ce4:	08005d41 	.word	0x08005d41
 8005ce8:	08005d73 	.word	0x08005d73
 8005cec:	08005da9 	.word	0x08005da9
 8005cf0:	08005ddf 	.word	0x08005ddf
 8005cf4:	08005df7 	.word	0x08005df7
 8005cf8:	08005e29 	.word	0x08005e29
 8005cfc:	08005e5f 	.word	0x08005e5f
 8005d00:	08005e91 	.word	0x08005e91
 8005d04:	08005ec7 	.word	0x08005ec7
 8005d08:	08005ef9 	.word	0x08005ef9
 8005d0c:	08005f11 	.word	0x08005f11
 8005d10:	08005f43 	.word	0x08005f43
 8005d14:	08005f75 	.word	0x08005f75
 8005d18:	08005fab 	.word	0x08005fab
 8005d1c:	08005fe1 	.word	0x08005fe1
 8005d20:	08006013 	.word	0x08006013
 8005d24:	0800602b 	.word	0x0800602b
				case 0x01:		//*CLS
				{
					//TODO
		//			errorCode = Clear_Status_Data_Structures();
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "CLS Done!");
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	49ce      	ldr	r1, [pc, #824]	; (8006064 <Do_The_Command+0x3c8>)
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	460b      	mov	r3, r1
 8005d30:	cb03      	ldmia	r3!, {r0, r1}
 8005d32:	6010      	str	r0, [r2, #0]
 8005d34:	6051      	str	r1, [r2, #4]
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	8113      	strh	r3, [r2, #8]
					command_found_FLAG = 1;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	75bb      	strb	r3, [r7, #22]
					break;
 8005d3e:	e1b4      	b.n	80060aa <Do_The_Command+0x40e>
				}
				case 0x02:		//*ESE
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*ESE\" is not applicable for this device!");
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	4ac9      	ldr	r2, [pc, #804]	; (8006068 <Do_The_Command+0x3cc>)
 8005d44:	4614      	mov	r4, r2
 8005d46:	469c      	mov	ip, r3
 8005d48:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8005d4c:	4665      	mov	r5, ip
 8005d4e:	4626      	mov	r6, r4
 8005d50:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005d52:	6028      	str	r0, [r5, #0]
 8005d54:	6069      	str	r1, [r5, #4]
 8005d56:	60aa      	str	r2, [r5, #8]
 8005d58:	60eb      	str	r3, [r5, #12]
 8005d5a:	3410      	adds	r4, #16
 8005d5c:	f10c 0c10 	add.w	ip, ip, #16
 8005d60:	4574      	cmp	r4, lr
 8005d62:	d1f3      	bne.n	8005d4c <Do_The_Command+0xb0>
 8005d64:	4662      	mov	r2, ip
 8005d66:	4623      	mov	r3, r4
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	8013      	strh	r3, [r2, #0]
					command_found_FLAG = 1;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	75bb      	strb	r3, [r7, #22]
					break;
 8005d70:	e19b      	b.n	80060aa <Do_The_Command+0x40e>
				}
				case 0x03:		//*ESE?
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*ESE?\" is not applicable for this device!");
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	4abd      	ldr	r2, [pc, #756]	; (800606c <Do_The_Command+0x3d0>)
 8005d76:	4614      	mov	r4, r2
 8005d78:	469c      	mov	ip, r3
 8005d7a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8005d7e:	4665      	mov	r5, ip
 8005d80:	4626      	mov	r6, r4
 8005d82:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005d84:	6028      	str	r0, [r5, #0]
 8005d86:	6069      	str	r1, [r5, #4]
 8005d88:	60aa      	str	r2, [r5, #8]
 8005d8a:	60eb      	str	r3, [r5, #12]
 8005d8c:	3410      	adds	r4, #16
 8005d8e:	f10c 0c10 	add.w	ip, ip, #16
 8005d92:	4574      	cmp	r4, lr
 8005d94:	d1f3      	bne.n	8005d7e <Do_The_Command+0xe2>
 8005d96:	4663      	mov	r3, ip
 8005d98:	4622      	mov	r2, r4
 8005d9a:	8811      	ldrh	r1, [r2, #0]
 8005d9c:	7892      	ldrb	r2, [r2, #2]
 8005d9e:	8019      	strh	r1, [r3, #0]
 8005da0:	709a      	strb	r2, [r3, #2]
					command_found_FLAG = 1;
 8005da2:	2301      	movs	r3, #1
 8005da4:	75bb      	strb	r3, [r7, #22]
					break;
 8005da6:	e180      	b.n	80060aa <Do_The_Command+0x40e>
				}
				case 0x04:		//*ESR?
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*ESR?\" is not applicable for this device!");
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	4ab1      	ldr	r2, [pc, #708]	; (8006070 <Do_The_Command+0x3d4>)
 8005dac:	4614      	mov	r4, r2
 8005dae:	469c      	mov	ip, r3
 8005db0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8005db4:	4665      	mov	r5, ip
 8005db6:	4626      	mov	r6, r4
 8005db8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005dba:	6028      	str	r0, [r5, #0]
 8005dbc:	6069      	str	r1, [r5, #4]
 8005dbe:	60aa      	str	r2, [r5, #8]
 8005dc0:	60eb      	str	r3, [r5, #12]
 8005dc2:	3410      	adds	r4, #16
 8005dc4:	f10c 0c10 	add.w	ip, ip, #16
 8005dc8:	4574      	cmp	r4, lr
 8005dca:	d1f3      	bne.n	8005db4 <Do_The_Command+0x118>
 8005dcc:	4663      	mov	r3, ip
 8005dce:	4622      	mov	r2, r4
 8005dd0:	8811      	ldrh	r1, [r2, #0]
 8005dd2:	7892      	ldrb	r2, [r2, #2]
 8005dd4:	8019      	strh	r1, [r3, #0]
 8005dd6:	709a      	strb	r2, [r3, #2]
					command_found_FLAG = 1;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	75bb      	strb	r3, [r7, #22]
					break;
 8005ddc:	e165      	b.n	80060aa <Do_The_Command+0x40e>
				}
				case 0x05:		//*IDN?
				{
					sprintf(SCPI_buffer, "Manufacturer:	Bartosz Jasko\n\r"
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	4aa4      	ldr	r2, [pc, #656]	; (8006074 <Do_The_Command+0x3d8>)
 8005de2:	4618      	mov	r0, r3
 8005de4:	4611      	mov	r1, r2
 8005de6:	f240 134f 	movw	r3, #335	; 0x14f
 8005dea:	461a      	mov	r2, r3
 8005dec:	f001 f98a 	bl	8007104 <memcpy>
							"E-mail: bjasko97@gmail.com\n\r"
							"Version: 1.1\n\r"
							"Date: 21.11.2019\n\r"
							"This device is mostly compatible with SCPI protocol. Due to limited functionality there was no need to implement all SCPI commands and queries.\n\r"
							"In case of any bugs and mistakes, please contact the author of this code and-or device via E-mail.\n\r");
					command_found_FLAG = 1;
 8005df0:	2301      	movs	r3, #1
 8005df2:	75bb      	strb	r3, [r7, #22]
					break;
 8005df4:	e159      	b.n	80060aa <Do_The_Command+0x40e>
				}
				case 0x06:		//*OPC
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*OPC\" is not applicable for this device!");
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	4a9f      	ldr	r2, [pc, #636]	; (8006078 <Do_The_Command+0x3dc>)
 8005dfa:	4614      	mov	r4, r2
 8005dfc:	469c      	mov	ip, r3
 8005dfe:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8005e02:	4665      	mov	r5, ip
 8005e04:	4626      	mov	r6, r4
 8005e06:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005e08:	6028      	str	r0, [r5, #0]
 8005e0a:	6069      	str	r1, [r5, #4]
 8005e0c:	60aa      	str	r2, [r5, #8]
 8005e0e:	60eb      	str	r3, [r5, #12]
 8005e10:	3410      	adds	r4, #16
 8005e12:	f10c 0c10 	add.w	ip, ip, #16
 8005e16:	4574      	cmp	r4, lr
 8005e18:	d1f3      	bne.n	8005e02 <Do_The_Command+0x166>
 8005e1a:	4662      	mov	r2, ip
 8005e1c:	4623      	mov	r3, r4
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	8013      	strh	r3, [r2, #0]
					command_found_FLAG = 1;
 8005e22:	2301      	movs	r3, #1
 8005e24:	75bb      	strb	r3, [r7, #22]
					break;
 8005e26:	e140      	b.n	80060aa <Do_The_Command+0x40e>
				}
				case 0x07:		//*OPC?
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*OPC?\" is not applicable for this device!");
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	4a94      	ldr	r2, [pc, #592]	; (800607c <Do_The_Command+0x3e0>)
 8005e2c:	4614      	mov	r4, r2
 8005e2e:	469c      	mov	ip, r3
 8005e30:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8005e34:	4665      	mov	r5, ip
 8005e36:	4626      	mov	r6, r4
 8005e38:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005e3a:	6028      	str	r0, [r5, #0]
 8005e3c:	6069      	str	r1, [r5, #4]
 8005e3e:	60aa      	str	r2, [r5, #8]
 8005e40:	60eb      	str	r3, [r5, #12]
 8005e42:	3410      	adds	r4, #16
 8005e44:	f10c 0c10 	add.w	ip, ip, #16
 8005e48:	4574      	cmp	r4, lr
 8005e4a:	d1f3      	bne.n	8005e34 <Do_The_Command+0x198>
 8005e4c:	4663      	mov	r3, ip
 8005e4e:	4622      	mov	r2, r4
 8005e50:	8811      	ldrh	r1, [r2, #0]
 8005e52:	7892      	ldrb	r2, [r2, #2]
 8005e54:	8019      	strh	r1, [r3, #0]
 8005e56:	709a      	strb	r2, [r3, #2]
					command_found_FLAG = 1;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	75bb      	strb	r3, [r7, #22]
					break;
 8005e5c:	e125      	b.n	80060aa <Do_The_Command+0x40e>
				}
				case 0x08:		//*PSC
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*PSC\" is not applicable for this device!");
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	4a87      	ldr	r2, [pc, #540]	; (8006080 <Do_The_Command+0x3e4>)
 8005e62:	4614      	mov	r4, r2
 8005e64:	469c      	mov	ip, r3
 8005e66:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8005e6a:	4665      	mov	r5, ip
 8005e6c:	4626      	mov	r6, r4
 8005e6e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005e70:	6028      	str	r0, [r5, #0]
 8005e72:	6069      	str	r1, [r5, #4]
 8005e74:	60aa      	str	r2, [r5, #8]
 8005e76:	60eb      	str	r3, [r5, #12]
 8005e78:	3410      	adds	r4, #16
 8005e7a:	f10c 0c10 	add.w	ip, ip, #16
 8005e7e:	4574      	cmp	r4, lr
 8005e80:	d1f3      	bne.n	8005e6a <Do_The_Command+0x1ce>
 8005e82:	4662      	mov	r2, ip
 8005e84:	4623      	mov	r3, r4
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	8013      	strh	r3, [r2, #0]
					command_found_FLAG = 1;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	75bb      	strb	r3, [r7, #22]
					break;
 8005e8e:	e10c      	b.n	80060aa <Do_The_Command+0x40e>
				}
				case 0x09:		//*PSC?
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*PSC?\" is not applicable for this device!");
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	4a7c      	ldr	r2, [pc, #496]	; (8006084 <Do_The_Command+0x3e8>)
 8005e94:	4614      	mov	r4, r2
 8005e96:	469c      	mov	ip, r3
 8005e98:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8005e9c:	4665      	mov	r5, ip
 8005e9e:	4626      	mov	r6, r4
 8005ea0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005ea2:	6028      	str	r0, [r5, #0]
 8005ea4:	6069      	str	r1, [r5, #4]
 8005ea6:	60aa      	str	r2, [r5, #8]
 8005ea8:	60eb      	str	r3, [r5, #12]
 8005eaa:	3410      	adds	r4, #16
 8005eac:	f10c 0c10 	add.w	ip, ip, #16
 8005eb0:	4574      	cmp	r4, lr
 8005eb2:	d1f3      	bne.n	8005e9c <Do_The_Command+0x200>
 8005eb4:	4663      	mov	r3, ip
 8005eb6:	4622      	mov	r2, r4
 8005eb8:	8811      	ldrh	r1, [r2, #0]
 8005eba:	7892      	ldrb	r2, [r2, #2]
 8005ebc:	8019      	strh	r1, [r3, #0]
 8005ebe:	709a      	strb	r2, [r3, #2]
					command_found_FLAG = 1;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	75bb      	strb	r3, [r7, #22]
					break;
 8005ec4:	e0f1      	b.n	80060aa <Do_The_Command+0x40e>
				}
				case 0x0A:		//*RCL
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*RCL\" is not applicable for this device!");
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	4a6f      	ldr	r2, [pc, #444]	; (8006088 <Do_The_Command+0x3ec>)
 8005eca:	4614      	mov	r4, r2
 8005ecc:	469c      	mov	ip, r3
 8005ece:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8005ed2:	4665      	mov	r5, ip
 8005ed4:	4626      	mov	r6, r4
 8005ed6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005ed8:	6028      	str	r0, [r5, #0]
 8005eda:	6069      	str	r1, [r5, #4]
 8005edc:	60aa      	str	r2, [r5, #8]
 8005ede:	60eb      	str	r3, [r5, #12]
 8005ee0:	3410      	adds	r4, #16
 8005ee2:	f10c 0c10 	add.w	ip, ip, #16
 8005ee6:	4574      	cmp	r4, lr
 8005ee8:	d1f3      	bne.n	8005ed2 <Do_The_Command+0x236>
 8005eea:	4662      	mov	r2, ip
 8005eec:	4623      	mov	r3, r4
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	8013      	strh	r3, [r2, #0]
					command_found_FLAG = 1;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	75bb      	strb	r3, [r7, #22]
					break;
 8005ef6:	e0d8      	b.n	80060aa <Do_The_Command+0x40e>
				case 0x0B:		//*RST
				{
					//TODO
					//	errorCode = Reset_all_settings_to_default();
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "RST Done!");
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	4964      	ldr	r1, [pc, #400]	; (800608c <Do_The_Command+0x3f0>)
 8005efc:	461a      	mov	r2, r3
 8005efe:	460b      	mov	r3, r1
 8005f00:	cb03      	ldmia	r3!, {r0, r1}
 8005f02:	6010      	str	r0, [r2, #0]
 8005f04:	6051      	str	r1, [r2, #4]
 8005f06:	881b      	ldrh	r3, [r3, #0]
 8005f08:	8113      	strh	r3, [r2, #8]
					command_found_FLAG = 1;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	75bb      	strb	r3, [r7, #22]
					break;
 8005f0e:	e0cc      	b.n	80060aa <Do_The_Command+0x40e>
				}
				case 0x0C:		//*SAV
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*SAV\" is not applicable for this device!");
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	4a5f      	ldr	r2, [pc, #380]	; (8006090 <Do_The_Command+0x3f4>)
 8005f14:	4614      	mov	r4, r2
 8005f16:	469c      	mov	ip, r3
 8005f18:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8005f1c:	4665      	mov	r5, ip
 8005f1e:	4626      	mov	r6, r4
 8005f20:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005f22:	6028      	str	r0, [r5, #0]
 8005f24:	6069      	str	r1, [r5, #4]
 8005f26:	60aa      	str	r2, [r5, #8]
 8005f28:	60eb      	str	r3, [r5, #12]
 8005f2a:	3410      	adds	r4, #16
 8005f2c:	f10c 0c10 	add.w	ip, ip, #16
 8005f30:	4574      	cmp	r4, lr
 8005f32:	d1f3      	bne.n	8005f1c <Do_The_Command+0x280>
 8005f34:	4662      	mov	r2, ip
 8005f36:	4623      	mov	r3, r4
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	8013      	strh	r3, [r2, #0]
					command_found_FLAG = 1;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	75bb      	strb	r3, [r7, #22]
					break;
 8005f40:	e0b3      	b.n	80060aa <Do_The_Command+0x40e>
				}
				case 0x0D:		//*SRE
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*SRE\" is not applicable for this device!");
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	4a53      	ldr	r2, [pc, #332]	; (8006094 <Do_The_Command+0x3f8>)
 8005f46:	4614      	mov	r4, r2
 8005f48:	469c      	mov	ip, r3
 8005f4a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8005f4e:	4665      	mov	r5, ip
 8005f50:	4626      	mov	r6, r4
 8005f52:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005f54:	6028      	str	r0, [r5, #0]
 8005f56:	6069      	str	r1, [r5, #4]
 8005f58:	60aa      	str	r2, [r5, #8]
 8005f5a:	60eb      	str	r3, [r5, #12]
 8005f5c:	3410      	adds	r4, #16
 8005f5e:	f10c 0c10 	add.w	ip, ip, #16
 8005f62:	4574      	cmp	r4, lr
 8005f64:	d1f3      	bne.n	8005f4e <Do_The_Command+0x2b2>
 8005f66:	4662      	mov	r2, ip
 8005f68:	4623      	mov	r3, r4
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	8013      	strh	r3, [r2, #0]
					command_found_FLAG = 1;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	75bb      	strb	r3, [r7, #22]
					break;
 8005f72:	e09a      	b.n	80060aa <Do_The_Command+0x40e>
				}
				case 0x0E:		//*SRE?
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*SRE?\" is not applicable for this device!");
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	4a48      	ldr	r2, [pc, #288]	; (8006098 <Do_The_Command+0x3fc>)
 8005f78:	4614      	mov	r4, r2
 8005f7a:	469c      	mov	ip, r3
 8005f7c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8005f80:	4665      	mov	r5, ip
 8005f82:	4626      	mov	r6, r4
 8005f84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005f86:	6028      	str	r0, [r5, #0]
 8005f88:	6069      	str	r1, [r5, #4]
 8005f8a:	60aa      	str	r2, [r5, #8]
 8005f8c:	60eb      	str	r3, [r5, #12]
 8005f8e:	3410      	adds	r4, #16
 8005f90:	f10c 0c10 	add.w	ip, ip, #16
 8005f94:	4574      	cmp	r4, lr
 8005f96:	d1f3      	bne.n	8005f80 <Do_The_Command+0x2e4>
 8005f98:	4663      	mov	r3, ip
 8005f9a:	4622      	mov	r2, r4
 8005f9c:	8811      	ldrh	r1, [r2, #0]
 8005f9e:	7892      	ldrb	r2, [r2, #2]
 8005fa0:	8019      	strh	r1, [r3, #0]
 8005fa2:	709a      	strb	r2, [r3, #2]
					command_found_FLAG = 1;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	75bb      	strb	r3, [r7, #22]
					break;
 8005fa8:	e07f      	b.n	80060aa <Do_The_Command+0x40e>
				}
				case 0x0F:		//*STB?
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*STB?\" is not applicable for this device!");
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	4a3b      	ldr	r2, [pc, #236]	; (800609c <Do_The_Command+0x400>)
 8005fae:	4614      	mov	r4, r2
 8005fb0:	469c      	mov	ip, r3
 8005fb2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8005fb6:	4665      	mov	r5, ip
 8005fb8:	4626      	mov	r6, r4
 8005fba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005fbc:	6028      	str	r0, [r5, #0]
 8005fbe:	6069      	str	r1, [r5, #4]
 8005fc0:	60aa      	str	r2, [r5, #8]
 8005fc2:	60eb      	str	r3, [r5, #12]
 8005fc4:	3410      	adds	r4, #16
 8005fc6:	f10c 0c10 	add.w	ip, ip, #16
 8005fca:	4574      	cmp	r4, lr
 8005fcc:	d1f3      	bne.n	8005fb6 <Do_The_Command+0x31a>
 8005fce:	4663      	mov	r3, ip
 8005fd0:	4622      	mov	r2, r4
 8005fd2:	8811      	ldrh	r1, [r2, #0]
 8005fd4:	7892      	ldrb	r2, [r2, #2]
 8005fd6:	8019      	strh	r1, [r3, #0]
 8005fd8:	709a      	strb	r2, [r3, #2]
					command_found_FLAG = 1;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	75bb      	strb	r3, [r7, #22]
					break;
 8005fde:	e064      	b.n	80060aa <Do_The_Command+0x40e>
				}
				case 0x10:		//*TRG
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*TRG\" is not applicable for this device!");
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	4a2f      	ldr	r2, [pc, #188]	; (80060a0 <Do_The_Command+0x404>)
 8005fe4:	4614      	mov	r4, r2
 8005fe6:	469c      	mov	ip, r3
 8005fe8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8005fec:	4665      	mov	r5, ip
 8005fee:	4626      	mov	r6, r4
 8005ff0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005ff2:	6028      	str	r0, [r5, #0]
 8005ff4:	6069      	str	r1, [r5, #4]
 8005ff6:	60aa      	str	r2, [r5, #8]
 8005ff8:	60eb      	str	r3, [r5, #12]
 8005ffa:	3410      	adds	r4, #16
 8005ffc:	f10c 0c10 	add.w	ip, ip, #16
 8006000:	4574      	cmp	r4, lr
 8006002:	d1f3      	bne.n	8005fec <Do_The_Command+0x350>
 8006004:	4662      	mov	r2, ip
 8006006:	4623      	mov	r3, r4
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	8013      	strh	r3, [r2, #0]
					command_found_FLAG = 1;
 800600c:	2301      	movs	r3, #1
 800600e:	75bb      	strb	r3, [r7, #22]
					break;
 8006010:	e04b      	b.n	80060aa <Do_The_Command+0x40e>
				case 0x11:		//*TST
				{
					//TODO
					//	errorCode = Test_Device(SCPI_buffer);
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "RST Done!");
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	491d      	ldr	r1, [pc, #116]	; (800608c <Do_The_Command+0x3f0>)
 8006016:	461a      	mov	r2, r3
 8006018:	460b      	mov	r3, r1
 800601a:	cb03      	ldmia	r3!, {r0, r1}
 800601c:	6010      	str	r0, [r2, #0]
 800601e:	6051      	str	r1, [r2, #4]
 8006020:	881b      	ldrh	r3, [r3, #0]
 8006022:	8113      	strh	r3, [r2, #8]
					command_found_FLAG = 1;
 8006024:	2301      	movs	r3, #1
 8006026:	75bb      	strb	r3, [r7, #22]
					break;
 8006028:	e03f      	b.n	80060aa <Do_The_Command+0x40e>
				}
				case 0x12:		//*WAI
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*WAI\" is not applicable for this device!");
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	4a1d      	ldr	r2, [pc, #116]	; (80060a4 <Do_The_Command+0x408>)
 800602e:	4614      	mov	r4, r2
 8006030:	469c      	mov	ip, r3
 8006032:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8006036:	4665      	mov	r5, ip
 8006038:	4626      	mov	r6, r4
 800603a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800603c:	6028      	str	r0, [r5, #0]
 800603e:	6069      	str	r1, [r5, #4]
 8006040:	60aa      	str	r2, [r5, #8]
 8006042:	60eb      	str	r3, [r5, #12]
 8006044:	3410      	adds	r4, #16
 8006046:	f10c 0c10 	add.w	ip, ip, #16
 800604a:	4574      	cmp	r4, lr
 800604c:	d1f3      	bne.n	8006036 <Do_The_Command+0x39a>
 800604e:	4662      	mov	r2, ip
 8006050:	4623      	mov	r3, r4
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	8013      	strh	r3, [r2, #0]
					command_found_FLAG = 1;
 8006056:	2301      	movs	r3, #1
 8006058:	75bb      	strb	r3, [r7, #22]
					break;
 800605a:	e026      	b.n	80060aa <Do_The_Command+0x40e>
				}
				default:
				{
					command_found_FLAG = 0;
 800605c:	2300      	movs	r3, #0
 800605e:	75bb      	strb	r3, [r7, #22]
					break;
 8006060:	e023      	b.n	80060aa <Do_The_Command+0x40e>
 8006062:	bf00      	nop
 8006064:	08007c30 	.word	0x08007c30
 8006068:	08007c3c 	.word	0x08007c3c
 800606c:	08007c70 	.word	0x08007c70
 8006070:	08007ca4 	.word	0x08007ca4
 8006074:	08007cd8 	.word	0x08007cd8
 8006078:	08007e28 	.word	0x08007e28
 800607c:	08007e5c 	.word	0x08007e5c
 8006080:	08007e90 	.word	0x08007e90
 8006084:	08007ec4 	.word	0x08007ec4
 8006088:	08007ef8 	.word	0x08007ef8
 800608c:	08007f2c 	.word	0x08007f2c
 8006090:	08007f38 	.word	0x08007f38
 8006094:	08007f6c 	.word	0x08007f6c
 8006098:	08007fa0 	.word	0x08007fa0
 800609c:	08007fd4 	.word	0x08007fd4
 80060a0:	08008008 	.word	0x08008008
 80060a4:	0800803c 	.word	0x0800803c
				}
			}
		}
 80060a8:	bf00      	nop

		if (0 == command_found_FLAG)
 80060aa:	7dbb      	ldrb	r3, [r7, #22]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f040 80c1 	bne.w	8006234 <Do_The_Command+0x598>
		{
			switch(CommandNumbers[0])
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	881b      	ldrh	r3, [r3, #0]
 80060b6:	3b20      	subs	r3, #32
 80060b8:	2b0a      	cmp	r3, #10
 80060ba:	f200 80b6 	bhi.w	800622a <Do_The_Command+0x58e>
 80060be:	a201      	add	r2, pc, #4	; (adr r2, 80060c4 <Do_The_Command+0x428>)
 80060c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c4:	080060f1 	.word	0x080060f1
 80060c8:	0800610f 	.word	0x0800610f
 80060cc:	0800612d 	.word	0x0800612d
 80060d0:	08006143 	.word	0x08006143
 80060d4:	08006161 	.word	0x08006161
 80060d8:	0800617f 	.word	0x0800617f
 80060dc:	0800619d 	.word	0x0800619d
 80060e0:	080061bb 	.word	0x080061bb
 80060e4:	080061d9 	.word	0x080061d9
 80060e8:	080061f7 	.word	0x080061f7
 80060ec:	08006215 	.word	0x08006215
			{
				case 0x20:		//ABOR, ABORT
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Not applicable");
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	4a54      	ldr	r2, [pc, #336]	; (8006244 <Do_The_Command+0x5a8>)
 80060f4:	461c      	mov	r4, r3
 80060f6:	4613      	mov	r3, r2
 80060f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80060fa:	6020      	str	r0, [r4, #0]
 80060fc:	6061      	str	r1, [r4, #4]
 80060fe:	60a2      	str	r2, [r4, #8]
 8006100:	881a      	ldrh	r2, [r3, #0]
 8006102:	789b      	ldrb	r3, [r3, #2]
 8006104:	81a2      	strh	r2, [r4, #12]
 8006106:	73a3      	strb	r3, [r4, #14]
					command_found_FLAG = 1;
 8006108:	2301      	movs	r3, #1
 800610a:	75bb      	strb	r3, [r7, #22]
					break;
 800610c:	e093      	b.n	8006236 <Do_The_Command+0x59a>
				}
				case 0x21:		//CAL, CALIBRATION
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Not applicable");
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	4a4c      	ldr	r2, [pc, #304]	; (8006244 <Do_The_Command+0x5a8>)
 8006112:	461c      	mov	r4, r3
 8006114:	4613      	mov	r3, r2
 8006116:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006118:	6020      	str	r0, [r4, #0]
 800611a:	6061      	str	r1, [r4, #4]
 800611c:	60a2      	str	r2, [r4, #8]
 800611e:	881a      	ldrh	r2, [r3, #0]
 8006120:	789b      	ldrb	r3, [r3, #2]
 8006122:	81a2      	strh	r2, [r4, #12]
 8006124:	73a3      	strb	r3, [r4, #14]
					command_found_FLAG = 1;
 8006126:	2301      	movs	r3, #1
 8006128:	75bb      	strb	r3, [r7, #22]
					break;
 800612a:	e084      	b.n	8006236 <Do_The_Command+0x59a>
				}
				case 0x22:		//SOUR, SOURCE
				{
					errorCode = Source_Command(tableWithMessagePieces, numberOfPieces, CommandNumbers, SCPI_buffer);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	68b9      	ldr	r1, [r7, #8]
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f7ff f960 	bl	80053f8 <Source_Command>
 8006138:	4603      	mov	r3, r0
 800613a:	75fb      	strb	r3, [r7, #23]
					if (SEND_DEBUG_ANSWERS)
					command_found_FLAG = 1;
 800613c:	2301      	movs	r3, #1
 800613e:	75bb      	strb	r3, [r7, #22]
					break;
 8006140:	e079      	b.n	8006236 <Do_The_Command+0x59a>
				}
				case 0x23:		//DISP, DISPLAY
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Not applicable");
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	4a3f      	ldr	r2, [pc, #252]	; (8006244 <Do_The_Command+0x5a8>)
 8006146:	461c      	mov	r4, r3
 8006148:	4613      	mov	r3, r2
 800614a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800614c:	6020      	str	r0, [r4, #0]
 800614e:	6061      	str	r1, [r4, #4]
 8006150:	60a2      	str	r2, [r4, #8]
 8006152:	881a      	ldrh	r2, [r3, #0]
 8006154:	789b      	ldrb	r3, [r3, #2]
 8006156:	81a2      	strh	r2, [r4, #12]
 8006158:	73a3      	strb	r3, [r4, #14]
					command_found_FLAG = 1;
 800615a:	2301      	movs	r3, #1
 800615c:	75bb      	strb	r3, [r7, #22]
					break;
 800615e:	e06a      	b.n	8006236 <Do_The_Command+0x59a>
				}
				case 0x24:		//INIT, INITIATE
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Not applicable");
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	4a38      	ldr	r2, [pc, #224]	; (8006244 <Do_The_Command+0x5a8>)
 8006164:	461c      	mov	r4, r3
 8006166:	4613      	mov	r3, r2
 8006168:	cb07      	ldmia	r3!, {r0, r1, r2}
 800616a:	6020      	str	r0, [r4, #0]
 800616c:	6061      	str	r1, [r4, #4]
 800616e:	60a2      	str	r2, [r4, #8]
 8006170:	881a      	ldrh	r2, [r3, #0]
 8006172:	789b      	ldrb	r3, [r3, #2]
 8006174:	81a2      	strh	r2, [r4, #12]
 8006176:	73a3      	strb	r3, [r4, #14]
					command_found_FLAG = 1;
 8006178:	2301      	movs	r3, #1
 800617a:	75bb      	strb	r3, [r7, #22]
					break;
 800617c:	e05b      	b.n	8006236 <Do_The_Command+0x59a>
				}
				case 0x25:		//MEAS, MEASURE
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Not applicable");
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	4a30      	ldr	r2, [pc, #192]	; (8006244 <Do_The_Command+0x5a8>)
 8006182:	461c      	mov	r4, r3
 8006184:	4613      	mov	r3, r2
 8006186:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006188:	6020      	str	r0, [r4, #0]
 800618a:	6061      	str	r1, [r4, #4]
 800618c:	60a2      	str	r2, [r4, #8]
 800618e:	881a      	ldrh	r2, [r3, #0]
 8006190:	789b      	ldrb	r3, [r3, #2]
 8006192:	81a2      	strh	r2, [r4, #12]
 8006194:	73a3      	strb	r3, [r4, #14]
					command_found_FLAG = 1;
 8006196:	2301      	movs	r3, #1
 8006198:	75bb      	strb	r3, [r7, #22]
					break;
 800619a:	e04c      	b.n	8006236 <Do_The_Command+0x59a>
				}
				case 0x26:		//OUTP, OUTPUT
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Not applicable");
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	4a29      	ldr	r2, [pc, #164]	; (8006244 <Do_The_Command+0x5a8>)
 80061a0:	461c      	mov	r4, r3
 80061a2:	4613      	mov	r3, r2
 80061a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80061a6:	6020      	str	r0, [r4, #0]
 80061a8:	6061      	str	r1, [r4, #4]
 80061aa:	60a2      	str	r2, [r4, #8]
 80061ac:	881a      	ldrh	r2, [r3, #0]
 80061ae:	789b      	ldrb	r3, [r3, #2]
 80061b0:	81a2      	strh	r2, [r4, #12]
 80061b2:	73a3      	strb	r3, [r4, #14]
					command_found_FLAG = 1;
 80061b4:	2301      	movs	r3, #1
 80061b6:	75bb      	strb	r3, [r7, #22]
					break;
 80061b8:	e03d      	b.n	8006236 <Do_The_Command+0x59a>
				}
				case 0x27:		//STAT, STATUS
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Not applicable");
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	4a21      	ldr	r2, [pc, #132]	; (8006244 <Do_The_Command+0x5a8>)
 80061be:	461c      	mov	r4, r3
 80061c0:	4613      	mov	r3, r2
 80061c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80061c4:	6020      	str	r0, [r4, #0]
 80061c6:	6061      	str	r1, [r4, #4]
 80061c8:	60a2      	str	r2, [r4, #8]
 80061ca:	881a      	ldrh	r2, [r3, #0]
 80061cc:	789b      	ldrb	r3, [r3, #2]
 80061ce:	81a2      	strh	r2, [r4, #12]
 80061d0:	73a3      	strb	r3, [r4, #14]
					command_found_FLAG = 1;
 80061d2:	2301      	movs	r3, #1
 80061d4:	75bb      	strb	r3, [r7, #22]
					break;
 80061d6:	e02e      	b.n	8006236 <Do_The_Command+0x59a>
				}
				case 0x28:		//SYST, SYSTEM
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Not applicable");
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	4a1a      	ldr	r2, [pc, #104]	; (8006244 <Do_The_Command+0x5a8>)
 80061dc:	461c      	mov	r4, r3
 80061de:	4613      	mov	r3, r2
 80061e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80061e2:	6020      	str	r0, [r4, #0]
 80061e4:	6061      	str	r1, [r4, #4]
 80061e6:	60a2      	str	r2, [r4, #8]
 80061e8:	881a      	ldrh	r2, [r3, #0]
 80061ea:	789b      	ldrb	r3, [r3, #2]
 80061ec:	81a2      	strh	r2, [r4, #12]
 80061ee:	73a3      	strb	r3, [r4, #14]
					command_found_FLAG = 1;
 80061f0:	2301      	movs	r3, #1
 80061f2:	75bb      	strb	r3, [r7, #22]
					break;
 80061f4:	e01f      	b.n	8006236 <Do_The_Command+0x59a>
				}
				case 0x29:		//TRIG, TRIGGER
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Not applicable");
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	4a12      	ldr	r2, [pc, #72]	; (8006244 <Do_The_Command+0x5a8>)
 80061fa:	461c      	mov	r4, r3
 80061fc:	4613      	mov	r3, r2
 80061fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006200:	6020      	str	r0, [r4, #0]
 8006202:	6061      	str	r1, [r4, #4]
 8006204:	60a2      	str	r2, [r4, #8]
 8006206:	881a      	ldrh	r2, [r3, #0]
 8006208:	789b      	ldrb	r3, [r3, #2]
 800620a:	81a2      	strh	r2, [r4, #12]
 800620c:	73a3      	strb	r3, [r4, #14]
					command_found_FLAG = 1;
 800620e:	2301      	movs	r3, #1
 8006210:	75bb      	strb	r3, [r7, #22]
					break;
 8006212:	e010      	b.n	8006236 <Do_The_Command+0x59a>
				}
				case 0x2A:		//SET
				{
					errorCode = Set_Command(tableWithMessagePieces, numberOfPieces, CommandNumbers, SCPI_buffer);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	68b9      	ldr	r1, [r7, #8]
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f7ff f982 	bl	8005524 <Set_Command>
 8006220:	4603      	mov	r3, r0
 8006222:	75fb      	strb	r3, [r7, #23]
					command_found_FLAG = 1;
 8006224:	2301      	movs	r3, #1
 8006226:	75bb      	strb	r3, [r7, #22]
					break;
 8006228:	e005      	b.n	8006236 <Do_The_Command+0x59a>
				}
				default:
				{
					errorCode = COMMAND_NOT_RECOGNIZED;
 800622a:	2325      	movs	r3, #37	; 0x25
 800622c:	75fb      	strb	r3, [r7, #23]
					command_found_FLAG = 0;
 800622e:	2300      	movs	r3, #0
 8006230:	75bb      	strb	r3, [r7, #22]
					break;
 8006232:	e000      	b.n	8006236 <Do_The_Command+0x59a>
				}
			}
		}
 8006234:	bf00      	nop
	}

	return errorCode;
 8006236:	7dfb      	ldrb	r3, [r7, #23]
 8006238:	b29b      	uxth	r3, r3
}
 800623a:	4618      	mov	r0, r3
 800623c:	371c      	adds	r7, #28
 800623e:	46bd      	mov	sp, r7
 8006240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006242:	bf00      	nop
 8006244:	08008070 	.word	0x08008070

08006248 <Process_SCPI_Message>:


uint16_t Process_SCPI_Message(const char *MESSAGE, char *SCPI_buffer)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b0e0      	sub	sp, #384	; 0x180
 800624c:	af00      	add	r7, sp, #0
 800624e:	1d3b      	adds	r3, r7, #4
 8006250:	6018      	str	r0, [r3, #0]
 8006252:	463b      	mov	r3, r7
 8006254:	6019      	str	r1, [r3, #0]
	ERROR_CODE errorCode = 0x00;
 8006256:	2300      	movs	r3, #0
 8006258:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
	char messageCopy[MAX_MESSAGE_LENGTH] = "";
 800625c:	2300      	movs	r3, #0
 800625e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006262:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006266:	227c      	movs	r2, #124	; 0x7c
 8006268:	2100      	movs	r1, #0
 800626a:	4618      	mov	r0, r3
 800626c:	f000 ff55 	bl	800711a <memset>
	char tableWithMessagePieces[MAX_NUMBER_OF_PIECES][MAX_LENGTH_OF_A_PIECE] = {""};
 8006270:	f107 0320 	add.w	r3, r7, #32
 8006274:	4618      	mov	r0, r3
 8006276:	23dc      	movs	r3, #220	; 0xdc
 8006278:	461a      	mov	r2, r3
 800627a:	2100      	movs	r1, #0
 800627c:	f000 ff4d 	bl	800711a <memset>
	uint8_t numberOfPieces = 0;
 8006280:	f107 031f 	add.w	r3, r7, #31
 8006284:	2200      	movs	r2, #0
 8006286:	701a      	strb	r2, [r3, #0]
	uint16_t CommandNumbers[MAX_NUMBER_OF_PIECES] = {};
 8006288:	f107 0308 	add.w	r3, r7, #8
 800628c:	2200      	movs	r2, #0
 800628e:	601a      	str	r2, [r3, #0]
 8006290:	605a      	str	r2, [r3, #4]
 8006292:	609a      	str	r2, [r3, #8]
 8006294:	60da      	str	r2, [r3, #12]
 8006296:	611a      	str	r2, [r3, #16]
 8006298:	829a      	strh	r2, [r3, #20]

	strcpy(messageCopy, MESSAGE);
 800629a:	1d3b      	adds	r3, r7, #4
 800629c:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 80062a0:	6819      	ldr	r1, [r3, #0]
 80062a2:	4610      	mov	r0, r2
 80062a4:	f000 ff62 	bl	800716c <strcpy>

	if (0 == errorCode)
 80062a8:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d107      	bne.n	80062c0 <Process_SCPI_Message+0x78>
		/* Sets value of messageLength */
		errorCode = Get_Message_Length(messageCopy);
 80062b0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff f9d5 	bl	8005664 <Get_Message_Length>
 80062ba:	4603      	mov	r3, r0
 80062bc:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f

	if (0 == errorCode)
 80062c0:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d107      	bne.n	80062d8 <Process_SCPI_Message+0x90>
		/* Makes whole message to upper letters (because SCPI standard says that we should be case insensitive!) */
		errorCode = Message_To_Upper_Letters(messageCopy);
 80062c8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7ff f9e5 	bl	800569c <Message_To_Upper_Letters>
 80062d2:	4603      	mov	r3, r0
 80062d4:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f

	if (0 == errorCode)
 80062d8:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10b      	bne.n	80062f8 <Process_SCPI_Message+0xb0>
		/* We cut the received message into pieces (commands). */
		errorCode = Cut_Message_Into_Pieces(messageCopy, tableWithMessagePieces, &numberOfPieces);
 80062e0:	f107 021f 	add.w	r2, r7, #31
 80062e4:	f107 0120 	add.w	r1, r7, #32
 80062e8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7ff fa69 	bl	80057c4 <Cut_Message_Into_Pieces>
 80062f2:	4603      	mov	r3, r0
 80062f4:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f

	if (0 == errorCode)
 80062f8:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10b      	bne.n	8006318 <Process_SCPI_Message+0xd0>
		/* After we get message in pieces we can start recognizing the pieces. This function finds the pieces
		 * in the lists at the top and sets command numbers for them (as there are multiple combinations of
		 * names for the same command <<ex. "volt?" and "voltage?">> and there is just one number for them all.
		 * It allows then to easily operate with switch-case statements, as we can add more recognizable names
		 * with no hassle. */
		errorCode = Recognize_Message(tableWithMessagePieces, &numberOfPieces, CommandNumbers);
 8006300:	f107 0208 	add.w	r2, r7, #8
 8006304:	f107 011f 	add.w	r1, r7, #31
 8006308:	f107 0320 	add.w	r3, r7, #32
 800630c:	4618      	mov	r0, r3
 800630e:	f7ff fc8b 	bl	8005c28 <Recognize_Message>
 8006312:	4603      	mov	r3, r0
 8006314:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f

	if (0 == errorCode)
 8006318:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10c      	bne.n	800633a <Process_SCPI_Message+0xf2>
		/* This function is responsible for doing the recognized commands. They are implemented differently
		 * so please be careful while editing. Some of the functions are declared as extern and defined in
		 * Commands_Fun.c and main.c files. */
		errorCode = Do_The_Command(tableWithMessagePieces, &numberOfPieces, CommandNumbers, SCPI_buffer);
 8006320:	463b      	mov	r3, r7
 8006322:	f107 0208 	add.w	r2, r7, #8
 8006326:	f107 011f 	add.w	r1, r7, #31
 800632a:	f107 0020 	add.w	r0, r7, #32
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f7ff fcb4 	bl	8005c9c <Do_The_Command>
 8006334:	4603      	mov	r3, r0
 8006336:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f

	return errorCode;
 800633a:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 800633e:	b29b      	uxth	r3, r3
}
 8006340:	4618      	mov	r0, r3
 8006342:	f507 77c0 	add.w	r7, r7, #384	; 0x180
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
	...

0800634c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	control_reg[0] = 0x2100;
 8006350:	4b2e      	ldr	r3, [pc, #184]	; (800640c <main+0xc0>)
 8006352:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 8006356:	801a      	strh	r2, [r3, #0]
	phase0_reg[0] = 0xC000;
 8006358:	4b2d      	ldr	r3, [pc, #180]	; (8006410 <main+0xc4>)
 800635a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800635e:	801a      	strh	r2, [r3, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006360:	f7fa fd0c 	bl	8000d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006364:	f000 f868 	bl	8006438 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006368:	f000 fa36 	bl	80067d8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800636c:	f000 f91a 	bl	80065a4 <MX_SPI1_Init>
  MX_DAC1_Init();
 8006370:	f000 f8da 	bl	8006528 <MX_DAC1_Init>
  MX_TIM1_Init();
 8006374:	f000 f954 	bl	8006620 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8006378:	f000 f9fe 	bl	8006778 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, &receiveByte, 1);
 800637c:	2201      	movs	r2, #1
 800637e:	4925      	ldr	r1, [pc, #148]	; (8006414 <main+0xc8>)
 8006380:	4825      	ldr	r0, [pc, #148]	; (8006418 <main+0xcc>)
 8006382:	f7fe f861 	bl	8004448 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8006386:	2108      	movs	r1, #8
 8006388:	4824      	ldr	r0, [pc, #144]	; (800641c <main+0xd0>)
 800638a:	f7fd f87f 	bl	800348c <HAL_TIM_PWM_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800638e:	2100      	movs	r1, #0
 8006390:	4823      	ldr	r0, [pc, #140]	; (8006420 <main+0xd4>)
 8006392:	f7fa feb8 	bl	8001106 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8006396:	2110      	movs	r1, #16
 8006398:	4821      	ldr	r0, [pc, #132]	; (8006420 <main+0xd4>)
 800639a:	f7fa feb4 	bl	8001106 <HAL_DAC_Start>

  PWM_Freq = 10000;
 800639e:	4b21      	ldr	r3, [pc, #132]	; (8006424 <main+0xd8>)
 80063a0:	f242 7210 	movw	r2, #10000	; 0x2710
 80063a4:	601a      	str	r2, [r3, #0]
  PWM_Duty = 25;
 80063a6:	4b20      	ldr	r3, [pc, #128]	; (8006428 <main+0xdc>)
 80063a8:	2219      	movs	r2, #25
 80063aa:	701a      	strb	r2, [r3, #0]

  GeneratePWMSignal(PWM_Duty, PWM_Freq);
 80063ac:	4b1e      	ldr	r3, [pc, #120]	; (8006428 <main+0xdc>)
 80063ae:	781a      	ldrb	r2, [r3, #0]
 80063b0:	4b1c      	ldr	r3, [pc, #112]	; (8006424 <main+0xd8>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4619      	mov	r1, r3
 80063b6:	4610      	mov	r0, r2
 80063b8:	f000 fc08 	bl	8006bcc <GeneratePWMSignal>
  GenerateAD8933Signal(SIN, 10000);
 80063bc:	f242 7110 	movw	r1, #10000	; 0x2710
 80063c0:	2000      	movs	r0, #0
 80063c2:	f000 faf1 	bl	80069a8 <GenerateAD8933Signal>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (setSignalFlag == 1) {
 80063c6:	4b19      	ldr	r3, [pc, #100]	; (800642c <main+0xe0>)
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d109      	bne.n	80063e2 <main+0x96>
		  GenerateAD8933Signal(setSignalType, 10000);
 80063ce:	4b18      	ldr	r3, [pc, #96]	; (8006430 <main+0xe4>)
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	f242 7110 	movw	r1, #10000	; 0x2710
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fae6 	bl	80069a8 <GenerateAD8933Signal>
		  setSignalFlag = 0;
 80063dc:	4b13      	ldr	r3, [pc, #76]	; (800642c <main+0xe0>)
 80063de:	2200      	movs	r2, #0
 80063e0:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, i);
 80063e2:	4b14      	ldr	r3, [pc, #80]	; (8006434 <main+0xe8>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2200      	movs	r2, #0
 80063e8:	2100      	movs	r1, #0
 80063ea:	480d      	ldr	r0, [pc, #52]	; (8006420 <main+0xd4>)
 80063ec:	f7fa fed8 	bl	80011a0 <HAL_DAC_SetValue>
	  i = i + 10;
 80063f0:	4b10      	ldr	r3, [pc, #64]	; (8006434 <main+0xe8>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	330a      	adds	r3, #10
 80063f6:	4a0f      	ldr	r2, [pc, #60]	; (8006434 <main+0xe8>)
 80063f8:	6013      	str	r3, [r2, #0]
	  if (i == 4000)
 80063fa:	4b0e      	ldr	r3, [pc, #56]	; (8006434 <main+0xe8>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8006402:	d1e0      	bne.n	80063c6 <main+0x7a>
	  {
		  i = 0;
 8006404:	4b0b      	ldr	r3, [pc, #44]	; (8006434 <main+0xe8>)
 8006406:	2200      	movs	r2, #0
 8006408:	601a      	str	r2, [r3, #0]
	  if (setSignalFlag == 1) {
 800640a:	e7dc      	b.n	80063c6 <main+0x7a>
 800640c:	200018c8 	.word	0x200018c8
 8006410:	20001a1c 	.word	0x20001a1c
 8006414:	200018ac 	.word	0x200018ac
 8006418:	200018e4 	.word	0x200018e4
 800641c:	20001978 	.word	0x20001978
 8006420:	200018d0 	.word	0x200018d0
 8006424:	20001974 	.word	0x20001974
 8006428:	20001a1e 	.word	0x20001a1e
 800642c:	2000142a 	.word	0x2000142a
 8006430:	200018ca 	.word	0x200018ca
 8006434:	200018b0 	.word	0x200018b0

08006438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b0b8      	sub	sp, #224	; 0xe0
 800643c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800643e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006442:	2244      	movs	r2, #68	; 0x44
 8006444:	2100      	movs	r1, #0
 8006446:	4618      	mov	r0, r3
 8006448:	f000 fe67 	bl	800711a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800644c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006450:	2200      	movs	r2, #0
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	605a      	str	r2, [r3, #4]
 8006456:	609a      	str	r2, [r3, #8]
 8006458:	60da      	str	r2, [r3, #12]
 800645a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800645c:	463b      	mov	r3, r7
 800645e:	2288      	movs	r2, #136	; 0x88
 8006460:	2100      	movs	r1, #0
 8006462:	4618      	mov	r0, r3
 8006464:	f000 fe59 	bl	800711a <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8006468:	2310      	movs	r3, #16
 800646a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800646e:	2301      	movs	r3, #1
 8006470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8006474:	2300      	movs	r3, #0
 8006476:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800647a:	2360      	movs	r3, #96	; 0x60
 800647c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006480:	2302      	movs	r3, #2
 8006482:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8006486:	2301      	movs	r3, #1
 8006488:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800648c:	2301      	movs	r3, #1
 800648e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 32;
 8006492:	2320      	movs	r3, #32
 8006494:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8006498:	2307      	movs	r3, #7
 800649a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800649e:	2302      	movs	r3, #2
 80064a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80064a4:	2302      	movs	r3, #2
 80064a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80064aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fb fa1a 	bl	80018e8 <HAL_RCC_OscConfig>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <SystemClock_Config+0x86>
  {
    Error_Handler();
 80064ba:	f000 fba7 	bl	8006c0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80064be:	230f      	movs	r3, #15
 80064c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80064c4:	2303      	movs	r3, #3
 80064c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80064ca:	2300      	movs	r3, #0
 80064cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80064d0:	2300      	movs	r3, #0
 80064d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80064d6:	2300      	movs	r3, #0
 80064d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80064dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80064e0:	2103      	movs	r1, #3
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fb fdb0 	bl	8002048 <HAL_RCC_ClockConfig>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80064ee:	f000 fb8d 	bl	8006c0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80064f2:	2304      	movs	r3, #4
 80064f4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80064f6:	2300      	movs	r3, #0
 80064f8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80064fa:	463b      	mov	r3, r7
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fb ffa7 	bl	8002450 <HAL_RCCEx_PeriphCLKConfig>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8006508:	f000 fb80 	bl	8006c0c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800650c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006510:	f7fb f994 	bl	800183c <HAL_PWREx_ControlVoltageScaling>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800651a:	f000 fb77 	bl	8006c0c <Error_Handler>
  }
}
 800651e:	bf00      	nop
 8006520:	37e0      	adds	r7, #224	; 0xe0
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
	...

08006528 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b08a      	sub	sp, #40	; 0x28
 800652c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800652e:	1d3b      	adds	r3, r7, #4
 8006530:	2224      	movs	r2, #36	; 0x24
 8006532:	2100      	movs	r1, #0
 8006534:	4618      	mov	r0, r3
 8006536:	f000 fdf0 	bl	800711a <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800653a:	4b18      	ldr	r3, [pc, #96]	; (800659c <MX_DAC1_Init+0x74>)
 800653c:	4a18      	ldr	r2, [pc, #96]	; (80065a0 <MX_DAC1_Init+0x78>)
 800653e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006540:	4816      	ldr	r0, [pc, #88]	; (800659c <MX_DAC1_Init+0x74>)
 8006542:	f7fa fdbe 	bl	80010c2 <HAL_DAC_Init>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d001      	beq.n	8006550 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800654c:	f000 fb5e 	bl	8006c0c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006550:	2300      	movs	r3, #0
 8006552:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006554:	2300      	movs	r3, #0
 8006556:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006558:	2300      	movs	r3, #0
 800655a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800655c:	2300      	movs	r3, #0
 800655e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006560:	2300      	movs	r3, #0
 8006562:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006564:	1d3b      	adds	r3, r7, #4
 8006566:	2200      	movs	r2, #0
 8006568:	4619      	mov	r1, r3
 800656a:	480c      	ldr	r0, [pc, #48]	; (800659c <MX_DAC1_Init+0x74>)
 800656c:	f7fa fe3d 	bl	80011ea <HAL_DAC_ConfigChannel>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8006576:	f000 fb49 	bl	8006c0c <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800657a:	2300      	movs	r3, #0
 800657c:	613b      	str	r3, [r7, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800657e:	1d3b      	adds	r3, r7, #4
 8006580:	2210      	movs	r2, #16
 8006582:	4619      	mov	r1, r3
 8006584:	4805      	ldr	r0, [pc, #20]	; (800659c <MX_DAC1_Init+0x74>)
 8006586:	f7fa fe30 	bl	80011ea <HAL_DAC_ConfigChannel>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8006590:	f000 fb3c 	bl	8006c0c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8006594:	bf00      	nop
 8006596:	3728      	adds	r7, #40	; 0x28
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	200018d0 	.word	0x200018d0
 80065a0:	40007400 	.word	0x40007400

080065a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80065a8:	4b1b      	ldr	r3, [pc, #108]	; (8006618 <MX_SPI1_Init+0x74>)
 80065aa:	4a1c      	ldr	r2, [pc, #112]	; (800661c <MX_SPI1_Init+0x78>)
 80065ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80065ae:	4b1a      	ldr	r3, [pc, #104]	; (8006618 <MX_SPI1_Init+0x74>)
 80065b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80065b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80065b6:	4b18      	ldr	r3, [pc, #96]	; (8006618 <MX_SPI1_Init+0x74>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80065bc:	4b16      	ldr	r3, [pc, #88]	; (8006618 <MX_SPI1_Init+0x74>)
 80065be:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80065c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80065c4:	4b14      	ldr	r3, [pc, #80]	; (8006618 <MX_SPI1_Init+0x74>)
 80065c6:	2202      	movs	r2, #2
 80065c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80065ca:	4b13      	ldr	r3, [pc, #76]	; (8006618 <MX_SPI1_Init+0x74>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80065d0:	4b11      	ldr	r3, [pc, #68]	; (8006618 <MX_SPI1_Init+0x74>)
 80065d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80065d8:	4b0f      	ldr	r3, [pc, #60]	; (8006618 <MX_SPI1_Init+0x74>)
 80065da:	2238      	movs	r2, #56	; 0x38
 80065dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80065de:	4b0e      	ldr	r3, [pc, #56]	; (8006618 <MX_SPI1_Init+0x74>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80065e4:	4b0c      	ldr	r3, [pc, #48]	; (8006618 <MX_SPI1_Init+0x74>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065ea:	4b0b      	ldr	r3, [pc, #44]	; (8006618 <MX_SPI1_Init+0x74>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80065f0:	4b09      	ldr	r3, [pc, #36]	; (8006618 <MX_SPI1_Init+0x74>)
 80065f2:	2207      	movs	r2, #7
 80065f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80065f6:	4b08      	ldr	r3, [pc, #32]	; (8006618 <MX_SPI1_Init+0x74>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80065fc:	4b06      	ldr	r3, [pc, #24]	; (8006618 <MX_SPI1_Init+0x74>)
 80065fe:	2200      	movs	r2, #0
 8006600:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006602:	4805      	ldr	r0, [pc, #20]	; (8006618 <MX_SPI1_Init+0x74>)
 8006604:	f7fc fbd4 	bl	8002db0 <HAL_SPI_Init>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800660e:	f000 fafd 	bl	8006c0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006612:	bf00      	nop
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	200019b8 	.word	0x200019b8
 800661c:	40013000 	.word	0x40013000

08006620 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b09a      	sub	sp, #104	; 0x68
 8006624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006626:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	605a      	str	r2, [r3, #4]
 8006630:	609a      	str	r2, [r3, #8]
 8006632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006634:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	605a      	str	r2, [r3, #4]
 800663e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006640:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006644:	2200      	movs	r2, #0
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	605a      	str	r2, [r3, #4]
 800664a:	609a      	str	r2, [r3, #8]
 800664c:	60da      	str	r2, [r3, #12]
 800664e:	611a      	str	r2, [r3, #16]
 8006650:	615a      	str	r2, [r3, #20]
 8006652:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006654:	1d3b      	adds	r3, r7, #4
 8006656:	222c      	movs	r2, #44	; 0x2c
 8006658:	2100      	movs	r1, #0
 800665a:	4618      	mov	r0, r3
 800665c:	f000 fd5d 	bl	800711a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006660:	4b43      	ldr	r3, [pc, #268]	; (8006770 <MX_TIM1_Init+0x150>)
 8006662:	4a44      	ldr	r2, [pc, #272]	; (8006774 <MX_TIM1_Init+0x154>)
 8006664:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006666:	4b42      	ldr	r3, [pc, #264]	; (8006770 <MX_TIM1_Init+0x150>)
 8006668:	2200      	movs	r2, #0
 800666a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800666c:	4b40      	ldr	r3, [pc, #256]	; (8006770 <MX_TIM1_Init+0x150>)
 800666e:	2200      	movs	r2, #0
 8006670:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8006672:	4b3f      	ldr	r3, [pc, #252]	; (8006770 <MX_TIM1_Init+0x150>)
 8006674:	2263      	movs	r2, #99	; 0x63
 8006676:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006678:	4b3d      	ldr	r3, [pc, #244]	; (8006770 <MX_TIM1_Init+0x150>)
 800667a:	2200      	movs	r2, #0
 800667c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800667e:	4b3c      	ldr	r3, [pc, #240]	; (8006770 <MX_TIM1_Init+0x150>)
 8006680:	2200      	movs	r2, #0
 8006682:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006684:	4b3a      	ldr	r3, [pc, #232]	; (8006770 <MX_TIM1_Init+0x150>)
 8006686:	2200      	movs	r2, #0
 8006688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800668a:	4839      	ldr	r0, [pc, #228]	; (8006770 <MX_TIM1_Init+0x150>)
 800668c:	f7fc fe9d 	bl	80033ca <HAL_TIM_Base_Init>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8006696:	f000 fab9 	bl	8006c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800669a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800669e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80066a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80066a4:	4619      	mov	r1, r3
 80066a6:	4832      	ldr	r0, [pc, #200]	; (8006770 <MX_TIM1_Init+0x150>)
 80066a8:	f7fd f860 	bl	800376c <HAL_TIM_ConfigClockSource>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80066b2:	f000 faab 	bl	8006c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80066b6:	482e      	ldr	r0, [pc, #184]	; (8006770 <MX_TIM1_Init+0x150>)
 80066b8:	f7fc feb2 	bl	8003420 <HAL_TIM_PWM_Init>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80066c2:	f000 faa3 	bl	8006c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066c6:	2300      	movs	r3, #0
 80066c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80066ca:	2300      	movs	r3, #0
 80066cc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066ce:	2300      	movs	r3, #0
 80066d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80066d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80066d6:	4619      	mov	r1, r3
 80066d8:	4825      	ldr	r0, [pc, #148]	; (8006770 <MX_TIM1_Init+0x150>)
 80066da:	f7fd fd31 	bl	8004140 <HAL_TIMEx_MasterConfigSynchronization>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80066e4:	f000 fa92 	bl	8006c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80066e8:	2360      	movs	r3, #96	; 0x60
 80066ea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80066ec:	2300      	movs	r3, #0
 80066ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80066f0:	2300      	movs	r3, #0
 80066f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80066f4:	2300      	movs	r3, #0
 80066f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80066f8:	2300      	movs	r3, #0
 80066fa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80066fc:	2300      	movs	r3, #0
 80066fe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006700:	2300      	movs	r3, #0
 8006702:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006704:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006708:	2208      	movs	r2, #8
 800670a:	4619      	mov	r1, r3
 800670c:	4818      	ldr	r0, [pc, #96]	; (8006770 <MX_TIM1_Init+0x150>)
 800670e:	f7fc ff15 	bl	800353c <HAL_TIM_PWM_ConfigChannel>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8006718:	f000 fa78 	bl	8006c0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800671c:	2300      	movs	r3, #0
 800671e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006720:	2300      	movs	r3, #0
 8006722:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006724:	2300      	movs	r3, #0
 8006726:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006728:	2300      	movs	r3, #0
 800672a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800672c:	2300      	movs	r3, #0
 800672e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006734:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8006736:	2300      	movs	r3, #0
 8006738:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800673a:	2300      	movs	r3, #0
 800673c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800673e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8006744:	2300      	movs	r3, #0
 8006746:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006748:	2300      	movs	r3, #0
 800674a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800674c:	1d3b      	adds	r3, r7, #4
 800674e:	4619      	mov	r1, r3
 8006750:	4807      	ldr	r0, [pc, #28]	; (8006770 <MX_TIM1_Init+0x150>)
 8006752:	f7fd fd51 	bl	80041f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d001      	beq.n	8006760 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800675c:	f000 fa56 	bl	8006c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006760:	4803      	ldr	r0, [pc, #12]	; (8006770 <MX_TIM1_Init+0x150>)
 8006762:	f000 fb3d 	bl	8006de0 <HAL_TIM_MspPostInit>

}
 8006766:	bf00      	nop
 8006768:	3768      	adds	r7, #104	; 0x68
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20001978 	.word	0x20001978
 8006774:	40012c00 	.word	0x40012c00

08006778 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800677c:	4b14      	ldr	r3, [pc, #80]	; (80067d0 <MX_USART3_UART_Init+0x58>)
 800677e:	4a15      	ldr	r2, [pc, #84]	; (80067d4 <MX_USART3_UART_Init+0x5c>)
 8006780:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8006782:	4b13      	ldr	r3, [pc, #76]	; (80067d0 <MX_USART3_UART_Init+0x58>)
 8006784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006788:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800678a:	4b11      	ldr	r3, [pc, #68]	; (80067d0 <MX_USART3_UART_Init+0x58>)
 800678c:	2200      	movs	r2, #0
 800678e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006790:	4b0f      	ldr	r3, [pc, #60]	; (80067d0 <MX_USART3_UART_Init+0x58>)
 8006792:	2200      	movs	r2, #0
 8006794:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006796:	4b0e      	ldr	r3, [pc, #56]	; (80067d0 <MX_USART3_UART_Init+0x58>)
 8006798:	2200      	movs	r2, #0
 800679a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800679c:	4b0c      	ldr	r3, [pc, #48]	; (80067d0 <MX_USART3_UART_Init+0x58>)
 800679e:	220c      	movs	r2, #12
 80067a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067a2:	4b0b      	ldr	r3, [pc, #44]	; (80067d0 <MX_USART3_UART_Init+0x58>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80067a8:	4b09      	ldr	r3, [pc, #36]	; (80067d0 <MX_USART3_UART_Init+0x58>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80067ae:	4b08      	ldr	r3, [pc, #32]	; (80067d0 <MX_USART3_UART_Init+0x58>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80067b4:	4b06      	ldr	r3, [pc, #24]	; (80067d0 <MX_USART3_UART_Init+0x58>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80067ba:	4805      	ldr	r0, [pc, #20]	; (80067d0 <MX_USART3_UART_Init+0x58>)
 80067bc:	f7fd fd9a 	bl	80042f4 <HAL_UART_Init>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80067c6:	f000 fa21 	bl	8006c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80067ca:	bf00      	nop
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	200018e4 	.word	0x200018e4
 80067d4:	40004800 	.word	0x40004800

080067d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08a      	sub	sp, #40	; 0x28
 80067dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067de:	f107 0314 	add.w	r3, r7, #20
 80067e2:	2200      	movs	r2, #0
 80067e4:	601a      	str	r2, [r3, #0]
 80067e6:	605a      	str	r2, [r3, #4]
 80067e8:	609a      	str	r2, [r3, #8]
 80067ea:	60da      	str	r2, [r3, #12]
 80067ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80067ee:	4b24      	ldr	r3, [pc, #144]	; (8006880 <MX_GPIO_Init+0xa8>)
 80067f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067f2:	4a23      	ldr	r2, [pc, #140]	; (8006880 <MX_GPIO_Init+0xa8>)
 80067f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067fa:	4b21      	ldr	r3, [pc, #132]	; (8006880 <MX_GPIO_Init+0xa8>)
 80067fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006802:	613b      	str	r3, [r7, #16]
 8006804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006806:	4b1e      	ldr	r3, [pc, #120]	; (8006880 <MX_GPIO_Init+0xa8>)
 8006808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800680a:	4a1d      	ldr	r2, [pc, #116]	; (8006880 <MX_GPIO_Init+0xa8>)
 800680c:	f043 0301 	orr.w	r3, r3, #1
 8006810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006812:	4b1b      	ldr	r3, [pc, #108]	; (8006880 <MX_GPIO_Init+0xa8>)
 8006814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	60fb      	str	r3, [r7, #12]
 800681c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800681e:	4b18      	ldr	r3, [pc, #96]	; (8006880 <MX_GPIO_Init+0xa8>)
 8006820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006822:	4a17      	ldr	r2, [pc, #92]	; (8006880 <MX_GPIO_Init+0xa8>)
 8006824:	f043 0304 	orr.w	r3, r3, #4
 8006828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800682a:	4b15      	ldr	r3, [pc, #84]	; (8006880 <MX_GPIO_Init+0xa8>)
 800682c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800682e:	f003 0304 	and.w	r3, r3, #4
 8006832:	60bb      	str	r3, [r7, #8]
 8006834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006836:	4b12      	ldr	r3, [pc, #72]	; (8006880 <MX_GPIO_Init+0xa8>)
 8006838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800683a:	4a11      	ldr	r2, [pc, #68]	; (8006880 <MX_GPIO_Init+0xa8>)
 800683c:	f043 0302 	orr.w	r3, r3, #2
 8006840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006842:	4b0f      	ldr	r3, [pc, #60]	; (8006880 <MX_GPIO_Init+0xa8>)
 8006844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006846:	f003 0302 	and.w	r3, r3, #2
 800684a:	607b      	str	r3, [r7, #4]
 800684c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800684e:	2200      	movs	r2, #0
 8006850:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006854:	480b      	ldr	r0, [pc, #44]	; (8006884 <MX_GPIO_Init+0xac>)
 8006856:	f7fa ffcb 	bl	80017f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800685a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800685e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006860:	2301      	movs	r3, #1
 8006862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006864:	2300      	movs	r3, #0
 8006866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006868:	2300      	movs	r3, #0
 800686a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800686c:	f107 0314 	add.w	r3, r7, #20
 8006870:	4619      	mov	r1, r3
 8006872:	4804      	ldr	r0, [pc, #16]	; (8006884 <MX_GPIO_Init+0xac>)
 8006874:	f7fa fe14 	bl	80014a0 <HAL_GPIO_Init>

}
 8006878:	bf00      	nop
 800687a:	3728      	adds	r7, #40	; 0x28
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	40021000 	.word	0x40021000
 8006884:	48000400 	.word	0x48000400

08006888 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8006888:	b590      	push	{r4, r7, lr}
 800688a:	b089      	sub	sp, #36	; 0x24
 800688c:	af02      	add	r7, sp, #8
 800688e:	6078      	str	r0, [r7, #4]
		ERROR_CODE errorCode = 0x00;
 8006890:	2300      	movs	r3, #0
 8006892:	757b      	strb	r3, [r7, #21]
		static uint16_t counter = 0;
		static uint8_t FLAG_needsCleaning = 0;
		uint16_t size = 0;
 8006894:	2300      	movs	r3, #0
 8006896:	82fb      	strh	r3, [r7, #22]
		char sin[] = "SIN";
 8006898:	4b38      	ldr	r3, [pc, #224]	; (800697c <HAL_UART_RxCpltCallback+0xf4>)
 800689a:	613b      	str	r3, [r7, #16]
		char tri[] = "TRI";
 800689c:	4b38      	ldr	r3, [pc, #224]	; (8006980 <HAL_UART_RxCpltCallback+0xf8>)
 800689e:	60fb      	str	r3, [r7, #12]

		if (1 == FLAG_needsCleaning)
 80068a0:	4b38      	ldr	r3, [pc, #224]	; (8006984 <HAL_UART_RxCpltCallback+0xfc>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d113      	bne.n	80068d0 <HAL_UART_RxCpltCallback+0x48>
		{
			memset(receive_buffer,'\0',(MAX_RECEIVE_BUFFER_SIZE*sizeof(receive_buffer[0])));
 80068a8:	2280      	movs	r2, #128	; 0x80
 80068aa:	2100      	movs	r1, #0
 80068ac:	4836      	ldr	r0, [pc, #216]	; (8006988 <HAL_UART_RxCpltCallback+0x100>)
 80068ae:	f000 fc34 	bl	800711a <memset>
			memset(send_buffer,'\0',(MAX_SEND_BUFFER_SIZE*sizeof(send_buffer[0])));
 80068b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068b6:	2100      	movs	r1, #0
 80068b8:	4834      	ldr	r0, [pc, #208]	; (800698c <HAL_UART_RxCpltCallback+0x104>)
 80068ba:	f000 fc2e 	bl	800711a <memset>
			memset(SCPI_buffer,'\0',(MAX_SCPI_ANSWER_BUFFER_SIZE*sizeof(SCPI_buffer[0])));
 80068be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068c2:	2100      	movs	r1, #0
 80068c4:	4832      	ldr	r0, [pc, #200]	; (8006990 <HAL_UART_RxCpltCallback+0x108>)
 80068c6:	f000 fc28 	bl	800711a <memset>
			FLAG_needsCleaning = 0;
 80068ca:	4b2e      	ldr	r3, [pc, #184]	; (8006984 <HAL_UART_RxCpltCallback+0xfc>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	701a      	strb	r2, [r3, #0]
		}

		if ('\r' != receiveByte && '\n' != receiveByte)
 80068d0:	4b30      	ldr	r3, [pc, #192]	; (8006994 <HAL_UART_RxCpltCallback+0x10c>)
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b0d      	cmp	r3, #13
 80068d8:	d017      	beq.n	800690a <HAL_UART_RxCpltCallback+0x82>
 80068da:	4b2e      	ldr	r3, [pc, #184]	; (8006994 <HAL_UART_RxCpltCallback+0x10c>)
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b0a      	cmp	r3, #10
 80068e2:	d012      	beq.n	800690a <HAL_UART_RxCpltCallback+0x82>
		{
			if (counter <= MAX_RECEIVE_BUFFER_SIZE)
 80068e4:	4b2c      	ldr	r3, [pc, #176]	; (8006998 <HAL_UART_RxCpltCallback+0x110>)
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	2b80      	cmp	r3, #128	; 0x80
 80068ea:	d807      	bhi.n	80068fc <HAL_UART_RxCpltCallback+0x74>
			{
				receive_buffer[counter] = receiveByte;
 80068ec:	4b2a      	ldr	r3, [pc, #168]	; (8006998 <HAL_UART_RxCpltCallback+0x110>)
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	461a      	mov	r2, r3
 80068f2:	4b28      	ldr	r3, [pc, #160]	; (8006994 <HAL_UART_RxCpltCallback+0x10c>)
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	b2d9      	uxtb	r1, r3
 80068f8:	4b23      	ldr	r3, [pc, #140]	; (8006988 <HAL_UART_RxCpltCallback+0x100>)
 80068fa:	5499      	strb	r1, [r3, r2]
			}
			++counter;
 80068fc:	4b26      	ldr	r3, [pc, #152]	; (8006998 <HAL_UART_RxCpltCallback+0x110>)
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	3301      	adds	r3, #1
 8006902:	b29a      	uxth	r2, r3
 8006904:	4b24      	ldr	r3, [pc, #144]	; (8006998 <HAL_UART_RxCpltCallback+0x110>)
 8006906:	801a      	strh	r2, [r3, #0]
 8006908:	e02e      	b.n	8006968 <HAL_UART_RxCpltCallback+0xe0>
		}

		else
		{
			errorCode = Process_SCPI_Message(receive_buffer, SCPI_buffer);
 800690a:	4921      	ldr	r1, [pc, #132]	; (8006990 <HAL_UART_RxCpltCallback+0x108>)
 800690c:	481e      	ldr	r0, [pc, #120]	; (8006988 <HAL_UART_RxCpltCallback+0x100>)
 800690e:	f7ff fc9b 	bl	8006248 <Process_SCPI_Message>
 8006912:	4603      	mov	r3, r0
 8006914:	757b      	strb	r3, [r7, #21]
			if(0 == errorCode)
 8006916:	7d7b      	ldrb	r3, [r7, #21]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d108      	bne.n	800692e <HAL_UART_RxCpltCallback+0xa6>
				size = sprintf(send_buffer, "Message correct!: \"%s\".\n\r%s\n\r", receive_buffer,SCPI_buffer);
 800691c:	4b1c      	ldr	r3, [pc, #112]	; (8006990 <HAL_UART_RxCpltCallback+0x108>)
 800691e:	4a1a      	ldr	r2, [pc, #104]	; (8006988 <HAL_UART_RxCpltCallback+0x100>)
 8006920:	491e      	ldr	r1, [pc, #120]	; (800699c <HAL_UART_RxCpltCallback+0x114>)
 8006922:	481a      	ldr	r0, [pc, #104]	; (800698c <HAL_UART_RxCpltCallback+0x104>)
 8006924:	f000 fc02 	bl	800712c <siprintf>
 8006928:	4603      	mov	r3, r0
 800692a:	82fb      	strh	r3, [r7, #22]
 800692c:	e010      	b.n	8006950 <HAL_UART_RxCpltCallback+0xc8>
			else
				size = sprintf(send_buffer, "!!Message incorrect!! \n\rError Code: (%d) %s \n\rReceived message: \"%s\"\n\r", errorCode, Return_Error_Description(errorCode), receive_buffer);
 800692e:	7d7c      	ldrb	r4, [r7, #21]
 8006930:	7d7b      	ldrb	r3, [r7, #21]
 8006932:	b29b      	uxth	r3, r3
 8006934:	4618      	mov	r0, r3
 8006936:	f7fe fe03 	bl	8005540 <Return_Error_Description>
 800693a:	4602      	mov	r2, r0
 800693c:	4b12      	ldr	r3, [pc, #72]	; (8006988 <HAL_UART_RxCpltCallback+0x100>)
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	4613      	mov	r3, r2
 8006942:	4622      	mov	r2, r4
 8006944:	4916      	ldr	r1, [pc, #88]	; (80069a0 <HAL_UART_RxCpltCallback+0x118>)
 8006946:	4811      	ldr	r0, [pc, #68]	; (800698c <HAL_UART_RxCpltCallback+0x104>)
 8006948:	f000 fbf0 	bl	800712c <siprintf>
 800694c:	4603      	mov	r3, r0
 800694e:	82fb      	strh	r3, [r7, #22]

			HAL_UART_Transmit_IT(&huart3, send_buffer, size);
 8006950:	8afb      	ldrh	r3, [r7, #22]
 8006952:	461a      	mov	r2, r3
 8006954:	490d      	ldr	r1, [pc, #52]	; (800698c <HAL_UART_RxCpltCallback+0x104>)
 8006956:	4813      	ldr	r0, [pc, #76]	; (80069a4 <HAL_UART_RxCpltCallback+0x11c>)
 8006958:	f7fd fd1a 	bl	8004390 <HAL_UART_Transmit_IT>
			counter = 0;
 800695c:	4b0e      	ldr	r3, [pc, #56]	; (8006998 <HAL_UART_RxCpltCallback+0x110>)
 800695e:	2200      	movs	r2, #0
 8006960:	801a      	strh	r2, [r3, #0]
			FLAG_needsCleaning = 1;
 8006962:	4b08      	ldr	r3, [pc, #32]	; (8006984 <HAL_UART_RxCpltCallback+0xfc>)
 8006964:	2201      	movs	r2, #1
 8006966:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart3, &receiveByte, 1);
 8006968:	2201      	movs	r2, #1
 800696a:	490a      	ldr	r1, [pc, #40]	; (8006994 <HAL_UART_RxCpltCallback+0x10c>)
 800696c:	480d      	ldr	r0, [pc, #52]	; (80069a4 <HAL_UART_RxCpltCallback+0x11c>)
 800696e:	f7fd fd6b 	bl	8004448 <HAL_UART_Receive_IT>
}
 8006972:	bf00      	nop
 8006974:	371c      	adds	r7, #28
 8006976:	46bd      	mov	sp, r7
 8006978:	bd90      	pop	{r4, r7, pc}
 800697a:	bf00      	nop
 800697c:	004e4953 	.word	0x004e4953
 8006980:	00495254 	.word	0x00495254
 8006984:	200018b4 	.word	0x200018b4
 8006988:	2000142c 	.word	0x2000142c
 800698c:	200014ac 	.word	0x200014ac
 8006990:	200016ac 	.word	0x200016ac
 8006994:	200018ac 	.word	0x200018ac
 8006998:	200018b6 	.word	0x200018b6
 800699c:	08008080 	.word	0x08008080
 80069a0:	080080a0 	.word	0x080080a0
 80069a4:	200018e4 	.word	0x200018e4

080069a8 <GenerateAD8933Signal>:

void GenerateAD8933Signal(signal_type_T signal_type, uint32_t freq)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	4603      	mov	r3, r0
 80069b0:	6039      	str	r1, [r7, #0]
 80069b2:	71fb      	strb	r3, [r7, #7]
	SetSignalType(signal_type);
 80069b4:	79fb      	ldrb	r3, [r7, #7]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 f88c 	bl	8006ad4 <SetSignalType>
	CalculateFrequency(freq);
 80069bc:	6838      	ldr	r0, [r7, #0]
 80069be:	f000 f8c7 	bl	8006b50 <CalculateFrequency>

    exit_reg[0] = control_reg[0] & 0xEFF;
 80069c2:	4b3d      	ldr	r3, [pc, #244]	; (8006ab8 <GenerateAD8933Signal+0x110>)
 80069c4:	881a      	ldrh	r2, [r3, #0]
 80069c6:	f640 63ff 	movw	r3, #3839	; 0xeff
 80069ca:	4013      	ands	r3, r2
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	4b3b      	ldr	r3, [pc, #236]	; (8006abc <GenerateAD8933Signal+0x114>)
 80069d0:	801a      	strh	r2, [r3, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80069d2:	2200      	movs	r2, #0
 80069d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80069d8:	4839      	ldr	r0, [pc, #228]	; (8006ac0 <GenerateAD8933Signal+0x118>)
 80069da:	f7fa ff09 	bl	80017f0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)control_reg, 1, HAL_MAX_DELAY);
 80069de:	f04f 33ff 	mov.w	r3, #4294967295
 80069e2:	2201      	movs	r2, #1
 80069e4:	4934      	ldr	r1, [pc, #208]	; (8006ab8 <GenerateAD8933Signal+0x110>)
 80069e6:	4837      	ldr	r0, [pc, #220]	; (8006ac4 <GenerateAD8933Signal+0x11c>)
 80069e8:	f7fc fa6c 	bl	8002ec4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80069ec:	2201      	movs	r2, #1
 80069ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80069f2:	4833      	ldr	r0, [pc, #204]	; (8006ac0 <GenerateAD8933Signal+0x118>)
 80069f4:	f7fa fefc 	bl	80017f0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80069f8:	200a      	movs	r0, #10
 80069fa:	f7fa fa2f 	bl	8000e5c <HAL_Delay>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80069fe:	2200      	movs	r2, #0
 8006a00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a04:	482e      	ldr	r0, [pc, #184]	; (8006ac0 <GenerateAD8933Signal+0x118>)
 8006a06:	f7fa fef3 	bl	80017f0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)freq0_reg_lsb, 1, HAL_MAX_DELAY);
 8006a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a0e:	2201      	movs	r2, #1
 8006a10:	492d      	ldr	r1, [pc, #180]	; (8006ac8 <GenerateAD8933Signal+0x120>)
 8006a12:	482c      	ldr	r0, [pc, #176]	; (8006ac4 <GenerateAD8933Signal+0x11c>)
 8006a14:	f7fc fa56 	bl	8002ec4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a1e:	4828      	ldr	r0, [pc, #160]	; (8006ac0 <GenerateAD8933Signal+0x118>)
 8006a20:	f7fa fee6 	bl	80017f0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8006a24:	200a      	movs	r0, #10
 8006a26:	f7fa fa19 	bl	8000e5c <HAL_Delay>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a30:	4823      	ldr	r0, [pc, #140]	; (8006ac0 <GenerateAD8933Signal+0x118>)
 8006a32:	f7fa fedd 	bl	80017f0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)freq0_reg_msb, 1, HAL_MAX_DELAY);
 8006a36:	f04f 33ff 	mov.w	r3, #4294967295
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	4923      	ldr	r1, [pc, #140]	; (8006acc <GenerateAD8933Signal+0x124>)
 8006a3e:	4821      	ldr	r0, [pc, #132]	; (8006ac4 <GenerateAD8933Signal+0x11c>)
 8006a40:	f7fc fa40 	bl	8002ec4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8006a44:	2201      	movs	r2, #1
 8006a46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a4a:	481d      	ldr	r0, [pc, #116]	; (8006ac0 <GenerateAD8933Signal+0x118>)
 8006a4c:	f7fa fed0 	bl	80017f0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8006a50:	200a      	movs	r0, #10
 8006a52:	f7fa fa03 	bl	8000e5c <HAL_Delay>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8006a56:	2200      	movs	r2, #0
 8006a58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a5c:	4818      	ldr	r0, [pc, #96]	; (8006ac0 <GenerateAD8933Signal+0x118>)
 8006a5e:	f7fa fec7 	bl	80017f0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)phase0_reg, 1, HAL_MAX_DELAY);
 8006a62:	f04f 33ff 	mov.w	r3, #4294967295
 8006a66:	2201      	movs	r2, #1
 8006a68:	4919      	ldr	r1, [pc, #100]	; (8006ad0 <GenerateAD8933Signal+0x128>)
 8006a6a:	4816      	ldr	r0, [pc, #88]	; (8006ac4 <GenerateAD8933Signal+0x11c>)
 8006a6c:	f7fc fa2a 	bl	8002ec4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8006a70:	2201      	movs	r2, #1
 8006a72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a76:	4812      	ldr	r0, [pc, #72]	; (8006ac0 <GenerateAD8933Signal+0x118>)
 8006a78:	f7fa feba 	bl	80017f0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8006a7c:	200a      	movs	r0, #10
 8006a7e:	f7fa f9ed 	bl	8000e5c <HAL_Delay>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8006a82:	2200      	movs	r2, #0
 8006a84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a88:	480d      	ldr	r0, [pc, #52]	; (8006ac0 <GenerateAD8933Signal+0x118>)
 8006a8a:	f7fa feb1 	bl	80017f0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)exit_reg, 1, HAL_MAX_DELAY);
 8006a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a92:	2201      	movs	r2, #1
 8006a94:	4909      	ldr	r1, [pc, #36]	; (8006abc <GenerateAD8933Signal+0x114>)
 8006a96:	480b      	ldr	r0, [pc, #44]	; (8006ac4 <GenerateAD8933Signal+0x11c>)
 8006a98:	f7fc fa14 	bl	8002ec4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006aa2:	4807      	ldr	r0, [pc, #28]	; (8006ac0 <GenerateAD8933Signal+0x118>)
 8006aa4:	f7fa fea4 	bl	80017f0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8006aa8:	200a      	movs	r0, #10
 8006aaa:	f7fa f9d7 	bl	8000e5c <HAL_Delay>
}
 8006aae:	bf00      	nop
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	200018c8 	.word	0x200018c8
 8006abc:	20001968 	.word	0x20001968
 8006ac0:	48000400 	.word	0x48000400
 8006ac4:	200019b8 	.word	0x200019b8
 8006ac8:	20001230 	.word	0x20001230
 8006acc:	20001234 	.word	0x20001234
 8006ad0:	20001a1c 	.word	0x20001a1c

08006ad4 <SetSignalType>:

void SetSignalType(signal_type_T signal_type)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	4603      	mov	r3, r0
 8006adc:	71fb      	strb	r3, [r7, #7]
  if (signal_type == SIN)
 8006ade:	79fb      	ldrb	r3, [r7, #7]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d107      	bne.n	8006af4 <SetSignalType+0x20>
  {
    control_reg[0] &= ~(0b100010);
 8006ae4:	4b18      	ldr	r3, [pc, #96]	; (8006b48 <SetSignalType+0x74>)
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	4b16      	ldr	r3, [pc, #88]	; (8006b48 <SetSignalType+0x74>)
 8006af0:	801a      	strh	r2, [r3, #0]
  else if (signal_type == SQUARE)
  {
    control_reg[0] &= ~(0b10);
    control_reg[0] |= 0b101000;
  }
}
 8006af2:	e022      	b.n	8006b3a <SetSignalType+0x66>
  else if (signal_type == TRIANGLE)
 8006af4:	79fb      	ldrb	r3, [r7, #7]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d10e      	bne.n	8006b18 <SetSignalType+0x44>
    control_reg[0] &= ~(0b100000);
 8006afa:	4b13      	ldr	r3, [pc, #76]	; (8006b48 <SetSignalType+0x74>)
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	f023 0320 	bic.w	r3, r3, #32
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	4b10      	ldr	r3, [pc, #64]	; (8006b48 <SetSignalType+0x74>)
 8006b06:	801a      	strh	r2, [r3, #0]
    control_reg[0] |= 0b10;
 8006b08:	4b0f      	ldr	r3, [pc, #60]	; (8006b48 <SetSignalType+0x74>)
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	f043 0302 	orr.w	r3, r3, #2
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	4b0d      	ldr	r3, [pc, #52]	; (8006b48 <SetSignalType+0x74>)
 8006b14:	801a      	strh	r2, [r3, #0]
}
 8006b16:	e010      	b.n	8006b3a <SetSignalType+0x66>
  else if (signal_type == SQUARE)
 8006b18:	79fb      	ldrb	r3, [r7, #7]
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d10d      	bne.n	8006b3a <SetSignalType+0x66>
    control_reg[0] &= ~(0b10);
 8006b1e:	4b0a      	ldr	r3, [pc, #40]	; (8006b48 <SetSignalType+0x74>)
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	f023 0302 	bic.w	r3, r3, #2
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	4b07      	ldr	r3, [pc, #28]	; (8006b48 <SetSignalType+0x74>)
 8006b2a:	801a      	strh	r2, [r3, #0]
    control_reg[0] |= 0b101000;
 8006b2c:	4b06      	ldr	r3, [pc, #24]	; (8006b48 <SetSignalType+0x74>)
 8006b2e:	881b      	ldrh	r3, [r3, #0]
 8006b30:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	4b04      	ldr	r3, [pc, #16]	; (8006b48 <SetSignalType+0x74>)
 8006b38:	801a      	strh	r2, [r3, #0]
}
 8006b3a:	bf00      	nop
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	200018c8 	.word	0x200018c8
 8006b4c:	00000000 	.word	0x00000000

08006b50 <CalculateFrequency>:

void CalculateFrequency(uint32_t freq)
{
 8006b50:	b590      	push	{r4, r7, lr}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
	freq_reg_value = (uint32_t)freq * 10.737;
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f7f9 fce3 	bl	8000524 <__aeabi_ui2d>
 8006b5e:	a319      	add	r3, pc, #100	; (adr r3, 8006bc4 <CalculateFrequency+0x74>)
 8006b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b64:	f7f9 fd58 	bl	8000618 <__aeabi_dmul>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	460c      	mov	r4, r1
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	4621      	mov	r1, r4
 8006b70:	f7f9 ff64 	bl	8000a3c <__aeabi_d2uiz>
 8006b74:	4602      	mov	r2, r0
 8006b76:	4b10      	ldr	r3, [pc, #64]	; (8006bb8 <CalculateFrequency+0x68>)
 8006b78:	601a      	str	r2, [r3, #0]
	freq0_reg_lsb[0] |= (freq_reg_value & ~(0xFFFC000));
 8006b7a:	4b10      	ldr	r3, [pc, #64]	; (8006bbc <CalculateFrequency+0x6c>)
 8006b7c:	881a      	ldrh	r2, [r3, #0]
 8006b7e:	4b0e      	ldr	r3, [pc, #56]	; (8006bb8 <CalculateFrequency+0x68>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	4b0b      	ldr	r3, [pc, #44]	; (8006bbc <CalculateFrequency+0x6c>)
 8006b90:	801a      	strh	r2, [r3, #0]
	freq0_reg_msb[0] |= (freq_reg_value & 0xFFFC000) >> 14;
 8006b92:	4b0b      	ldr	r3, [pc, #44]	; (8006bc0 <CalculateFrequency+0x70>)
 8006b94:	881a      	ldrh	r2, [r3, #0]
 8006b96:	4b08      	ldr	r3, [pc, #32]	; (8006bb8 <CalculateFrequency+0x68>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	0b9b      	lsrs	r3, r3, #14
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	4b05      	ldr	r3, [pc, #20]	; (8006bc0 <CalculateFrequency+0x70>)
 8006baa:	801a      	strh	r2, [r3, #0]
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd90      	pop	{r4, r7, pc}
 8006bb4:	f3af 8000 	nop.w
 8006bb8:	2000196c 	.word	0x2000196c
 8006bbc:	20001230 	.word	0x20001230
 8006bc0:	20001234 	.word	0x20001234
 8006bc4:	10624dd3 	.word	0x10624dd3
 8006bc8:	40257958 	.word	0x40257958

08006bcc <GeneratePWMSignal>:

void GeneratePWMSignal(uint8_t duty, uint32_t freq)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	6039      	str	r1, [r7, #0]
 8006bd6:	71fb      	strb	r3, [r7, #7]
	PWM_Prescaler = (640000/freq) - 1;
 8006bd8:	4a09      	ldr	r2, [pc, #36]	; (8006c00 <GeneratePWMSignal+0x34>)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be0:	3b01      	subs	r3, #1
 8006be2:	4a08      	ldr	r2, [pc, #32]	; (8006c04 <GeneratePWMSignal+0x38>)
 8006be4:	6013      	str	r3, [r2, #0]
	TIM1->PSC = PWM_Prescaler;
 8006be6:	4a08      	ldr	r2, [pc, #32]	; (8006c08 <GeneratePWMSignal+0x3c>)
 8006be8:	4b06      	ldr	r3, [pc, #24]	; (8006c04 <GeneratePWMSignal+0x38>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6293      	str	r3, [r2, #40]	; 0x28
	TIM1->CCR3 = duty;
 8006bee:	4a06      	ldr	r2, [pc, #24]	; (8006c08 <GeneratePWMSignal+0x3c>)
 8006bf0:	79fb      	ldrb	r3, [r7, #7]
 8006bf2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr
 8006c00:	0009c400 	.word	0x0009c400
 8006c04:	200018cc 	.word	0x200018cc
 8006c08:	40012c00 	.word	0x40012c00

08006c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006c10:	bf00      	nop
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
	...

08006c1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c22:	4b0f      	ldr	r3, [pc, #60]	; (8006c60 <HAL_MspInit+0x44>)
 8006c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c26:	4a0e      	ldr	r2, [pc, #56]	; (8006c60 <HAL_MspInit+0x44>)
 8006c28:	f043 0301 	orr.w	r3, r3, #1
 8006c2c:	6613      	str	r3, [r2, #96]	; 0x60
 8006c2e:	4b0c      	ldr	r3, [pc, #48]	; (8006c60 <HAL_MspInit+0x44>)
 8006c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	607b      	str	r3, [r7, #4]
 8006c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006c3a:	4b09      	ldr	r3, [pc, #36]	; (8006c60 <HAL_MspInit+0x44>)
 8006c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c3e:	4a08      	ldr	r2, [pc, #32]	; (8006c60 <HAL_MspInit+0x44>)
 8006c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c44:	6593      	str	r3, [r2, #88]	; 0x58
 8006c46:	4b06      	ldr	r3, [pc, #24]	; (8006c60 <HAL_MspInit+0x44>)
 8006c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c4e:	603b      	str	r3, [r7, #0]
 8006c50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006c52:	bf00      	nop
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40021000 	.word	0x40021000

08006c64 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b08a      	sub	sp, #40	; 0x28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c6c:	f107 0314 	add.w	r3, r7, #20
 8006c70:	2200      	movs	r2, #0
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	605a      	str	r2, [r3, #4]
 8006c76:	609a      	str	r2, [r3, #8]
 8006c78:	60da      	str	r2, [r3, #12]
 8006c7a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a15      	ldr	r2, [pc, #84]	; (8006cd8 <HAL_DAC_MspInit+0x74>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d124      	bne.n	8006cd0 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006c86:	4b15      	ldr	r3, [pc, #84]	; (8006cdc <HAL_DAC_MspInit+0x78>)
 8006c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c8a:	4a14      	ldr	r2, [pc, #80]	; (8006cdc <HAL_DAC_MspInit+0x78>)
 8006c8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c90:	6593      	str	r3, [r2, #88]	; 0x58
 8006c92:	4b12      	ldr	r3, [pc, #72]	; (8006cdc <HAL_DAC_MspInit+0x78>)
 8006c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c9a:	613b      	str	r3, [r7, #16]
 8006c9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c9e:	4b0f      	ldr	r3, [pc, #60]	; (8006cdc <HAL_DAC_MspInit+0x78>)
 8006ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ca2:	4a0e      	ldr	r2, [pc, #56]	; (8006cdc <HAL_DAC_MspInit+0x78>)
 8006ca4:	f043 0301 	orr.w	r3, r3, #1
 8006ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006caa:	4b0c      	ldr	r3, [pc, #48]	; (8006cdc <HAL_DAC_MspInit+0x78>)
 8006cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	60fb      	str	r3, [r7, #12]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006cb6:	2330      	movs	r3, #48	; 0x30
 8006cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cc2:	f107 0314 	add.w	r3, r7, #20
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ccc:	f7fa fbe8 	bl	80014a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8006cd0:	bf00      	nop
 8006cd2:	3728      	adds	r7, #40	; 0x28
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	40007400 	.word	0x40007400
 8006cdc:	40021000 	.word	0x40021000

08006ce0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b08a      	sub	sp, #40	; 0x28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ce8:	f107 0314 	add.w	r3, r7, #20
 8006cec:	2200      	movs	r2, #0
 8006cee:	601a      	str	r2, [r3, #0]
 8006cf0:	605a      	str	r2, [r3, #4]
 8006cf2:	609a      	str	r2, [r3, #8]
 8006cf4:	60da      	str	r2, [r3, #12]
 8006cf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a25      	ldr	r2, [pc, #148]	; (8006d94 <HAL_SPI_MspInit+0xb4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d144      	bne.n	8006d8c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006d02:	4b25      	ldr	r3, [pc, #148]	; (8006d98 <HAL_SPI_MspInit+0xb8>)
 8006d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d06:	4a24      	ldr	r2, [pc, #144]	; (8006d98 <HAL_SPI_MspInit+0xb8>)
 8006d08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d0c:	6613      	str	r3, [r2, #96]	; 0x60
 8006d0e:	4b22      	ldr	r3, [pc, #136]	; (8006d98 <HAL_SPI_MspInit+0xb8>)
 8006d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d16:	613b      	str	r3, [r7, #16]
 8006d18:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d1a:	4b1f      	ldr	r3, [pc, #124]	; (8006d98 <HAL_SPI_MspInit+0xb8>)
 8006d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d1e:	4a1e      	ldr	r2, [pc, #120]	; (8006d98 <HAL_SPI_MspInit+0xb8>)
 8006d20:	f043 0301 	orr.w	r3, r3, #1
 8006d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d26:	4b1c      	ldr	r3, [pc, #112]	; (8006d98 <HAL_SPI_MspInit+0xb8>)
 8006d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	60fb      	str	r3, [r7, #12]
 8006d30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d32:	4b19      	ldr	r3, [pc, #100]	; (8006d98 <HAL_SPI_MspInit+0xb8>)
 8006d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d36:	4a18      	ldr	r2, [pc, #96]	; (8006d98 <HAL_SPI_MspInit+0xb8>)
 8006d38:	f043 0302 	orr.w	r3, r3, #2
 8006d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d3e:	4b16      	ldr	r3, [pc, #88]	; (8006d98 <HAL_SPI_MspInit+0xb8>)
 8006d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d42:	f003 0302 	and.w	r3, r3, #2
 8006d46:	60bb      	str	r3, [r7, #8]
 8006d48:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = SDATA_Pin;
 8006d4a:	2380      	movs	r3, #128	; 0x80
 8006d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d4e:	2302      	movs	r3, #2
 8006d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d52:	2300      	movs	r3, #0
 8006d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d56:	2303      	movs	r3, #3
 8006d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006d5a:	2305      	movs	r3, #5
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDATA_GPIO_Port, &GPIO_InitStruct);
 8006d5e:	f107 0314 	add.w	r3, r7, #20
 8006d62:	4619      	mov	r1, r3
 8006d64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d68:	f7fa fb9a 	bl	80014a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCLK_Pin;
 8006d6c:	2308      	movs	r3, #8
 8006d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d70:	2302      	movs	r3, #2
 8006d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d74:	2300      	movs	r3, #0
 8006d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006d7c:	2305      	movs	r3, #5
 8006d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SCLK_GPIO_Port, &GPIO_InitStruct);
 8006d80:	f107 0314 	add.w	r3, r7, #20
 8006d84:	4619      	mov	r1, r3
 8006d86:	4805      	ldr	r0, [pc, #20]	; (8006d9c <HAL_SPI_MspInit+0xbc>)
 8006d88:	f7fa fb8a 	bl	80014a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006d8c:	bf00      	nop
 8006d8e:	3728      	adds	r7, #40	; 0x28
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	40013000 	.word	0x40013000
 8006d98:	40021000 	.word	0x40021000
 8006d9c:	48000400 	.word	0x48000400

08006da0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a0a      	ldr	r2, [pc, #40]	; (8006dd8 <HAL_TIM_Base_MspInit+0x38>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d10b      	bne.n	8006dca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006db2:	4b0a      	ldr	r3, [pc, #40]	; (8006ddc <HAL_TIM_Base_MspInit+0x3c>)
 8006db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db6:	4a09      	ldr	r2, [pc, #36]	; (8006ddc <HAL_TIM_Base_MspInit+0x3c>)
 8006db8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006dbc:	6613      	str	r3, [r2, #96]	; 0x60
 8006dbe:	4b07      	ldr	r3, [pc, #28]	; (8006ddc <HAL_TIM_Base_MspInit+0x3c>)
 8006dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dc6:	60fb      	str	r3, [r7, #12]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8006dca:	bf00      	nop
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	40012c00 	.word	0x40012c00
 8006ddc:	40021000 	.word	0x40021000

08006de0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b088      	sub	sp, #32
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006de8:	f107 030c 	add.w	r3, r7, #12
 8006dec:	2200      	movs	r2, #0
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	605a      	str	r2, [r3, #4]
 8006df2:	609a      	str	r2, [r3, #8]
 8006df4:	60da      	str	r2, [r3, #12]
 8006df6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a12      	ldr	r2, [pc, #72]	; (8006e48 <HAL_TIM_MspPostInit+0x68>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d11d      	bne.n	8006e3e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e02:	4b12      	ldr	r3, [pc, #72]	; (8006e4c <HAL_TIM_MspPostInit+0x6c>)
 8006e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e06:	4a11      	ldr	r2, [pc, #68]	; (8006e4c <HAL_TIM_MspPostInit+0x6c>)
 8006e08:	f043 0301 	orr.w	r3, r3, #1
 8006e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e0e:	4b0f      	ldr	r3, [pc, #60]	; (8006e4c <HAL_TIM_MspPostInit+0x6c>)
 8006e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	60bb      	str	r3, [r7, #8]
 8006e18:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e20:	2302      	movs	r3, #2
 8006e22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e24:	2300      	movs	r3, #0
 8006e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e30:	f107 030c 	add.w	r3, r7, #12
 8006e34:	4619      	mov	r1, r3
 8006e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e3a:	f7fa fb31 	bl	80014a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006e3e:	bf00      	nop
 8006e40:	3720      	adds	r7, #32
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	40012c00 	.word	0x40012c00
 8006e4c:	40021000 	.word	0x40021000

08006e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b08a      	sub	sp, #40	; 0x28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e58:	f107 0314 	add.w	r3, r7, #20
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	601a      	str	r2, [r3, #0]
 8006e60:	605a      	str	r2, [r3, #4]
 8006e62:	609a      	str	r2, [r3, #8]
 8006e64:	60da      	str	r2, [r3, #12]
 8006e66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a1b      	ldr	r2, [pc, #108]	; (8006edc <HAL_UART_MspInit+0x8c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d12f      	bne.n	8006ed2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006e72:	4b1b      	ldr	r3, [pc, #108]	; (8006ee0 <HAL_UART_MspInit+0x90>)
 8006e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e76:	4a1a      	ldr	r2, [pc, #104]	; (8006ee0 <HAL_UART_MspInit+0x90>)
 8006e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e7c:	6593      	str	r3, [r2, #88]	; 0x58
 8006e7e:	4b18      	ldr	r3, [pc, #96]	; (8006ee0 <HAL_UART_MspInit+0x90>)
 8006e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e86:	613b      	str	r3, [r7, #16]
 8006e88:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e8a:	4b15      	ldr	r3, [pc, #84]	; (8006ee0 <HAL_UART_MspInit+0x90>)
 8006e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e8e:	4a14      	ldr	r2, [pc, #80]	; (8006ee0 <HAL_UART_MspInit+0x90>)
 8006e90:	f043 0304 	orr.w	r3, r3, #4
 8006e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e96:	4b12      	ldr	r3, [pc, #72]	; (8006ee0 <HAL_UART_MspInit+0x90>)
 8006e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e9a:	f003 0304 	and.w	r3, r3, #4
 8006e9e:	60fb      	str	r3, [r7, #12]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006ea2:	2330      	movs	r3, #48	; 0x30
 8006ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006eb2:	2307      	movs	r3, #7
 8006eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006eb6:	f107 0314 	add.w	r3, r7, #20
 8006eba:	4619      	mov	r1, r3
 8006ebc:	4809      	ldr	r0, [pc, #36]	; (8006ee4 <HAL_UART_MspInit+0x94>)
 8006ebe:	f7fa faef 	bl	80014a0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	2027      	movs	r0, #39	; 0x27
 8006ec8:	f7fa f8c5 	bl	8001056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006ecc:	2027      	movs	r0, #39	; 0x27
 8006ece:	f7fa f8de 	bl	800108e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006ed2:	bf00      	nop
 8006ed4:	3728      	adds	r7, #40	; 0x28
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	40004800 	.word	0x40004800
 8006ee0:	40021000 	.word	0x40021000
 8006ee4:	48000800 	.word	0x48000800

08006ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006eec:	bf00      	nop
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006efa:	e7fe      	b.n	8006efa <HardFault_Handler+0x4>

08006efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006efc:	b480      	push	{r7}
 8006efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006f00:	e7fe      	b.n	8006f00 <MemManage_Handler+0x4>

08006f02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006f02:	b480      	push	{r7}
 8006f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006f06:	e7fe      	b.n	8006f06 <BusFault_Handler+0x4>

08006f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006f0c:	e7fe      	b.n	8006f0c <UsageFault_Handler+0x4>

08006f0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006f12:	bf00      	nop
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006f20:	bf00      	nop
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006f2e:	bf00      	nop
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006f3c:	f7f9 ff70 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006f40:	bf00      	nop
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006f48:	4802      	ldr	r0, [pc, #8]	; (8006f54 <USART3_IRQHandler+0x10>)
 8006f4a:	f7fd fb1f 	bl	800458c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006f4e:	bf00      	nop
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	200018e4 	.word	0x200018e4

08006f58 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006f60:	4b11      	ldr	r3, [pc, #68]	; (8006fa8 <_sbrk+0x50>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d102      	bne.n	8006f6e <_sbrk+0x16>
		heap_end = &end;
 8006f68:	4b0f      	ldr	r3, [pc, #60]	; (8006fa8 <_sbrk+0x50>)
 8006f6a:	4a10      	ldr	r2, [pc, #64]	; (8006fac <_sbrk+0x54>)
 8006f6c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006f6e:	4b0e      	ldr	r3, [pc, #56]	; (8006fa8 <_sbrk+0x50>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006f74:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <_sbrk+0x50>)
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	466a      	mov	r2, sp
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d907      	bls.n	8006f92 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006f82:	f000 f875 	bl	8007070 <__errno>
 8006f86:	4602      	mov	r2, r0
 8006f88:	230c      	movs	r3, #12
 8006f8a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f90:	e006      	b.n	8006fa0 <_sbrk+0x48>
	}

	heap_end += incr;
 8006f92:	4b05      	ldr	r3, [pc, #20]	; (8006fa8 <_sbrk+0x50>)
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4413      	add	r3, r2
 8006f9a:	4a03      	ldr	r2, [pc, #12]	; (8006fa8 <_sbrk+0x50>)
 8006f9c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	200018b8 	.word	0x200018b8
 8006fac:	20001a28 	.word	0x20001a28

08006fb0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006fb4:	4b17      	ldr	r3, [pc, #92]	; (8007014 <SystemInit+0x64>)
 8006fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fba:	4a16      	ldr	r2, [pc, #88]	; (8007014 <SystemInit+0x64>)
 8006fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006fc4:	4b14      	ldr	r3, [pc, #80]	; (8007018 <SystemInit+0x68>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a13      	ldr	r2, [pc, #76]	; (8007018 <SystemInit+0x68>)
 8006fca:	f043 0301 	orr.w	r3, r3, #1
 8006fce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8006fd0:	4b11      	ldr	r3, [pc, #68]	; (8007018 <SystemInit+0x68>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8006fd6:	4b10      	ldr	r3, [pc, #64]	; (8007018 <SystemInit+0x68>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a0f      	ldr	r2, [pc, #60]	; (8007018 <SystemInit+0x68>)
 8006fdc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006fe0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006fe4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8006fe6:	4b0c      	ldr	r3, [pc, #48]	; (8007018 <SystemInit+0x68>)
 8006fe8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006fec:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006fee:	4b0a      	ldr	r3, [pc, #40]	; (8007018 <SystemInit+0x68>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a09      	ldr	r2, [pc, #36]	; (8007018 <SystemInit+0x68>)
 8006ff4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ff8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006ffa:	4b07      	ldr	r3, [pc, #28]	; (8007018 <SystemInit+0x68>)
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007000:	4b04      	ldr	r3, [pc, #16]	; (8007014 <SystemInit+0x64>)
 8007002:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007006:	609a      	str	r2, [r3, #8]
#endif
}
 8007008:	bf00      	nop
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	e000ed00 	.word	0xe000ed00
 8007018:	40021000 	.word	0x40021000

0800701c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800701c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007054 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007020:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007022:	e003      	b.n	800702c <LoopCopyDataInit>

08007024 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007024:	4b0c      	ldr	r3, [pc, #48]	; (8007058 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007026:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007028:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800702a:	3104      	adds	r1, #4

0800702c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800702c:	480b      	ldr	r0, [pc, #44]	; (800705c <LoopForever+0xa>)
	ldr	r3, =_edata
 800702e:	4b0c      	ldr	r3, [pc, #48]	; (8007060 <LoopForever+0xe>)
	adds	r2, r0, r1
 8007030:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007032:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007034:	d3f6      	bcc.n	8007024 <CopyDataInit>
	ldr	r2, =_sbss
 8007036:	4a0b      	ldr	r2, [pc, #44]	; (8007064 <LoopForever+0x12>)
	b	LoopFillZerobss
 8007038:	e002      	b.n	8007040 <LoopFillZerobss>

0800703a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800703a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800703c:	f842 3b04 	str.w	r3, [r2], #4

08007040 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007040:	4b09      	ldr	r3, [pc, #36]	; (8007068 <LoopForever+0x16>)
	cmp	r2, r3
 8007042:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007044:	d3f9      	bcc.n	800703a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007046:	f7ff ffb3 	bl	8006fb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800704a:	f000 f817 	bl	800707c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800704e:	f7ff f97d 	bl	800634c <main>

08007052 <LoopForever>:

LoopForever:
    b LoopForever
 8007052:	e7fe      	b.n	8007052 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007054:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8007058:	08008280 	.word	0x08008280
	ldr	r0, =_sdata
 800705c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007060:	2000140c 	.word	0x2000140c
	ldr	r2, =_sbss
 8007064:	2000140c 	.word	0x2000140c
	ldr	r3, = _ebss
 8007068:	20001a24 	.word	0x20001a24

0800706c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800706c:	e7fe      	b.n	800706c <ADC1_2_IRQHandler>
	...

08007070 <__errno>:
 8007070:	4b01      	ldr	r3, [pc, #4]	; (8007078 <__errno+0x8>)
 8007072:	6818      	ldr	r0, [r3, #0]
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	2000123c 	.word	0x2000123c

0800707c <__libc_init_array>:
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	4e0d      	ldr	r6, [pc, #52]	; (80070b4 <__libc_init_array+0x38>)
 8007080:	4c0d      	ldr	r4, [pc, #52]	; (80070b8 <__libc_init_array+0x3c>)
 8007082:	1ba4      	subs	r4, r4, r6
 8007084:	10a4      	asrs	r4, r4, #2
 8007086:	2500      	movs	r5, #0
 8007088:	42a5      	cmp	r5, r4
 800708a:	d109      	bne.n	80070a0 <__libc_init_array+0x24>
 800708c:	4e0b      	ldr	r6, [pc, #44]	; (80070bc <__libc_init_array+0x40>)
 800708e:	4c0c      	ldr	r4, [pc, #48]	; (80070c0 <__libc_init_array+0x44>)
 8007090:	f000 fc5e 	bl	8007950 <_init>
 8007094:	1ba4      	subs	r4, r4, r6
 8007096:	10a4      	asrs	r4, r4, #2
 8007098:	2500      	movs	r5, #0
 800709a:	42a5      	cmp	r5, r4
 800709c:	d105      	bne.n	80070aa <__libc_init_array+0x2e>
 800709e:	bd70      	pop	{r4, r5, r6, pc}
 80070a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070a4:	4798      	blx	r3
 80070a6:	3501      	adds	r5, #1
 80070a8:	e7ee      	b.n	8007088 <__libc_init_array+0xc>
 80070aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070ae:	4798      	blx	r3
 80070b0:	3501      	adds	r5, #1
 80070b2:	e7f2      	b.n	800709a <__libc_init_array+0x1e>
 80070b4:	08008278 	.word	0x08008278
 80070b8:	08008278 	.word	0x08008278
 80070bc:	08008278 	.word	0x08008278
 80070c0:	0800827c 	.word	0x0800827c

080070c4 <__locale_ctype_ptr>:
 80070c4:	4b04      	ldr	r3, [pc, #16]	; (80070d8 <__locale_ctype_ptr+0x14>)
 80070c6:	4a05      	ldr	r2, [pc, #20]	; (80070dc <__locale_ctype_ptr+0x18>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	bf08      	it	eq
 80070d0:	4613      	moveq	r3, r2
 80070d2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80070d6:	4770      	bx	lr
 80070d8:	2000123c 	.word	0x2000123c
 80070dc:	200012a0 	.word	0x200012a0

080070e0 <__ascii_mbtowc>:
 80070e0:	b082      	sub	sp, #8
 80070e2:	b901      	cbnz	r1, 80070e6 <__ascii_mbtowc+0x6>
 80070e4:	a901      	add	r1, sp, #4
 80070e6:	b142      	cbz	r2, 80070fa <__ascii_mbtowc+0x1a>
 80070e8:	b14b      	cbz	r3, 80070fe <__ascii_mbtowc+0x1e>
 80070ea:	7813      	ldrb	r3, [r2, #0]
 80070ec:	600b      	str	r3, [r1, #0]
 80070ee:	7812      	ldrb	r2, [r2, #0]
 80070f0:	1c10      	adds	r0, r2, #0
 80070f2:	bf18      	it	ne
 80070f4:	2001      	movne	r0, #1
 80070f6:	b002      	add	sp, #8
 80070f8:	4770      	bx	lr
 80070fa:	4610      	mov	r0, r2
 80070fc:	e7fb      	b.n	80070f6 <__ascii_mbtowc+0x16>
 80070fe:	f06f 0001 	mvn.w	r0, #1
 8007102:	e7f8      	b.n	80070f6 <__ascii_mbtowc+0x16>

08007104 <memcpy>:
 8007104:	b510      	push	{r4, lr}
 8007106:	1e43      	subs	r3, r0, #1
 8007108:	440a      	add	r2, r1
 800710a:	4291      	cmp	r1, r2
 800710c:	d100      	bne.n	8007110 <memcpy+0xc>
 800710e:	bd10      	pop	{r4, pc}
 8007110:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007114:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007118:	e7f7      	b.n	800710a <memcpy+0x6>

0800711a <memset>:
 800711a:	4402      	add	r2, r0
 800711c:	4603      	mov	r3, r0
 800711e:	4293      	cmp	r3, r2
 8007120:	d100      	bne.n	8007124 <memset+0xa>
 8007122:	4770      	bx	lr
 8007124:	f803 1b01 	strb.w	r1, [r3], #1
 8007128:	e7f9      	b.n	800711e <memset+0x4>
	...

0800712c <siprintf>:
 800712c:	b40e      	push	{r1, r2, r3}
 800712e:	b500      	push	{lr}
 8007130:	b09c      	sub	sp, #112	; 0x70
 8007132:	ab1d      	add	r3, sp, #116	; 0x74
 8007134:	9002      	str	r0, [sp, #8]
 8007136:	9006      	str	r0, [sp, #24]
 8007138:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800713c:	4809      	ldr	r0, [pc, #36]	; (8007164 <siprintf+0x38>)
 800713e:	9107      	str	r1, [sp, #28]
 8007140:	9104      	str	r1, [sp, #16]
 8007142:	4909      	ldr	r1, [pc, #36]	; (8007168 <siprintf+0x3c>)
 8007144:	f853 2b04 	ldr.w	r2, [r3], #4
 8007148:	9105      	str	r1, [sp, #20]
 800714a:	6800      	ldr	r0, [r0, #0]
 800714c:	9301      	str	r3, [sp, #4]
 800714e:	a902      	add	r1, sp, #8
 8007150:	f000 f87c 	bl	800724c <_svfiprintf_r>
 8007154:	9b02      	ldr	r3, [sp, #8]
 8007156:	2200      	movs	r2, #0
 8007158:	701a      	strb	r2, [r3, #0]
 800715a:	b01c      	add	sp, #112	; 0x70
 800715c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007160:	b003      	add	sp, #12
 8007162:	4770      	bx	lr
 8007164:	2000123c 	.word	0x2000123c
 8007168:	ffff0208 	.word	0xffff0208

0800716c <strcpy>:
 800716c:	4603      	mov	r3, r0
 800716e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007172:	f803 2b01 	strb.w	r2, [r3], #1
 8007176:	2a00      	cmp	r2, #0
 8007178:	d1f9      	bne.n	800716e <strcpy+0x2>
 800717a:	4770      	bx	lr

0800717c <__ascii_wctomb>:
 800717c:	b149      	cbz	r1, 8007192 <__ascii_wctomb+0x16>
 800717e:	2aff      	cmp	r2, #255	; 0xff
 8007180:	bf85      	ittet	hi
 8007182:	238a      	movhi	r3, #138	; 0x8a
 8007184:	6003      	strhi	r3, [r0, #0]
 8007186:	700a      	strbls	r2, [r1, #0]
 8007188:	f04f 30ff 	movhi.w	r0, #4294967295
 800718c:	bf98      	it	ls
 800718e:	2001      	movls	r0, #1
 8007190:	4770      	bx	lr
 8007192:	4608      	mov	r0, r1
 8007194:	4770      	bx	lr

08007196 <__ssputs_r>:
 8007196:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800719a:	688e      	ldr	r6, [r1, #8]
 800719c:	429e      	cmp	r6, r3
 800719e:	4682      	mov	sl, r0
 80071a0:	460c      	mov	r4, r1
 80071a2:	4690      	mov	r8, r2
 80071a4:	4699      	mov	r9, r3
 80071a6:	d837      	bhi.n	8007218 <__ssputs_r+0x82>
 80071a8:	898a      	ldrh	r2, [r1, #12]
 80071aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071ae:	d031      	beq.n	8007214 <__ssputs_r+0x7e>
 80071b0:	6825      	ldr	r5, [r4, #0]
 80071b2:	6909      	ldr	r1, [r1, #16]
 80071b4:	1a6f      	subs	r7, r5, r1
 80071b6:	6965      	ldr	r5, [r4, #20]
 80071b8:	2302      	movs	r3, #2
 80071ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071be:	fb95 f5f3 	sdiv	r5, r5, r3
 80071c2:	f109 0301 	add.w	r3, r9, #1
 80071c6:	443b      	add	r3, r7
 80071c8:	429d      	cmp	r5, r3
 80071ca:	bf38      	it	cc
 80071cc:	461d      	movcc	r5, r3
 80071ce:	0553      	lsls	r3, r2, #21
 80071d0:	d530      	bpl.n	8007234 <__ssputs_r+0x9e>
 80071d2:	4629      	mov	r1, r5
 80071d4:	f000 fb22 	bl	800781c <_malloc_r>
 80071d8:	4606      	mov	r6, r0
 80071da:	b950      	cbnz	r0, 80071f2 <__ssputs_r+0x5c>
 80071dc:	230c      	movs	r3, #12
 80071de:	f8ca 3000 	str.w	r3, [sl]
 80071e2:	89a3      	ldrh	r3, [r4, #12]
 80071e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071e8:	81a3      	strh	r3, [r4, #12]
 80071ea:	f04f 30ff 	mov.w	r0, #4294967295
 80071ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f2:	463a      	mov	r2, r7
 80071f4:	6921      	ldr	r1, [r4, #16]
 80071f6:	f7ff ff85 	bl	8007104 <memcpy>
 80071fa:	89a3      	ldrh	r3, [r4, #12]
 80071fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007204:	81a3      	strh	r3, [r4, #12]
 8007206:	6126      	str	r6, [r4, #16]
 8007208:	6165      	str	r5, [r4, #20]
 800720a:	443e      	add	r6, r7
 800720c:	1bed      	subs	r5, r5, r7
 800720e:	6026      	str	r6, [r4, #0]
 8007210:	60a5      	str	r5, [r4, #8]
 8007212:	464e      	mov	r6, r9
 8007214:	454e      	cmp	r6, r9
 8007216:	d900      	bls.n	800721a <__ssputs_r+0x84>
 8007218:	464e      	mov	r6, r9
 800721a:	4632      	mov	r2, r6
 800721c:	4641      	mov	r1, r8
 800721e:	6820      	ldr	r0, [r4, #0]
 8007220:	f000 fa94 	bl	800774c <memmove>
 8007224:	68a3      	ldr	r3, [r4, #8]
 8007226:	1b9b      	subs	r3, r3, r6
 8007228:	60a3      	str	r3, [r4, #8]
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	441e      	add	r6, r3
 800722e:	6026      	str	r6, [r4, #0]
 8007230:	2000      	movs	r0, #0
 8007232:	e7dc      	b.n	80071ee <__ssputs_r+0x58>
 8007234:	462a      	mov	r2, r5
 8007236:	f000 fb4b 	bl	80078d0 <_realloc_r>
 800723a:	4606      	mov	r6, r0
 800723c:	2800      	cmp	r0, #0
 800723e:	d1e2      	bne.n	8007206 <__ssputs_r+0x70>
 8007240:	6921      	ldr	r1, [r4, #16]
 8007242:	4650      	mov	r0, sl
 8007244:	f000 fa9c 	bl	8007780 <_free_r>
 8007248:	e7c8      	b.n	80071dc <__ssputs_r+0x46>
	...

0800724c <_svfiprintf_r>:
 800724c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007250:	461d      	mov	r5, r3
 8007252:	898b      	ldrh	r3, [r1, #12]
 8007254:	061f      	lsls	r7, r3, #24
 8007256:	b09d      	sub	sp, #116	; 0x74
 8007258:	4680      	mov	r8, r0
 800725a:	460c      	mov	r4, r1
 800725c:	4616      	mov	r6, r2
 800725e:	d50f      	bpl.n	8007280 <_svfiprintf_r+0x34>
 8007260:	690b      	ldr	r3, [r1, #16]
 8007262:	b96b      	cbnz	r3, 8007280 <_svfiprintf_r+0x34>
 8007264:	2140      	movs	r1, #64	; 0x40
 8007266:	f000 fad9 	bl	800781c <_malloc_r>
 800726a:	6020      	str	r0, [r4, #0]
 800726c:	6120      	str	r0, [r4, #16]
 800726e:	b928      	cbnz	r0, 800727c <_svfiprintf_r+0x30>
 8007270:	230c      	movs	r3, #12
 8007272:	f8c8 3000 	str.w	r3, [r8]
 8007276:	f04f 30ff 	mov.w	r0, #4294967295
 800727a:	e0c8      	b.n	800740e <_svfiprintf_r+0x1c2>
 800727c:	2340      	movs	r3, #64	; 0x40
 800727e:	6163      	str	r3, [r4, #20]
 8007280:	2300      	movs	r3, #0
 8007282:	9309      	str	r3, [sp, #36]	; 0x24
 8007284:	2320      	movs	r3, #32
 8007286:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800728a:	2330      	movs	r3, #48	; 0x30
 800728c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007290:	9503      	str	r5, [sp, #12]
 8007292:	f04f 0b01 	mov.w	fp, #1
 8007296:	4637      	mov	r7, r6
 8007298:	463d      	mov	r5, r7
 800729a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800729e:	b10b      	cbz	r3, 80072a4 <_svfiprintf_r+0x58>
 80072a0:	2b25      	cmp	r3, #37	; 0x25
 80072a2:	d13e      	bne.n	8007322 <_svfiprintf_r+0xd6>
 80072a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80072a8:	d00b      	beq.n	80072c2 <_svfiprintf_r+0x76>
 80072aa:	4653      	mov	r3, sl
 80072ac:	4632      	mov	r2, r6
 80072ae:	4621      	mov	r1, r4
 80072b0:	4640      	mov	r0, r8
 80072b2:	f7ff ff70 	bl	8007196 <__ssputs_r>
 80072b6:	3001      	adds	r0, #1
 80072b8:	f000 80a4 	beq.w	8007404 <_svfiprintf_r+0x1b8>
 80072bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072be:	4453      	add	r3, sl
 80072c0:	9309      	str	r3, [sp, #36]	; 0x24
 80072c2:	783b      	ldrb	r3, [r7, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 809d 	beq.w	8007404 <_svfiprintf_r+0x1b8>
 80072ca:	2300      	movs	r3, #0
 80072cc:	f04f 32ff 	mov.w	r2, #4294967295
 80072d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072d4:	9304      	str	r3, [sp, #16]
 80072d6:	9307      	str	r3, [sp, #28]
 80072d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072dc:	931a      	str	r3, [sp, #104]	; 0x68
 80072de:	462f      	mov	r7, r5
 80072e0:	2205      	movs	r2, #5
 80072e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80072e6:	4850      	ldr	r0, [pc, #320]	; (8007428 <_svfiprintf_r+0x1dc>)
 80072e8:	f7f8 ff8a 	bl	8000200 <memchr>
 80072ec:	9b04      	ldr	r3, [sp, #16]
 80072ee:	b9d0      	cbnz	r0, 8007326 <_svfiprintf_r+0xda>
 80072f0:	06d9      	lsls	r1, r3, #27
 80072f2:	bf44      	itt	mi
 80072f4:	2220      	movmi	r2, #32
 80072f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80072fa:	071a      	lsls	r2, r3, #28
 80072fc:	bf44      	itt	mi
 80072fe:	222b      	movmi	r2, #43	; 0x2b
 8007300:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007304:	782a      	ldrb	r2, [r5, #0]
 8007306:	2a2a      	cmp	r2, #42	; 0x2a
 8007308:	d015      	beq.n	8007336 <_svfiprintf_r+0xea>
 800730a:	9a07      	ldr	r2, [sp, #28]
 800730c:	462f      	mov	r7, r5
 800730e:	2000      	movs	r0, #0
 8007310:	250a      	movs	r5, #10
 8007312:	4639      	mov	r1, r7
 8007314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007318:	3b30      	subs	r3, #48	; 0x30
 800731a:	2b09      	cmp	r3, #9
 800731c:	d94d      	bls.n	80073ba <_svfiprintf_r+0x16e>
 800731e:	b1b8      	cbz	r0, 8007350 <_svfiprintf_r+0x104>
 8007320:	e00f      	b.n	8007342 <_svfiprintf_r+0xf6>
 8007322:	462f      	mov	r7, r5
 8007324:	e7b8      	b.n	8007298 <_svfiprintf_r+0x4c>
 8007326:	4a40      	ldr	r2, [pc, #256]	; (8007428 <_svfiprintf_r+0x1dc>)
 8007328:	1a80      	subs	r0, r0, r2
 800732a:	fa0b f000 	lsl.w	r0, fp, r0
 800732e:	4318      	orrs	r0, r3
 8007330:	9004      	str	r0, [sp, #16]
 8007332:	463d      	mov	r5, r7
 8007334:	e7d3      	b.n	80072de <_svfiprintf_r+0x92>
 8007336:	9a03      	ldr	r2, [sp, #12]
 8007338:	1d11      	adds	r1, r2, #4
 800733a:	6812      	ldr	r2, [r2, #0]
 800733c:	9103      	str	r1, [sp, #12]
 800733e:	2a00      	cmp	r2, #0
 8007340:	db01      	blt.n	8007346 <_svfiprintf_r+0xfa>
 8007342:	9207      	str	r2, [sp, #28]
 8007344:	e004      	b.n	8007350 <_svfiprintf_r+0x104>
 8007346:	4252      	negs	r2, r2
 8007348:	f043 0302 	orr.w	r3, r3, #2
 800734c:	9207      	str	r2, [sp, #28]
 800734e:	9304      	str	r3, [sp, #16]
 8007350:	783b      	ldrb	r3, [r7, #0]
 8007352:	2b2e      	cmp	r3, #46	; 0x2e
 8007354:	d10c      	bne.n	8007370 <_svfiprintf_r+0x124>
 8007356:	787b      	ldrb	r3, [r7, #1]
 8007358:	2b2a      	cmp	r3, #42	; 0x2a
 800735a:	d133      	bne.n	80073c4 <_svfiprintf_r+0x178>
 800735c:	9b03      	ldr	r3, [sp, #12]
 800735e:	1d1a      	adds	r2, r3, #4
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	9203      	str	r2, [sp, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	bfb8      	it	lt
 8007368:	f04f 33ff 	movlt.w	r3, #4294967295
 800736c:	3702      	adds	r7, #2
 800736e:	9305      	str	r3, [sp, #20]
 8007370:	4d2e      	ldr	r5, [pc, #184]	; (800742c <_svfiprintf_r+0x1e0>)
 8007372:	7839      	ldrb	r1, [r7, #0]
 8007374:	2203      	movs	r2, #3
 8007376:	4628      	mov	r0, r5
 8007378:	f7f8 ff42 	bl	8000200 <memchr>
 800737c:	b138      	cbz	r0, 800738e <_svfiprintf_r+0x142>
 800737e:	2340      	movs	r3, #64	; 0x40
 8007380:	1b40      	subs	r0, r0, r5
 8007382:	fa03 f000 	lsl.w	r0, r3, r0
 8007386:	9b04      	ldr	r3, [sp, #16]
 8007388:	4303      	orrs	r3, r0
 800738a:	3701      	adds	r7, #1
 800738c:	9304      	str	r3, [sp, #16]
 800738e:	7839      	ldrb	r1, [r7, #0]
 8007390:	4827      	ldr	r0, [pc, #156]	; (8007430 <_svfiprintf_r+0x1e4>)
 8007392:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007396:	2206      	movs	r2, #6
 8007398:	1c7e      	adds	r6, r7, #1
 800739a:	f7f8 ff31 	bl	8000200 <memchr>
 800739e:	2800      	cmp	r0, #0
 80073a0:	d038      	beq.n	8007414 <_svfiprintf_r+0x1c8>
 80073a2:	4b24      	ldr	r3, [pc, #144]	; (8007434 <_svfiprintf_r+0x1e8>)
 80073a4:	bb13      	cbnz	r3, 80073ec <_svfiprintf_r+0x1a0>
 80073a6:	9b03      	ldr	r3, [sp, #12]
 80073a8:	3307      	adds	r3, #7
 80073aa:	f023 0307 	bic.w	r3, r3, #7
 80073ae:	3308      	adds	r3, #8
 80073b0:	9303      	str	r3, [sp, #12]
 80073b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b4:	444b      	add	r3, r9
 80073b6:	9309      	str	r3, [sp, #36]	; 0x24
 80073b8:	e76d      	b.n	8007296 <_svfiprintf_r+0x4a>
 80073ba:	fb05 3202 	mla	r2, r5, r2, r3
 80073be:	2001      	movs	r0, #1
 80073c0:	460f      	mov	r7, r1
 80073c2:	e7a6      	b.n	8007312 <_svfiprintf_r+0xc6>
 80073c4:	2300      	movs	r3, #0
 80073c6:	3701      	adds	r7, #1
 80073c8:	9305      	str	r3, [sp, #20]
 80073ca:	4619      	mov	r1, r3
 80073cc:	250a      	movs	r5, #10
 80073ce:	4638      	mov	r0, r7
 80073d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073d4:	3a30      	subs	r2, #48	; 0x30
 80073d6:	2a09      	cmp	r2, #9
 80073d8:	d903      	bls.n	80073e2 <_svfiprintf_r+0x196>
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d0c8      	beq.n	8007370 <_svfiprintf_r+0x124>
 80073de:	9105      	str	r1, [sp, #20]
 80073e0:	e7c6      	b.n	8007370 <_svfiprintf_r+0x124>
 80073e2:	fb05 2101 	mla	r1, r5, r1, r2
 80073e6:	2301      	movs	r3, #1
 80073e8:	4607      	mov	r7, r0
 80073ea:	e7f0      	b.n	80073ce <_svfiprintf_r+0x182>
 80073ec:	ab03      	add	r3, sp, #12
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	4622      	mov	r2, r4
 80073f2:	4b11      	ldr	r3, [pc, #68]	; (8007438 <_svfiprintf_r+0x1ec>)
 80073f4:	a904      	add	r1, sp, #16
 80073f6:	4640      	mov	r0, r8
 80073f8:	f3af 8000 	nop.w
 80073fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007400:	4681      	mov	r9, r0
 8007402:	d1d6      	bne.n	80073b2 <_svfiprintf_r+0x166>
 8007404:	89a3      	ldrh	r3, [r4, #12]
 8007406:	065b      	lsls	r3, r3, #25
 8007408:	f53f af35 	bmi.w	8007276 <_svfiprintf_r+0x2a>
 800740c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800740e:	b01d      	add	sp, #116	; 0x74
 8007410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007414:	ab03      	add	r3, sp, #12
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	4622      	mov	r2, r4
 800741a:	4b07      	ldr	r3, [pc, #28]	; (8007438 <_svfiprintf_r+0x1ec>)
 800741c:	a904      	add	r1, sp, #16
 800741e:	4640      	mov	r0, r8
 8007420:	f000 f882 	bl	8007528 <_printf_i>
 8007424:	e7ea      	b.n	80073fc <_svfiprintf_r+0x1b0>
 8007426:	bf00      	nop
 8007428:	0800823b 	.word	0x0800823b
 800742c:	08008241 	.word	0x08008241
 8007430:	08008245 	.word	0x08008245
 8007434:	00000000 	.word	0x00000000
 8007438:	08007197 	.word	0x08007197

0800743c <_printf_common>:
 800743c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007440:	4691      	mov	r9, r2
 8007442:	461f      	mov	r7, r3
 8007444:	688a      	ldr	r2, [r1, #8]
 8007446:	690b      	ldr	r3, [r1, #16]
 8007448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800744c:	4293      	cmp	r3, r2
 800744e:	bfb8      	it	lt
 8007450:	4613      	movlt	r3, r2
 8007452:	f8c9 3000 	str.w	r3, [r9]
 8007456:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800745a:	4606      	mov	r6, r0
 800745c:	460c      	mov	r4, r1
 800745e:	b112      	cbz	r2, 8007466 <_printf_common+0x2a>
 8007460:	3301      	adds	r3, #1
 8007462:	f8c9 3000 	str.w	r3, [r9]
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	0699      	lsls	r1, r3, #26
 800746a:	bf42      	ittt	mi
 800746c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007470:	3302      	addmi	r3, #2
 8007472:	f8c9 3000 	strmi.w	r3, [r9]
 8007476:	6825      	ldr	r5, [r4, #0]
 8007478:	f015 0506 	ands.w	r5, r5, #6
 800747c:	d107      	bne.n	800748e <_printf_common+0x52>
 800747e:	f104 0a19 	add.w	sl, r4, #25
 8007482:	68e3      	ldr	r3, [r4, #12]
 8007484:	f8d9 2000 	ldr.w	r2, [r9]
 8007488:	1a9b      	subs	r3, r3, r2
 800748a:	42ab      	cmp	r3, r5
 800748c:	dc28      	bgt.n	80074e0 <_printf_common+0xa4>
 800748e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007492:	6822      	ldr	r2, [r4, #0]
 8007494:	3300      	adds	r3, #0
 8007496:	bf18      	it	ne
 8007498:	2301      	movne	r3, #1
 800749a:	0692      	lsls	r2, r2, #26
 800749c:	d42d      	bmi.n	80074fa <_printf_common+0xbe>
 800749e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074a2:	4639      	mov	r1, r7
 80074a4:	4630      	mov	r0, r6
 80074a6:	47c0      	blx	r8
 80074a8:	3001      	adds	r0, #1
 80074aa:	d020      	beq.n	80074ee <_printf_common+0xb2>
 80074ac:	6823      	ldr	r3, [r4, #0]
 80074ae:	68e5      	ldr	r5, [r4, #12]
 80074b0:	f8d9 2000 	ldr.w	r2, [r9]
 80074b4:	f003 0306 	and.w	r3, r3, #6
 80074b8:	2b04      	cmp	r3, #4
 80074ba:	bf08      	it	eq
 80074bc:	1aad      	subeq	r5, r5, r2
 80074be:	68a3      	ldr	r3, [r4, #8]
 80074c0:	6922      	ldr	r2, [r4, #16]
 80074c2:	bf0c      	ite	eq
 80074c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074c8:	2500      	movne	r5, #0
 80074ca:	4293      	cmp	r3, r2
 80074cc:	bfc4      	itt	gt
 80074ce:	1a9b      	subgt	r3, r3, r2
 80074d0:	18ed      	addgt	r5, r5, r3
 80074d2:	f04f 0900 	mov.w	r9, #0
 80074d6:	341a      	adds	r4, #26
 80074d8:	454d      	cmp	r5, r9
 80074da:	d11a      	bne.n	8007512 <_printf_common+0xd6>
 80074dc:	2000      	movs	r0, #0
 80074de:	e008      	b.n	80074f2 <_printf_common+0xb6>
 80074e0:	2301      	movs	r3, #1
 80074e2:	4652      	mov	r2, sl
 80074e4:	4639      	mov	r1, r7
 80074e6:	4630      	mov	r0, r6
 80074e8:	47c0      	blx	r8
 80074ea:	3001      	adds	r0, #1
 80074ec:	d103      	bne.n	80074f6 <_printf_common+0xba>
 80074ee:	f04f 30ff 	mov.w	r0, #4294967295
 80074f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f6:	3501      	adds	r5, #1
 80074f8:	e7c3      	b.n	8007482 <_printf_common+0x46>
 80074fa:	18e1      	adds	r1, r4, r3
 80074fc:	1c5a      	adds	r2, r3, #1
 80074fe:	2030      	movs	r0, #48	; 0x30
 8007500:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007504:	4422      	add	r2, r4
 8007506:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800750a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800750e:	3302      	adds	r3, #2
 8007510:	e7c5      	b.n	800749e <_printf_common+0x62>
 8007512:	2301      	movs	r3, #1
 8007514:	4622      	mov	r2, r4
 8007516:	4639      	mov	r1, r7
 8007518:	4630      	mov	r0, r6
 800751a:	47c0      	blx	r8
 800751c:	3001      	adds	r0, #1
 800751e:	d0e6      	beq.n	80074ee <_printf_common+0xb2>
 8007520:	f109 0901 	add.w	r9, r9, #1
 8007524:	e7d8      	b.n	80074d8 <_printf_common+0x9c>
	...

08007528 <_printf_i>:
 8007528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800752c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007530:	460c      	mov	r4, r1
 8007532:	7e09      	ldrb	r1, [r1, #24]
 8007534:	b085      	sub	sp, #20
 8007536:	296e      	cmp	r1, #110	; 0x6e
 8007538:	4617      	mov	r7, r2
 800753a:	4606      	mov	r6, r0
 800753c:	4698      	mov	r8, r3
 800753e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007540:	f000 80b3 	beq.w	80076aa <_printf_i+0x182>
 8007544:	d822      	bhi.n	800758c <_printf_i+0x64>
 8007546:	2963      	cmp	r1, #99	; 0x63
 8007548:	d036      	beq.n	80075b8 <_printf_i+0x90>
 800754a:	d80a      	bhi.n	8007562 <_printf_i+0x3a>
 800754c:	2900      	cmp	r1, #0
 800754e:	f000 80b9 	beq.w	80076c4 <_printf_i+0x19c>
 8007552:	2958      	cmp	r1, #88	; 0x58
 8007554:	f000 8083 	beq.w	800765e <_printf_i+0x136>
 8007558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800755c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007560:	e032      	b.n	80075c8 <_printf_i+0xa0>
 8007562:	2964      	cmp	r1, #100	; 0x64
 8007564:	d001      	beq.n	800756a <_printf_i+0x42>
 8007566:	2969      	cmp	r1, #105	; 0x69
 8007568:	d1f6      	bne.n	8007558 <_printf_i+0x30>
 800756a:	6820      	ldr	r0, [r4, #0]
 800756c:	6813      	ldr	r3, [r2, #0]
 800756e:	0605      	lsls	r5, r0, #24
 8007570:	f103 0104 	add.w	r1, r3, #4
 8007574:	d52a      	bpl.n	80075cc <_printf_i+0xa4>
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6011      	str	r1, [r2, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	da03      	bge.n	8007586 <_printf_i+0x5e>
 800757e:	222d      	movs	r2, #45	; 0x2d
 8007580:	425b      	negs	r3, r3
 8007582:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007586:	486f      	ldr	r0, [pc, #444]	; (8007744 <_printf_i+0x21c>)
 8007588:	220a      	movs	r2, #10
 800758a:	e039      	b.n	8007600 <_printf_i+0xd8>
 800758c:	2973      	cmp	r1, #115	; 0x73
 800758e:	f000 809d 	beq.w	80076cc <_printf_i+0x1a4>
 8007592:	d808      	bhi.n	80075a6 <_printf_i+0x7e>
 8007594:	296f      	cmp	r1, #111	; 0x6f
 8007596:	d020      	beq.n	80075da <_printf_i+0xb2>
 8007598:	2970      	cmp	r1, #112	; 0x70
 800759a:	d1dd      	bne.n	8007558 <_printf_i+0x30>
 800759c:	6823      	ldr	r3, [r4, #0]
 800759e:	f043 0320 	orr.w	r3, r3, #32
 80075a2:	6023      	str	r3, [r4, #0]
 80075a4:	e003      	b.n	80075ae <_printf_i+0x86>
 80075a6:	2975      	cmp	r1, #117	; 0x75
 80075a8:	d017      	beq.n	80075da <_printf_i+0xb2>
 80075aa:	2978      	cmp	r1, #120	; 0x78
 80075ac:	d1d4      	bne.n	8007558 <_printf_i+0x30>
 80075ae:	2378      	movs	r3, #120	; 0x78
 80075b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075b4:	4864      	ldr	r0, [pc, #400]	; (8007748 <_printf_i+0x220>)
 80075b6:	e055      	b.n	8007664 <_printf_i+0x13c>
 80075b8:	6813      	ldr	r3, [r2, #0]
 80075ba:	1d19      	adds	r1, r3, #4
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	6011      	str	r1, [r2, #0]
 80075c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075c8:	2301      	movs	r3, #1
 80075ca:	e08c      	b.n	80076e6 <_printf_i+0x1be>
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	6011      	str	r1, [r2, #0]
 80075d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80075d4:	bf18      	it	ne
 80075d6:	b21b      	sxthne	r3, r3
 80075d8:	e7cf      	b.n	800757a <_printf_i+0x52>
 80075da:	6813      	ldr	r3, [r2, #0]
 80075dc:	6825      	ldr	r5, [r4, #0]
 80075de:	1d18      	adds	r0, r3, #4
 80075e0:	6010      	str	r0, [r2, #0]
 80075e2:	0628      	lsls	r0, r5, #24
 80075e4:	d501      	bpl.n	80075ea <_printf_i+0xc2>
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	e002      	b.n	80075f0 <_printf_i+0xc8>
 80075ea:	0668      	lsls	r0, r5, #25
 80075ec:	d5fb      	bpl.n	80075e6 <_printf_i+0xbe>
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	4854      	ldr	r0, [pc, #336]	; (8007744 <_printf_i+0x21c>)
 80075f2:	296f      	cmp	r1, #111	; 0x6f
 80075f4:	bf14      	ite	ne
 80075f6:	220a      	movne	r2, #10
 80075f8:	2208      	moveq	r2, #8
 80075fa:	2100      	movs	r1, #0
 80075fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007600:	6865      	ldr	r5, [r4, #4]
 8007602:	60a5      	str	r5, [r4, #8]
 8007604:	2d00      	cmp	r5, #0
 8007606:	f2c0 8095 	blt.w	8007734 <_printf_i+0x20c>
 800760a:	6821      	ldr	r1, [r4, #0]
 800760c:	f021 0104 	bic.w	r1, r1, #4
 8007610:	6021      	str	r1, [r4, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d13d      	bne.n	8007692 <_printf_i+0x16a>
 8007616:	2d00      	cmp	r5, #0
 8007618:	f040 808e 	bne.w	8007738 <_printf_i+0x210>
 800761c:	4665      	mov	r5, ip
 800761e:	2a08      	cmp	r2, #8
 8007620:	d10b      	bne.n	800763a <_printf_i+0x112>
 8007622:	6823      	ldr	r3, [r4, #0]
 8007624:	07db      	lsls	r3, r3, #31
 8007626:	d508      	bpl.n	800763a <_printf_i+0x112>
 8007628:	6923      	ldr	r3, [r4, #16]
 800762a:	6862      	ldr	r2, [r4, #4]
 800762c:	429a      	cmp	r2, r3
 800762e:	bfde      	ittt	le
 8007630:	2330      	movle	r3, #48	; 0x30
 8007632:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007636:	f105 35ff 	addle.w	r5, r5, #4294967295
 800763a:	ebac 0305 	sub.w	r3, ip, r5
 800763e:	6123      	str	r3, [r4, #16]
 8007640:	f8cd 8000 	str.w	r8, [sp]
 8007644:	463b      	mov	r3, r7
 8007646:	aa03      	add	r2, sp, #12
 8007648:	4621      	mov	r1, r4
 800764a:	4630      	mov	r0, r6
 800764c:	f7ff fef6 	bl	800743c <_printf_common>
 8007650:	3001      	adds	r0, #1
 8007652:	d14d      	bne.n	80076f0 <_printf_i+0x1c8>
 8007654:	f04f 30ff 	mov.w	r0, #4294967295
 8007658:	b005      	add	sp, #20
 800765a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800765e:	4839      	ldr	r0, [pc, #228]	; (8007744 <_printf_i+0x21c>)
 8007660:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007664:	6813      	ldr	r3, [r2, #0]
 8007666:	6821      	ldr	r1, [r4, #0]
 8007668:	1d1d      	adds	r5, r3, #4
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6015      	str	r5, [r2, #0]
 800766e:	060a      	lsls	r2, r1, #24
 8007670:	d50b      	bpl.n	800768a <_printf_i+0x162>
 8007672:	07ca      	lsls	r2, r1, #31
 8007674:	bf44      	itt	mi
 8007676:	f041 0120 	orrmi.w	r1, r1, #32
 800767a:	6021      	strmi	r1, [r4, #0]
 800767c:	b91b      	cbnz	r3, 8007686 <_printf_i+0x15e>
 800767e:	6822      	ldr	r2, [r4, #0]
 8007680:	f022 0220 	bic.w	r2, r2, #32
 8007684:	6022      	str	r2, [r4, #0]
 8007686:	2210      	movs	r2, #16
 8007688:	e7b7      	b.n	80075fa <_printf_i+0xd2>
 800768a:	064d      	lsls	r5, r1, #25
 800768c:	bf48      	it	mi
 800768e:	b29b      	uxthmi	r3, r3
 8007690:	e7ef      	b.n	8007672 <_printf_i+0x14a>
 8007692:	4665      	mov	r5, ip
 8007694:	fbb3 f1f2 	udiv	r1, r3, r2
 8007698:	fb02 3311 	mls	r3, r2, r1, r3
 800769c:	5cc3      	ldrb	r3, [r0, r3]
 800769e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80076a2:	460b      	mov	r3, r1
 80076a4:	2900      	cmp	r1, #0
 80076a6:	d1f5      	bne.n	8007694 <_printf_i+0x16c>
 80076a8:	e7b9      	b.n	800761e <_printf_i+0xf6>
 80076aa:	6813      	ldr	r3, [r2, #0]
 80076ac:	6825      	ldr	r5, [r4, #0]
 80076ae:	6961      	ldr	r1, [r4, #20]
 80076b0:	1d18      	adds	r0, r3, #4
 80076b2:	6010      	str	r0, [r2, #0]
 80076b4:	0628      	lsls	r0, r5, #24
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	d501      	bpl.n	80076be <_printf_i+0x196>
 80076ba:	6019      	str	r1, [r3, #0]
 80076bc:	e002      	b.n	80076c4 <_printf_i+0x19c>
 80076be:	066a      	lsls	r2, r5, #25
 80076c0:	d5fb      	bpl.n	80076ba <_printf_i+0x192>
 80076c2:	8019      	strh	r1, [r3, #0]
 80076c4:	2300      	movs	r3, #0
 80076c6:	6123      	str	r3, [r4, #16]
 80076c8:	4665      	mov	r5, ip
 80076ca:	e7b9      	b.n	8007640 <_printf_i+0x118>
 80076cc:	6813      	ldr	r3, [r2, #0]
 80076ce:	1d19      	adds	r1, r3, #4
 80076d0:	6011      	str	r1, [r2, #0]
 80076d2:	681d      	ldr	r5, [r3, #0]
 80076d4:	6862      	ldr	r2, [r4, #4]
 80076d6:	2100      	movs	r1, #0
 80076d8:	4628      	mov	r0, r5
 80076da:	f7f8 fd91 	bl	8000200 <memchr>
 80076de:	b108      	cbz	r0, 80076e4 <_printf_i+0x1bc>
 80076e0:	1b40      	subs	r0, r0, r5
 80076e2:	6060      	str	r0, [r4, #4]
 80076e4:	6863      	ldr	r3, [r4, #4]
 80076e6:	6123      	str	r3, [r4, #16]
 80076e8:	2300      	movs	r3, #0
 80076ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076ee:	e7a7      	b.n	8007640 <_printf_i+0x118>
 80076f0:	6923      	ldr	r3, [r4, #16]
 80076f2:	462a      	mov	r2, r5
 80076f4:	4639      	mov	r1, r7
 80076f6:	4630      	mov	r0, r6
 80076f8:	47c0      	blx	r8
 80076fa:	3001      	adds	r0, #1
 80076fc:	d0aa      	beq.n	8007654 <_printf_i+0x12c>
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	079b      	lsls	r3, r3, #30
 8007702:	d413      	bmi.n	800772c <_printf_i+0x204>
 8007704:	68e0      	ldr	r0, [r4, #12]
 8007706:	9b03      	ldr	r3, [sp, #12]
 8007708:	4298      	cmp	r0, r3
 800770a:	bfb8      	it	lt
 800770c:	4618      	movlt	r0, r3
 800770e:	e7a3      	b.n	8007658 <_printf_i+0x130>
 8007710:	2301      	movs	r3, #1
 8007712:	464a      	mov	r2, r9
 8007714:	4639      	mov	r1, r7
 8007716:	4630      	mov	r0, r6
 8007718:	47c0      	blx	r8
 800771a:	3001      	adds	r0, #1
 800771c:	d09a      	beq.n	8007654 <_printf_i+0x12c>
 800771e:	3501      	adds	r5, #1
 8007720:	68e3      	ldr	r3, [r4, #12]
 8007722:	9a03      	ldr	r2, [sp, #12]
 8007724:	1a9b      	subs	r3, r3, r2
 8007726:	42ab      	cmp	r3, r5
 8007728:	dcf2      	bgt.n	8007710 <_printf_i+0x1e8>
 800772a:	e7eb      	b.n	8007704 <_printf_i+0x1dc>
 800772c:	2500      	movs	r5, #0
 800772e:	f104 0919 	add.w	r9, r4, #25
 8007732:	e7f5      	b.n	8007720 <_printf_i+0x1f8>
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1ac      	bne.n	8007692 <_printf_i+0x16a>
 8007738:	7803      	ldrb	r3, [r0, #0]
 800773a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800773e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007742:	e76c      	b.n	800761e <_printf_i+0xf6>
 8007744:	0800824c 	.word	0x0800824c
 8007748:	0800825d 	.word	0x0800825d

0800774c <memmove>:
 800774c:	4288      	cmp	r0, r1
 800774e:	b510      	push	{r4, lr}
 8007750:	eb01 0302 	add.w	r3, r1, r2
 8007754:	d807      	bhi.n	8007766 <memmove+0x1a>
 8007756:	1e42      	subs	r2, r0, #1
 8007758:	4299      	cmp	r1, r3
 800775a:	d00a      	beq.n	8007772 <memmove+0x26>
 800775c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007760:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007764:	e7f8      	b.n	8007758 <memmove+0xc>
 8007766:	4283      	cmp	r3, r0
 8007768:	d9f5      	bls.n	8007756 <memmove+0xa>
 800776a:	1881      	adds	r1, r0, r2
 800776c:	1ad2      	subs	r2, r2, r3
 800776e:	42d3      	cmn	r3, r2
 8007770:	d100      	bne.n	8007774 <memmove+0x28>
 8007772:	bd10      	pop	{r4, pc}
 8007774:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007778:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800777c:	e7f7      	b.n	800776e <memmove+0x22>
	...

08007780 <_free_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	4605      	mov	r5, r0
 8007784:	2900      	cmp	r1, #0
 8007786:	d045      	beq.n	8007814 <_free_r+0x94>
 8007788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800778c:	1f0c      	subs	r4, r1, #4
 800778e:	2b00      	cmp	r3, #0
 8007790:	bfb8      	it	lt
 8007792:	18e4      	addlt	r4, r4, r3
 8007794:	f000 f8d2 	bl	800793c <__malloc_lock>
 8007798:	4a1f      	ldr	r2, [pc, #124]	; (8007818 <_free_r+0x98>)
 800779a:	6813      	ldr	r3, [r2, #0]
 800779c:	4610      	mov	r0, r2
 800779e:	b933      	cbnz	r3, 80077ae <_free_r+0x2e>
 80077a0:	6063      	str	r3, [r4, #4]
 80077a2:	6014      	str	r4, [r2, #0]
 80077a4:	4628      	mov	r0, r5
 80077a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077aa:	f000 b8c8 	b.w	800793e <__malloc_unlock>
 80077ae:	42a3      	cmp	r3, r4
 80077b0:	d90c      	bls.n	80077cc <_free_r+0x4c>
 80077b2:	6821      	ldr	r1, [r4, #0]
 80077b4:	1862      	adds	r2, r4, r1
 80077b6:	4293      	cmp	r3, r2
 80077b8:	bf04      	itt	eq
 80077ba:	681a      	ldreq	r2, [r3, #0]
 80077bc:	685b      	ldreq	r3, [r3, #4]
 80077be:	6063      	str	r3, [r4, #4]
 80077c0:	bf04      	itt	eq
 80077c2:	1852      	addeq	r2, r2, r1
 80077c4:	6022      	streq	r2, [r4, #0]
 80077c6:	6004      	str	r4, [r0, #0]
 80077c8:	e7ec      	b.n	80077a4 <_free_r+0x24>
 80077ca:	4613      	mov	r3, r2
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	b10a      	cbz	r2, 80077d4 <_free_r+0x54>
 80077d0:	42a2      	cmp	r2, r4
 80077d2:	d9fa      	bls.n	80077ca <_free_r+0x4a>
 80077d4:	6819      	ldr	r1, [r3, #0]
 80077d6:	1858      	adds	r0, r3, r1
 80077d8:	42a0      	cmp	r0, r4
 80077da:	d10b      	bne.n	80077f4 <_free_r+0x74>
 80077dc:	6820      	ldr	r0, [r4, #0]
 80077de:	4401      	add	r1, r0
 80077e0:	1858      	adds	r0, r3, r1
 80077e2:	4282      	cmp	r2, r0
 80077e4:	6019      	str	r1, [r3, #0]
 80077e6:	d1dd      	bne.n	80077a4 <_free_r+0x24>
 80077e8:	6810      	ldr	r0, [r2, #0]
 80077ea:	6852      	ldr	r2, [r2, #4]
 80077ec:	605a      	str	r2, [r3, #4]
 80077ee:	4401      	add	r1, r0
 80077f0:	6019      	str	r1, [r3, #0]
 80077f2:	e7d7      	b.n	80077a4 <_free_r+0x24>
 80077f4:	d902      	bls.n	80077fc <_free_r+0x7c>
 80077f6:	230c      	movs	r3, #12
 80077f8:	602b      	str	r3, [r5, #0]
 80077fa:	e7d3      	b.n	80077a4 <_free_r+0x24>
 80077fc:	6820      	ldr	r0, [r4, #0]
 80077fe:	1821      	adds	r1, r4, r0
 8007800:	428a      	cmp	r2, r1
 8007802:	bf04      	itt	eq
 8007804:	6811      	ldreq	r1, [r2, #0]
 8007806:	6852      	ldreq	r2, [r2, #4]
 8007808:	6062      	str	r2, [r4, #4]
 800780a:	bf04      	itt	eq
 800780c:	1809      	addeq	r1, r1, r0
 800780e:	6021      	streq	r1, [r4, #0]
 8007810:	605c      	str	r4, [r3, #4]
 8007812:	e7c7      	b.n	80077a4 <_free_r+0x24>
 8007814:	bd38      	pop	{r3, r4, r5, pc}
 8007816:	bf00      	nop
 8007818:	200018bc 	.word	0x200018bc

0800781c <_malloc_r>:
 800781c:	b570      	push	{r4, r5, r6, lr}
 800781e:	1ccd      	adds	r5, r1, #3
 8007820:	f025 0503 	bic.w	r5, r5, #3
 8007824:	3508      	adds	r5, #8
 8007826:	2d0c      	cmp	r5, #12
 8007828:	bf38      	it	cc
 800782a:	250c      	movcc	r5, #12
 800782c:	2d00      	cmp	r5, #0
 800782e:	4606      	mov	r6, r0
 8007830:	db01      	blt.n	8007836 <_malloc_r+0x1a>
 8007832:	42a9      	cmp	r1, r5
 8007834:	d903      	bls.n	800783e <_malloc_r+0x22>
 8007836:	230c      	movs	r3, #12
 8007838:	6033      	str	r3, [r6, #0]
 800783a:	2000      	movs	r0, #0
 800783c:	bd70      	pop	{r4, r5, r6, pc}
 800783e:	f000 f87d 	bl	800793c <__malloc_lock>
 8007842:	4a21      	ldr	r2, [pc, #132]	; (80078c8 <_malloc_r+0xac>)
 8007844:	6814      	ldr	r4, [r2, #0]
 8007846:	4621      	mov	r1, r4
 8007848:	b991      	cbnz	r1, 8007870 <_malloc_r+0x54>
 800784a:	4c20      	ldr	r4, [pc, #128]	; (80078cc <_malloc_r+0xb0>)
 800784c:	6823      	ldr	r3, [r4, #0]
 800784e:	b91b      	cbnz	r3, 8007858 <_malloc_r+0x3c>
 8007850:	4630      	mov	r0, r6
 8007852:	f000 f863 	bl	800791c <_sbrk_r>
 8007856:	6020      	str	r0, [r4, #0]
 8007858:	4629      	mov	r1, r5
 800785a:	4630      	mov	r0, r6
 800785c:	f000 f85e 	bl	800791c <_sbrk_r>
 8007860:	1c43      	adds	r3, r0, #1
 8007862:	d124      	bne.n	80078ae <_malloc_r+0x92>
 8007864:	230c      	movs	r3, #12
 8007866:	6033      	str	r3, [r6, #0]
 8007868:	4630      	mov	r0, r6
 800786a:	f000 f868 	bl	800793e <__malloc_unlock>
 800786e:	e7e4      	b.n	800783a <_malloc_r+0x1e>
 8007870:	680b      	ldr	r3, [r1, #0]
 8007872:	1b5b      	subs	r3, r3, r5
 8007874:	d418      	bmi.n	80078a8 <_malloc_r+0x8c>
 8007876:	2b0b      	cmp	r3, #11
 8007878:	d90f      	bls.n	800789a <_malloc_r+0x7e>
 800787a:	600b      	str	r3, [r1, #0]
 800787c:	50cd      	str	r5, [r1, r3]
 800787e:	18cc      	adds	r4, r1, r3
 8007880:	4630      	mov	r0, r6
 8007882:	f000 f85c 	bl	800793e <__malloc_unlock>
 8007886:	f104 000b 	add.w	r0, r4, #11
 800788a:	1d23      	adds	r3, r4, #4
 800788c:	f020 0007 	bic.w	r0, r0, #7
 8007890:	1ac3      	subs	r3, r0, r3
 8007892:	d0d3      	beq.n	800783c <_malloc_r+0x20>
 8007894:	425a      	negs	r2, r3
 8007896:	50e2      	str	r2, [r4, r3]
 8007898:	e7d0      	b.n	800783c <_malloc_r+0x20>
 800789a:	428c      	cmp	r4, r1
 800789c:	684b      	ldr	r3, [r1, #4]
 800789e:	bf16      	itet	ne
 80078a0:	6063      	strne	r3, [r4, #4]
 80078a2:	6013      	streq	r3, [r2, #0]
 80078a4:	460c      	movne	r4, r1
 80078a6:	e7eb      	b.n	8007880 <_malloc_r+0x64>
 80078a8:	460c      	mov	r4, r1
 80078aa:	6849      	ldr	r1, [r1, #4]
 80078ac:	e7cc      	b.n	8007848 <_malloc_r+0x2c>
 80078ae:	1cc4      	adds	r4, r0, #3
 80078b0:	f024 0403 	bic.w	r4, r4, #3
 80078b4:	42a0      	cmp	r0, r4
 80078b6:	d005      	beq.n	80078c4 <_malloc_r+0xa8>
 80078b8:	1a21      	subs	r1, r4, r0
 80078ba:	4630      	mov	r0, r6
 80078bc:	f000 f82e 	bl	800791c <_sbrk_r>
 80078c0:	3001      	adds	r0, #1
 80078c2:	d0cf      	beq.n	8007864 <_malloc_r+0x48>
 80078c4:	6025      	str	r5, [r4, #0]
 80078c6:	e7db      	b.n	8007880 <_malloc_r+0x64>
 80078c8:	200018bc 	.word	0x200018bc
 80078cc:	200018c0 	.word	0x200018c0

080078d0 <_realloc_r>:
 80078d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d2:	4607      	mov	r7, r0
 80078d4:	4614      	mov	r4, r2
 80078d6:	460e      	mov	r6, r1
 80078d8:	b921      	cbnz	r1, 80078e4 <_realloc_r+0x14>
 80078da:	4611      	mov	r1, r2
 80078dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80078e0:	f7ff bf9c 	b.w	800781c <_malloc_r>
 80078e4:	b922      	cbnz	r2, 80078f0 <_realloc_r+0x20>
 80078e6:	f7ff ff4b 	bl	8007780 <_free_r>
 80078ea:	4625      	mov	r5, r4
 80078ec:	4628      	mov	r0, r5
 80078ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078f0:	f000 f826 	bl	8007940 <_malloc_usable_size_r>
 80078f4:	42a0      	cmp	r0, r4
 80078f6:	d20f      	bcs.n	8007918 <_realloc_r+0x48>
 80078f8:	4621      	mov	r1, r4
 80078fa:	4638      	mov	r0, r7
 80078fc:	f7ff ff8e 	bl	800781c <_malloc_r>
 8007900:	4605      	mov	r5, r0
 8007902:	2800      	cmp	r0, #0
 8007904:	d0f2      	beq.n	80078ec <_realloc_r+0x1c>
 8007906:	4631      	mov	r1, r6
 8007908:	4622      	mov	r2, r4
 800790a:	f7ff fbfb 	bl	8007104 <memcpy>
 800790e:	4631      	mov	r1, r6
 8007910:	4638      	mov	r0, r7
 8007912:	f7ff ff35 	bl	8007780 <_free_r>
 8007916:	e7e9      	b.n	80078ec <_realloc_r+0x1c>
 8007918:	4635      	mov	r5, r6
 800791a:	e7e7      	b.n	80078ec <_realloc_r+0x1c>

0800791c <_sbrk_r>:
 800791c:	b538      	push	{r3, r4, r5, lr}
 800791e:	4c06      	ldr	r4, [pc, #24]	; (8007938 <_sbrk_r+0x1c>)
 8007920:	2300      	movs	r3, #0
 8007922:	4605      	mov	r5, r0
 8007924:	4608      	mov	r0, r1
 8007926:	6023      	str	r3, [r4, #0]
 8007928:	f7ff fb16 	bl	8006f58 <_sbrk>
 800792c:	1c43      	adds	r3, r0, #1
 800792e:	d102      	bne.n	8007936 <_sbrk_r+0x1a>
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	b103      	cbz	r3, 8007936 <_sbrk_r+0x1a>
 8007934:	602b      	str	r3, [r5, #0]
 8007936:	bd38      	pop	{r3, r4, r5, pc}
 8007938:	20001a20 	.word	0x20001a20

0800793c <__malloc_lock>:
 800793c:	4770      	bx	lr

0800793e <__malloc_unlock>:
 800793e:	4770      	bx	lr

08007940 <_malloc_usable_size_r>:
 8007940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007944:	1f18      	subs	r0, r3, #4
 8007946:	2b00      	cmp	r3, #0
 8007948:	bfbc      	itt	lt
 800794a:	580b      	ldrlt	r3, [r1, r0]
 800794c:	18c0      	addlt	r0, r0, r3
 800794e:	4770      	bx	lr

08007950 <_init>:
 8007950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007952:	bf00      	nop
 8007954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007956:	bc08      	pop	{r3}
 8007958:	469e      	mov	lr, r3
 800795a:	4770      	bx	lr

0800795c <_fini>:
 800795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795e:	bf00      	nop
 8007960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007962:	bc08      	pop	{r3}
 8007964:	469e      	mov	lr, r3
 8007966:	4770      	bx	lr
