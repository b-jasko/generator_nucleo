
generator_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afd4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bc8  0800b168  0800b168  0001b168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd30  0800bd30  000214a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd30  0800bd30  0001bd30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd38  0800bd38  000214a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd38  0800bd38  0001bd38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd3c  0800bd3c  0001bd3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000014a0  20000000  0800bd40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000178c  200014a0  0800d1e0  000214a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002c2c  0800d1e0  00022c2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000214a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b963  00000000  00000000  000214d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038cd  00000000  00000000  0003ce33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017a8  00000000  00000000  00040700  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015f0  00000000  00000000  00041ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ac38  00000000  00000000  00043498  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000130dc  00000000  00000000  0006e0d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ff759  00000000  00000000  000811ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00180905  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d88  00000000  00000000  00180980  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200014a0 	.word	0x200014a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b14c 	.word	0x0800b14c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200014a4 	.word	0x200014a4
 80001cc:	0800b14c 	.word	0x0800b14c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b972 	b.w	8000f04 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	4688      	mov	r8, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d14b      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c46:	428a      	cmp	r2, r1
 8000c48:	4615      	mov	r5, r2
 8000c4a:	d967      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0720 	rsb	r7, r2, #32
 8000c56:	fa01 f302 	lsl.w	r3, r1, r2
 8000c5a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c5e:	4095      	lsls	r5, r2
 8000c60:	ea47 0803 	orr.w	r8, r7, r3
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c70:	fa1f fc85 	uxth.w	ip, r5
 8000c74:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c78:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18eb      	adds	r3, r5, r3
 8000c86:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c8a:	f080 811b 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8118 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000c94:	3f02      	subs	r7, #2
 8000c96:	442b      	add	r3, r5
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ca0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cac:	45a4      	cmp	ip, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	192c      	adds	r4, r5, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	f080 8107 	bcs.w	8000ec8 <__udivmoddi4+0x290>
 8000cba:	45a4      	cmp	ip, r4
 8000cbc:	f240 8104 	bls.w	8000ec8 <__udivmoddi4+0x290>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	442c      	add	r4, r5
 8000cc4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cc8:	eba4 040c 	sub.w	r4, r4, ip
 8000ccc:	2700      	movs	r7, #0
 8000cce:	b11e      	cbz	r6, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cd8:	4639      	mov	r1, r7
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0xbe>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f000 80eb 	beq.w	8000ebe <__udivmoddi4+0x286>
 8000ce8:	2700      	movs	r7, #0
 8000cea:	e9c6 0100 	strd	r0, r1, [r6]
 8000cee:	4638      	mov	r0, r7
 8000cf0:	4639      	mov	r1, r7
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	fab3 f783 	clz	r7, r3
 8000cfa:	2f00      	cmp	r7, #0
 8000cfc:	d147      	bne.n	8000d8e <__udivmoddi4+0x156>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xd0>
 8000d02:	4282      	cmp	r2, r0
 8000d04:	f200 80fa 	bhi.w	8000efc <__udivmoddi4+0x2c4>
 8000d08:	1a84      	subs	r4, r0, r2
 8000d0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	4698      	mov	r8, r3
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d0e0      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d16:	e9c6 4800 	strd	r4, r8, [r6]
 8000d1a:	e7dd      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d1c:	b902      	cbnz	r2, 8000d20 <__udivmoddi4+0xe8>
 8000d1e:	deff      	udf	#255	; 0xff
 8000d20:	fab2 f282 	clz	r2, r2
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	f040 808f 	bne.w	8000e48 <__udivmoddi4+0x210>
 8000d2a:	1b49      	subs	r1, r1, r5
 8000d2c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d30:	fa1f f885 	uxth.w	r8, r5
 8000d34:	2701      	movs	r7, #1
 8000d36:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d44:	fb08 f10c 	mul.w	r1, r8, ip
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x124>
 8000d4c:	18eb      	adds	r3, r5, r3
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x122>
 8000d54:	4299      	cmp	r1, r3
 8000d56:	f200 80cd 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d68:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x14c>
 8000d74:	192c      	adds	r4, r5, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x14a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80b6 	bhi.w	8000eee <__udivmoddi4+0x2b6>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e79f      	b.n	8000cce <__udivmoddi4+0x96>
 8000d8e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d92:	40bb      	lsls	r3, r7
 8000d94:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d98:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d9c:	fa01 f407 	lsl.w	r4, r1, r7
 8000da0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000da4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000da8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dac:	4325      	orrs	r5, r4
 8000dae:	fbb3 f9f8 	udiv	r9, r3, r8
 8000db2:	0c2c      	lsrs	r4, r5, #16
 8000db4:	fb08 3319 	mls	r3, r8, r9, r3
 8000db8:	fa1f fa8e 	uxth.w	sl, lr
 8000dbc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000dc0:	fb09 f40a 	mul.w	r4, r9, sl
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dca:	fa00 f107 	lsl.w	r1, r0, r7
 8000dce:	d90b      	bls.n	8000de8 <__udivmoddi4+0x1b0>
 8000dd0:	eb1e 0303 	adds.w	r3, lr, r3
 8000dd4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd8:	f080 8087 	bcs.w	8000eea <__udivmoddi4+0x2b2>
 8000ddc:	429c      	cmp	r4, r3
 8000dde:	f240 8084 	bls.w	8000eea <__udivmoddi4+0x2b2>
 8000de2:	f1a9 0902 	sub.w	r9, r9, #2
 8000de6:	4473      	add	r3, lr
 8000de8:	1b1b      	subs	r3, r3, r4
 8000dea:	b2ad      	uxth	r5, r5
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000df8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dfc:	45a2      	cmp	sl, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x1da>
 8000e00:	eb1e 0404 	adds.w	r4, lr, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	d26b      	bcs.n	8000ee2 <__udivmoddi4+0x2aa>
 8000e0a:	45a2      	cmp	sl, r4
 8000e0c:	d969      	bls.n	8000ee2 <__udivmoddi4+0x2aa>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4474      	add	r4, lr
 8000e12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e16:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1a:	eba4 040a 	sub.w	r4, r4, sl
 8000e1e:	454c      	cmp	r4, r9
 8000e20:	46c2      	mov	sl, r8
 8000e22:	464b      	mov	r3, r9
 8000e24:	d354      	bcc.n	8000ed0 <__udivmoddi4+0x298>
 8000e26:	d051      	beq.n	8000ecc <__udivmoddi4+0x294>
 8000e28:	2e00      	cmp	r6, #0
 8000e2a:	d069      	beq.n	8000f00 <__udivmoddi4+0x2c8>
 8000e2c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e30:	eb64 0403 	sbc.w	r4, r4, r3
 8000e34:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e38:	40fd      	lsrs	r5, r7
 8000e3a:	40fc      	lsrs	r4, r7
 8000e3c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e40:	e9c6 5400 	strd	r5, r4, [r6]
 8000e44:	2700      	movs	r7, #0
 8000e46:	e747      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000e48:	f1c2 0320 	rsb	r3, r2, #32
 8000e4c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e50:	4095      	lsls	r5, r2
 8000e52:	fa01 f002 	lsl.w	r0, r1, r2
 8000e56:	fa21 f303 	lsr.w	r3, r1, r3
 8000e5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e5e:	4338      	orrs	r0, r7
 8000e60:	0c01      	lsrs	r1, r0, #16
 8000e62:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e66:	fa1f f885 	uxth.w	r8, r5
 8000e6a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb07 f308 	mul.w	r3, r7, r8
 8000e76:	428b      	cmp	r3, r1
 8000e78:	fa04 f402 	lsl.w	r4, r4, r2
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x256>
 8000e7e:	1869      	adds	r1, r5, r1
 8000e80:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e84:	d22f      	bcs.n	8000ee6 <__udivmoddi4+0x2ae>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d92d      	bls.n	8000ee6 <__udivmoddi4+0x2ae>
 8000e8a:	3f02      	subs	r7, #2
 8000e8c:	4429      	add	r1, r5
 8000e8e:	1acb      	subs	r3, r1, r3
 8000e90:	b281      	uxth	r1, r0
 8000e92:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e96:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e9e:	fb00 f308 	mul.w	r3, r0, r8
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d907      	bls.n	8000eb6 <__udivmoddi4+0x27e>
 8000ea6:	1869      	adds	r1, r5, r1
 8000ea8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eac:	d217      	bcs.n	8000ede <__udivmoddi4+0x2a6>
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d915      	bls.n	8000ede <__udivmoddi4+0x2a6>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4429      	add	r1, r5
 8000eb6:	1ac9      	subs	r1, r1, r3
 8000eb8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ebc:	e73b      	b.n	8000d36 <__udivmoddi4+0xfe>
 8000ebe:	4637      	mov	r7, r6
 8000ec0:	4630      	mov	r0, r6
 8000ec2:	e709      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec4:	4607      	mov	r7, r0
 8000ec6:	e6e7      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec8:	4618      	mov	r0, r3
 8000eca:	e6fb      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ecc:	4541      	cmp	r1, r8
 8000ece:	d2ab      	bcs.n	8000e28 <__udivmoddi4+0x1f0>
 8000ed0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ed4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ed8:	3801      	subs	r0, #1
 8000eda:	4613      	mov	r3, r2
 8000edc:	e7a4      	b.n	8000e28 <__udivmoddi4+0x1f0>
 8000ede:	4660      	mov	r0, ip
 8000ee0:	e7e9      	b.n	8000eb6 <__udivmoddi4+0x27e>
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	e795      	b.n	8000e12 <__udivmoddi4+0x1da>
 8000ee6:	4667      	mov	r7, ip
 8000ee8:	e7d1      	b.n	8000e8e <__udivmoddi4+0x256>
 8000eea:	4681      	mov	r9, r0
 8000eec:	e77c      	b.n	8000de8 <__udivmoddi4+0x1b0>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	442c      	add	r4, r5
 8000ef2:	e747      	b.n	8000d84 <__udivmoddi4+0x14c>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	442b      	add	r3, r5
 8000efa:	e72f      	b.n	8000d5c <__udivmoddi4+0x124>
 8000efc:	4638      	mov	r0, r7
 8000efe:	e708      	b.n	8000d12 <__udivmoddi4+0xda>
 8000f00:	4637      	mov	r7, r6
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0xa0>

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f12:	2003      	movs	r0, #3
 8000f14:	f000 f95a 	bl	80011cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f18:	200f      	movs	r0, #15
 8000f1a:	f000 f80d 	bl	8000f38 <HAL_InitTick>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d002      	beq.n	8000f2a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	71fb      	strb	r3, [r7, #7]
 8000f28:	e001      	b.n	8000f2e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f2a:	f007 fddb 	bl	8008ae4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f40:	2300      	movs	r3, #0
 8000f42:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <HAL_InitTick+0x68>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d022      	beq.n	8000f92 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <HAL_InitTick+0x6c>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <HAL_InitTick+0x68>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f58:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 f968 	bl	8001236 <HAL_SYSTICK_Config>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d10f      	bne.n	8000f8c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b0f      	cmp	r3, #15
 8000f70:	d809      	bhi.n	8000f86 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f72:	2200      	movs	r2, #0
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7a:	f000 f932 	bl	80011e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <HAL_InitTick+0x70>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	e007      	b.n	8000f96 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	e004      	b.n	8000f96 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	73fb      	strb	r3, [r7, #15]
 8000f90:	e001      	b.n	8000f96 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000004 	.word	0x20000004
 8000fa4:	200012c8 	.word	0x200012c8
 8000fa8:	20000000 	.word	0x20000000

08000fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <HAL_IncTick+0x1c>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <HAL_IncTick+0x20>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4413      	add	r3, r2
 8000fba:	4a03      	ldr	r2, [pc, #12]	; (8000fc8 <HAL_IncTick+0x1c>)
 8000fbc:	6013      	str	r3, [r2, #0]
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	20002a64 	.word	0x20002a64
 8000fcc:	20000004 	.word	0x20000004

08000fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <HAL_GetTick+0x14>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20002a64 	.word	0x20002a64

08000fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff0:	f7ff ffee 	bl	8000fd0 <HAL_GetTick>
 8000ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001000:	d004      	beq.n	800100c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <HAL_Delay+0x40>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	4413      	add	r3, r2
 800100a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800100c:	bf00      	nop
 800100e:	f7ff ffdf 	bl	8000fd0 <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	429a      	cmp	r2, r3
 800101c:	d8f7      	bhi.n	800100e <HAL_Delay+0x26>
  {
  }
}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000004 	.word	0x20000004

0800102c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001048:	4013      	ands	r3, r2
 800104a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105e:	4a04      	ldr	r2, [pc, #16]	; (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	60d3      	str	r3, [r2, #12]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <__NVIC_GetPriorityGrouping+0x18>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	f003 0307 	and.w	r3, r3, #7
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	db0b      	blt.n	80010ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	f003 021f 	and.w	r2, r3, #31
 80010a8:	4907      	ldr	r1, [pc, #28]	; (80010c8 <__NVIC_EnableIRQ+0x38>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	095b      	lsrs	r3, r3, #5
 80010b0:	2001      	movs	r0, #1
 80010b2:	fa00 f202 	lsl.w	r2, r0, r2
 80010b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000e100 	.word	0xe000e100

080010cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	db0a      	blt.n	80010f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	490c      	ldr	r1, [pc, #48]	; (8001118 <__NVIC_SetPriority+0x4c>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	0112      	lsls	r2, r2, #4
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	440b      	add	r3, r1
 80010f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f4:	e00a      	b.n	800110c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4908      	ldr	r1, [pc, #32]	; (800111c <__NVIC_SetPriority+0x50>)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	3b04      	subs	r3, #4
 8001104:	0112      	lsls	r2, r2, #4
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	440b      	add	r3, r1
 800110a:	761a      	strb	r2, [r3, #24]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000e100 	.word	0xe000e100
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	; 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f1c3 0307 	rsb	r3, r3, #7
 800113a:	2b04      	cmp	r3, #4
 800113c:	bf28      	it	cs
 800113e:	2304      	movcs	r3, #4
 8001140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3304      	adds	r3, #4
 8001146:	2b06      	cmp	r3, #6
 8001148:	d902      	bls.n	8001150 <NVIC_EncodePriority+0x30>
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3b03      	subs	r3, #3
 800114e:	e000      	b.n	8001152 <NVIC_EncodePriority+0x32>
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	f04f 32ff 	mov.w	r2, #4294967295
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43da      	mvns	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	401a      	ands	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001168:	f04f 31ff 	mov.w	r1, #4294967295
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	43d9      	mvns	r1, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	4313      	orrs	r3, r2
         );
}
 800117a:	4618      	mov	r0, r3
 800117c:	3724      	adds	r7, #36	; 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001198:	d301      	bcc.n	800119e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119a:	2301      	movs	r3, #1
 800119c:	e00f      	b.n	80011be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <SysTick_Config+0x40>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a6:	210f      	movs	r1, #15
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f7ff ff8e 	bl	80010cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <SysTick_Config+0x40>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <SysTick_Config+0x40>)
 80011b8:	2207      	movs	r2, #7
 80011ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	e000e010 	.word	0xe000e010

080011cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff29 	bl	800102c <__NVIC_SetPriorityGrouping>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011f4:	f7ff ff3e 	bl	8001074 <__NVIC_GetPriorityGrouping>
 80011f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f7ff ff8e 	bl	8001120 <NVIC_EncodePriority>
 8001204:	4602      	mov	r2, r0
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff5d 	bl	80010cc <__NVIC_SetPriority>
}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff31 	bl	8001090 <__NVIC_EnableIRQ>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffa2 	bl	8001188 <SysTick_Config>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e014      	b.n	800128a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	791b      	ldrb	r3, [r3, #4]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d105      	bne.n	8001276 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f007 fc5f 	bl	8008b34 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2202      	movs	r2, #2
 800127a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2201      	movs	r2, #1
 8001286:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	795b      	ldrb	r3, [r3, #5]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <HAL_DAC_Start+0x16>
 80012a4:	2302      	movs	r3, #2
 80012a6:	e03b      	b.n	8001320 <HAL_DAC_Start+0x8e>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2202      	movs	r2, #2
 80012b2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6819      	ldr	r1, [r3, #0]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	f003 0310 	and.w	r3, r3, #16
 80012c0:	2201      	movs	r2, #1
 80012c2:	409a      	lsls	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	430a      	orrs	r2, r1
 80012ca:	601a      	str	r2, [r3, #0]

#endif /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10f      	bne.n	80012f2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d118      	bne.n	8001312 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f042 0201 	orr.w	r2, r2, #1
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	e00f      	b.n	8001312 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80012fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001300:	d107      	bne.n	8001312 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f042 0202 	orr.w	r2, r2, #2
 8001310:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800132c:	b480      	push	{r7}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
 8001338:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d105      	bne.n	8001356 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4413      	add	r3, r2
 8001350:	3308      	adds	r3, #8
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	e004      	b.n	8001360 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4413      	add	r3, r2
 800135c:	3314      	adds	r3, #20
 800135e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	461a      	mov	r2, r3
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	371c      	adds	r7, #28
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b088      	sub	sp, #32
 800137a:	af00      	add	r7, sp, #0
 800137c:	60f8      	str	r0, [r7, #12]
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	795b      	ldrb	r3, [r3, #5]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d101      	bne.n	8001392 <HAL_DAC_ConfigChannel+0x1c>
 800138e:	2302      	movs	r3, #2
 8001390:	e107      	b.n	80015a2 <HAL_DAC_ConfigChannel+0x22c>
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2201      	movs	r2, #1
 8001396:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2202      	movs	r2, #2
 800139c:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d174      	bne.n	8001490 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d137      	bne.n	800141c <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 80013ac:	f7ff fe10 	bl	8000fd0 <HAL_GetTick>
 80013b0:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80013b2:	e011      	b.n	80013d8 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80013b4:	f7ff fe0c 	bl	8000fd0 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d90a      	bls.n	80013d8 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	f043 0208 	orr.w	r2, r3, #8
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2203      	movs	r2, #3
 80013d2:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e0e4      	b.n	80015a2 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1e6      	bne.n	80013b4 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80013e6:	2001      	movs	r0, #1
 80013e8:	f7ff fdfe 	bl	8000fe8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68ba      	ldr	r2, [r7, #8]
 80013f2:	6992      	ldr	r2, [r2, #24]
 80013f4:	641a      	str	r2, [r3, #64]	; 0x40
 80013f6:	e01e      	b.n	8001436 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80013f8:	f7ff fdea 	bl	8000fd0 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b01      	cmp	r3, #1
 8001404:	d90a      	bls.n	800141c <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	f043 0208 	orr.w	r2, r3, #8
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2203      	movs	r2, #3
 8001416:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e0c2      	b.n	80015a2 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001422:	2b00      	cmp	r3, #0
 8001424:	dbe8      	blt.n	80013f8 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001426:	2001      	movs	r0, #1
 8001428:	f7ff fdde 	bl	8000fe8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68ba      	ldr	r2, [r7, #8]
 8001432:	6992      	ldr	r2, [r2, #24]
 8001434:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f003 0310 	and.w	r3, r3, #16
 8001442:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	ea02 0103 	and.w	r1, r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	69da      	ldr	r2, [r3, #28]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	409a      	lsls	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	430a      	orrs	r2, r1
 8001462:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f003 0310 	and.w	r3, r3, #16
 8001470:	21ff      	movs	r1, #255	; 0xff
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	ea02 0103 	and.w	r1, r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	6a1a      	ldr	r2, [r3, #32]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0310 	and.w	r3, r3, #16
 8001486:	409a      	lsls	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d11d      	bne.n	80014d4 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149e:	61bb      	str	r3, [r7, #24]
  /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f003 0310 	and.w	r3, r3, #16
 80014a6:	221f      	movs	r2, #31
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	617b      	str	r3, [r7, #20]
  /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f003 0310 	and.w	r3, r3, #16
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014da:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	2207      	movs	r2, #7
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	431a      	orrs	r2, r3
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	4313      	orrs	r3, r2
 8001500:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f003 0310 	and.w	r3, r3, #16
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6819      	ldr	r1, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f003 0310 	and.w	r3, r3, #16
 8001528:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43da      	mvns	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	400a      	ands	r2, r1
 8001538:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f003 0310 	and.w	r3, r3, #16
 8001548:	f640 72fc 	movw	r2, #4092	; 0xffc
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f003 0310 	and.w	r3, r3, #16
 8001564:	697a      	ldr	r2, [r7, #20]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6819      	ldr	r1, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f003 0310 	and.w	r3, r3, #16
 8001584:	22c0      	movs	r2, #192	; 0xc0
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43da      	mvns	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	400a      	ands	r2, r1
 8001592:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2201      	movs	r2, #1
 8001598:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2200      	movs	r2, #0
 800159e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3720      	adds	r7, #32
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d005      	beq.n	80015ce <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2204      	movs	r2, #4
 80015c6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	e029      	b.n	8001622 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 020e 	bic.w	r2, r2, #14
 80015dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 0201 	bic.w	r2, r2, #1
 80015ec:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	f003 021c 	and.w	r2, r3, #28
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	2101      	movs	r1, #1
 80015fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001600:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	4798      	blx	r3
    }
  }
  return status;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163a:	e17f      	b.n	800193c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2101      	movs	r1, #1
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	4013      	ands	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 8171 	beq.w	8001936 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x38>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b12      	cmp	r3, #18
 8001662:	d123      	bne.n	80016ac <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	08da      	lsrs	r2, r3, #3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3208      	adds	r2, #8
 800166c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	220f      	movs	r2, #15
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	691a      	ldr	r2, [r3, #16]
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	08da      	lsrs	r2, r3, #3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3208      	adds	r2, #8
 80016a6:	6939      	ldr	r1, [r7, #16]
 80016a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0203 	and.w	r2, r3, #3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d00b      	beq.n	8001700 <HAL_GPIO_Init+0xd4>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d007      	beq.n	8001700 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016f4:	2b11      	cmp	r3, #17
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b12      	cmp	r3, #18
 80016fe:	d130      	bne.n	8001762 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	2203      	movs	r2, #3
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4013      	ands	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	68da      	ldr	r2, [r3, #12]
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001736:	2201      	movs	r2, #1
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	091b      	lsrs	r3, r3, #4
 800174c:	f003 0201 	and.w	r2, r3, #1
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b03      	cmp	r3, #3
 800176c:	d118      	bne.n	80017a0 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001774:	2201      	movs	r2, #1
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	08db      	lsrs	r3, r3, #3
 800178a:	f003 0201 	and.w	r2, r3, #1
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	2203      	movs	r2, #3
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 80ac 	beq.w	8001936 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017de:	4b5e      	ldr	r3, [pc, #376]	; (8001958 <HAL_GPIO_Init+0x32c>)
 80017e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e2:	4a5d      	ldr	r2, [pc, #372]	; (8001958 <HAL_GPIO_Init+0x32c>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6613      	str	r3, [r2, #96]	; 0x60
 80017ea:	4b5b      	ldr	r3, [pc, #364]	; (8001958 <HAL_GPIO_Init+0x32c>)
 80017ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017f6:	4a59      	ldr	r2, [pc, #356]	; (800195c <HAL_GPIO_Init+0x330>)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	089b      	lsrs	r3, r3, #2
 80017fc:	3302      	adds	r3, #2
 80017fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001802:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	220f      	movs	r2, #15
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001820:	d025      	beq.n	800186e <HAL_GPIO_Init+0x242>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a4e      	ldr	r2, [pc, #312]	; (8001960 <HAL_GPIO_Init+0x334>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d01f      	beq.n	800186a <HAL_GPIO_Init+0x23e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a4d      	ldr	r2, [pc, #308]	; (8001964 <HAL_GPIO_Init+0x338>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d019      	beq.n	8001866 <HAL_GPIO_Init+0x23a>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a4c      	ldr	r2, [pc, #304]	; (8001968 <HAL_GPIO_Init+0x33c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d013      	beq.n	8001862 <HAL_GPIO_Init+0x236>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a4b      	ldr	r2, [pc, #300]	; (800196c <HAL_GPIO_Init+0x340>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d00d      	beq.n	800185e <HAL_GPIO_Init+0x232>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a4a      	ldr	r2, [pc, #296]	; (8001970 <HAL_GPIO_Init+0x344>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d007      	beq.n	800185a <HAL_GPIO_Init+0x22e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a49      	ldr	r2, [pc, #292]	; (8001974 <HAL_GPIO_Init+0x348>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d101      	bne.n	8001856 <HAL_GPIO_Init+0x22a>
 8001852:	2306      	movs	r3, #6
 8001854:	e00c      	b.n	8001870 <HAL_GPIO_Init+0x244>
 8001856:	2307      	movs	r3, #7
 8001858:	e00a      	b.n	8001870 <HAL_GPIO_Init+0x244>
 800185a:	2305      	movs	r3, #5
 800185c:	e008      	b.n	8001870 <HAL_GPIO_Init+0x244>
 800185e:	2304      	movs	r3, #4
 8001860:	e006      	b.n	8001870 <HAL_GPIO_Init+0x244>
 8001862:	2303      	movs	r3, #3
 8001864:	e004      	b.n	8001870 <HAL_GPIO_Init+0x244>
 8001866:	2302      	movs	r3, #2
 8001868:	e002      	b.n	8001870 <HAL_GPIO_Init+0x244>
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <HAL_GPIO_Init+0x244>
 800186e:	2300      	movs	r3, #0
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	f002 0203 	and.w	r2, r2, #3
 8001876:	0092      	lsls	r2, r2, #2
 8001878:	4093      	lsls	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001880:	4936      	ldr	r1, [pc, #216]	; (800195c <HAL_GPIO_Init+0x330>)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	089b      	lsrs	r3, r3, #2
 8001886:	3302      	adds	r3, #2
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800188e:	4b3a      	ldr	r3, [pc, #232]	; (8001978 <HAL_GPIO_Init+0x34c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018b2:	4a31      	ldr	r2, [pc, #196]	; (8001978 <HAL_GPIO_Init+0x34c>)
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80018b8:	4b2f      	ldr	r3, [pc, #188]	; (8001978 <HAL_GPIO_Init+0x34c>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018dc:	4a26      	ldr	r2, [pc, #152]	; (8001978 <HAL_GPIO_Init+0x34c>)
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018e2:	4b25      	ldr	r3, [pc, #148]	; (8001978 <HAL_GPIO_Init+0x34c>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4313      	orrs	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001906:	4a1c      	ldr	r2, [pc, #112]	; (8001978 <HAL_GPIO_Init+0x34c>)
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800190c:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <HAL_GPIO_Init+0x34c>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	43db      	mvns	r3, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001930:	4a11      	ldr	r2, [pc, #68]	; (8001978 <HAL_GPIO_Init+0x34c>)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	3301      	adds	r3, #1
 800193a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa22 f303 	lsr.w	r3, r2, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	f47f ae78 	bne.w	800163c <HAL_GPIO_Init+0x10>
  }
}
 800194c:	bf00      	nop
 800194e:	371c      	adds	r7, #28
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	40021000 	.word	0x40021000
 800195c:	40010000 	.word	0x40010000
 8001960:	48000400 	.word	0x48000400
 8001964:	48000800 	.word	0x48000800
 8001968:	48000c00 	.word	0x48000c00
 800196c:	48001000 	.word	0x48001000
 8001970:	48001400 	.word	0x48001400
 8001974:	48001800 	.word	0x48001800
 8001978:	40010400 	.word	0x40010400

0800197c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
 8001988:	4613      	mov	r3, r2
 800198a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800198c:	787b      	ldrb	r3, [r7, #1]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001998:	e002      	b.n	80019a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40007000 	.word	0x40007000

080019c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019d6:	d130      	bne.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019d8:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019e4:	d038      	beq.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019e6:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019ee:	4a1e      	ldr	r2, [pc, #120]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019f6:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2232      	movs	r2, #50	; 0x32
 80019fc:	fb02 f303 	mul.w	r3, r2, r3
 8001a00:	4a1b      	ldr	r2, [pc, #108]	; (8001a70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	0c9b      	lsrs	r3, r3, #18
 8001a08:	3301      	adds	r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a0c:	e002      	b.n	8001a14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a14:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a20:	d102      	bne.n	8001a28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1f2      	bne.n	8001a0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a34:	d110      	bne.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e00f      	b.n	8001a5a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a46:	d007      	beq.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a48:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a50:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40007000 	.word	0x40007000
 8001a6c:	200012c8 	.word	0x200012c8
 8001a70:	431bde83 	.word	0x431bde83

08001a74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e39d      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a86:	4ba4      	ldr	r3, [pc, #656]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a90:	4ba1      	ldr	r3, [pc, #644]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0310 	and.w	r3, r3, #16
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80e1 	beq.w	8001c6a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d007      	beq.n	8001abe <HAL_RCC_OscConfig+0x4a>
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	2b0c      	cmp	r3, #12
 8001ab2:	f040 8088 	bne.w	8001bc6 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	f040 8084 	bne.w	8001bc6 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001abe:	4b96      	ldr	r3, [pc, #600]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d005      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x62>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e375      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a1a      	ldr	r2, [r3, #32]
 8001ada:	4b8f      	ldr	r3, [pc, #572]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d004      	beq.n	8001af0 <HAL_RCC_OscConfig+0x7c>
 8001ae6:	4b8c      	ldr	r3, [pc, #560]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aee:	e005      	b.n	8001afc <HAL_RCC_OscConfig+0x88>
 8001af0:	4b89      	ldr	r3, [pc, #548]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af6:	091b      	lsrs	r3, r3, #4
 8001af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d223      	bcs.n	8001b48 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 fd09 	bl	800251c <RCC_SetFlashLatencyFromMSIRange>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e356      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b14:	4b80      	ldr	r3, [pc, #512]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a7f      	ldr	r2, [pc, #508]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001b1a:	f043 0308 	orr.w	r3, r3, #8
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	4b7d      	ldr	r3, [pc, #500]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	497a      	ldr	r1, [pc, #488]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b32:	4b79      	ldr	r3, [pc, #484]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	4975      	ldr	r1, [pc, #468]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	604b      	str	r3, [r1, #4]
 8001b46:	e022      	b.n	8001b8e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b48:	4b73      	ldr	r3, [pc, #460]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a72      	ldr	r2, [pc, #456]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001b4e:	f043 0308 	orr.w	r3, r3, #8
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	4b70      	ldr	r3, [pc, #448]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	496d      	ldr	r1, [pc, #436]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b66:	4b6c      	ldr	r3, [pc, #432]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	4968      	ldr	r1, [pc, #416]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 fccc 	bl	800251c <RCC_SetFlashLatencyFromMSIRange>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e319      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b8e:	f000 fc03 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8001b92:	4601      	mov	r1, r0
 8001b94:	4b60      	ldr	r3, [pc, #384]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	4a5f      	ldr	r2, [pc, #380]	; (8001d1c <HAL_RCC_OscConfig+0x2a8>)
 8001ba0:	5cd3      	ldrb	r3, [r2, r3]
 8001ba2:	f003 031f 	and.w	r3, r3, #31
 8001ba6:	fa21 f303 	lsr.w	r3, r1, r3
 8001baa:	4a5d      	ldr	r2, [pc, #372]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001bac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bae:	4b5d      	ldr	r3, [pc, #372]	; (8001d24 <HAL_RCC_OscConfig+0x2b0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff f9c0 	bl	8000f38 <HAL_InitTick>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d052      	beq.n	8001c68 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	e2fd      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d032      	beq.n	8001c34 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bce:	4b52      	ldr	r3, [pc, #328]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a51      	ldr	r2, [pc, #324]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bda:	f7ff f9f9 	bl	8000fd0 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001be2:	f7ff f9f5 	bl	8000fd0 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e2e6      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bf4:	4b48      	ldr	r3, [pc, #288]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c00:	4b45      	ldr	r3, [pc, #276]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a44      	ldr	r2, [pc, #272]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001c06:	f043 0308 	orr.w	r3, r3, #8
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	4b42      	ldr	r3, [pc, #264]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	493f      	ldr	r1, [pc, #252]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c1e:	4b3e      	ldr	r3, [pc, #248]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	493a      	ldr	r1, [pc, #232]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	604b      	str	r3, [r1, #4]
 8001c32:	e01a      	b.n	8001c6a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c34:	4b38      	ldr	r3, [pc, #224]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a37      	ldr	r2, [pc, #220]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001c3a:	f023 0301 	bic.w	r3, r3, #1
 8001c3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c40:	f7ff f9c6 	bl	8000fd0 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c48:	f7ff f9c2 	bl	8000fd0 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e2b3      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c5a:	4b2f      	ldr	r3, [pc, #188]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x1d4>
 8001c66:	e000      	b.n	8001c6a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d074      	beq.n	8001d60 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d005      	beq.n	8001c88 <HAL_RCC_OscConfig+0x214>
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2b0c      	cmp	r3, #12
 8001c80:	d10e      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d10b      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c88:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d064      	beq.n	8001d5e <HAL_RCC_OscConfig+0x2ea>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d160      	bne.n	8001d5e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e290      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca8:	d106      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x244>
 8001caa:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a1a      	ldr	r2, [pc, #104]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	e01d      	b.n	8001cf4 <HAL_RCC_OscConfig+0x280>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cc0:	d10c      	bne.n	8001cdc <HAL_RCC_OscConfig+0x268>
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a14      	ldr	r2, [pc, #80]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a11      	ldr	r2, [pc, #68]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e00b      	b.n	8001cf4 <HAL_RCC_OscConfig+0x280>
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0d      	ldr	r2, [pc, #52]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d01c      	beq.n	8001d36 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7ff f968 	bl	8000fd0 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d02:	e011      	b.n	8001d28 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d04:	f7ff f964 	bl	8000fd0 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	; 0x64
 8001d10:	d90a      	bls.n	8001d28 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e255      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	0800b9c8 	.word	0x0800b9c8
 8001d20:	200012c8 	.word	0x200012c8
 8001d24:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d28:	4bae      	ldr	r3, [pc, #696]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0e7      	beq.n	8001d04 <HAL_RCC_OscConfig+0x290>
 8001d34:	e014      	b.n	8001d60 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d36:	f7ff f94b 	bl	8000fd0 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d3e:	f7ff f947 	bl	8000fd0 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b64      	cmp	r3, #100	; 0x64
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e238      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d50:	4ba4      	ldr	r3, [pc, #656]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f0      	bne.n	8001d3e <HAL_RCC_OscConfig+0x2ca>
 8001d5c:	e000      	b.n	8001d60 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d060      	beq.n	8001e2e <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d005      	beq.n	8001d7e <HAL_RCC_OscConfig+0x30a>
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	2b0c      	cmp	r3, #12
 8001d76:	d119      	bne.n	8001dac <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d116      	bne.n	8001dac <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d7e:	4b99      	ldr	r3, [pc, #612]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_RCC_OscConfig+0x322>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e215      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d96:	4b93      	ldr	r3, [pc, #588]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	061b      	lsls	r3, r3, #24
 8001da4:	498f      	ldr	r1, [pc, #572]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001daa:	e040      	b.n	8001e2e <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d023      	beq.n	8001dfc <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db4:	4b8b      	ldr	r3, [pc, #556]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a8a      	ldr	r2, [pc, #552]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f906 	bl	8000fd0 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc8:	f7ff f902 	bl	8000fd0 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e1f3      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dda:	4b82      	ldr	r3, [pc, #520]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de6:	4b7f      	ldr	r3, [pc, #508]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	061b      	lsls	r3, r3, #24
 8001df4:	497b      	ldr	r1, [pc, #492]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	604b      	str	r3, [r1, #4]
 8001dfa:	e018      	b.n	8001e2e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dfc:	4b79      	ldr	r3, [pc, #484]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a78      	ldr	r2, [pc, #480]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001e02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7ff f8e2 	bl	8000fd0 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e10:	f7ff f8de 	bl	8000fd0 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e1cf      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e22:	4b70      	ldr	r3, [pc, #448]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d03c      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d01c      	beq.n	8001e7c <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e42:	4b68      	ldr	r3, [pc, #416]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e48:	4a66      	ldr	r2, [pc, #408]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e52:	f7ff f8bd 	bl	8000fd0 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5a:	f7ff f8b9 	bl	8000fd0 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e1aa      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e6c:	4b5d      	ldr	r3, [pc, #372]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0ef      	beq.n	8001e5a <HAL_RCC_OscConfig+0x3e6>
 8001e7a:	e01b      	b.n	8001eb4 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e7c:	4b59      	ldr	r3, [pc, #356]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e82:	4a58      	ldr	r2, [pc, #352]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8c:	f7ff f8a0 	bl	8000fd0 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e94:	f7ff f89c 	bl	8000fd0 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e18d      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ea6:	4b4f      	ldr	r3, [pc, #316]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1ef      	bne.n	8001e94 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80a5 	beq.w	800200c <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ec6:	4b47      	ldr	r3, [pc, #284]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10d      	bne.n	8001eee <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed2:	4b44      	ldr	r3, [pc, #272]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	4a43      	ldr	r2, [pc, #268]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001edc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ede:	4b41      	ldr	r3, [pc, #260]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eea:	2301      	movs	r3, #1
 8001eec:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eee:	4b3e      	ldr	r3, [pc, #248]	; (8001fe8 <HAL_RCC_OscConfig+0x574>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d118      	bne.n	8001f2c <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001efa:	4b3b      	ldr	r3, [pc, #236]	; (8001fe8 <HAL_RCC_OscConfig+0x574>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a3a      	ldr	r2, [pc, #232]	; (8001fe8 <HAL_RCC_OscConfig+0x574>)
 8001f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f06:	f7ff f863 	bl	8000fd0 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0e:	f7ff f85f 	bl	8000fd0 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e150      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f20:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <HAL_RCC_OscConfig+0x574>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0f0      	beq.n	8001f0e <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d108      	bne.n	8001f46 <HAL_RCC_OscConfig+0x4d2>
 8001f34:	4b2b      	ldr	r3, [pc, #172]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3a:	4a2a      	ldr	r2, [pc, #168]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f44:	e024      	b.n	8001f90 <HAL_RCC_OscConfig+0x51c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b05      	cmp	r3, #5
 8001f4c:	d110      	bne.n	8001f70 <HAL_RCC_OscConfig+0x4fc>
 8001f4e:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f54:	4a23      	ldr	r2, [pc, #140]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001f56:	f043 0304 	orr.w	r3, r3, #4
 8001f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f5e:	4b21      	ldr	r3, [pc, #132]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f64:	4a1f      	ldr	r2, [pc, #124]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f6e:	e00f      	b.n	8001f90 <HAL_RCC_OscConfig+0x51c>
 8001f70:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f76:	4a1b      	ldr	r2, [pc, #108]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f80:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f86:	4a17      	ldr	r2, [pc, #92]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001f88:	f023 0304 	bic.w	r3, r3, #4
 8001f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d016      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f98:	f7ff f81a 	bl	8000fd0 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa0:	f7ff f816 	bl	8000fd0 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e105      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0ed      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x52c>
 8001fc4:	e019      	b.n	8001ffa <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc6:	f7ff f803 	bl	8000fd0 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fcc:	e00e      	b.n	8001fec <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fce:	f7fe ffff 	bl	8000fd0 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d905      	bls.n	8001fec <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e0ee      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fec:	4b77      	ldr	r3, [pc, #476]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 8001fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1e9      	bne.n	8001fce <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ffa:	7ffb      	ldrb	r3, [r7, #31]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d105      	bne.n	800200c <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002000:	4b72      	ldr	r3, [pc, #456]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	4a71      	ldr	r2, [pc, #452]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 8002006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800200a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 80d5 	beq.w	80021c0 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	2b0c      	cmp	r3, #12
 800201a:	f000 808e 	beq.w	800213a <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002022:	2b02      	cmp	r3, #2
 8002024:	d15b      	bne.n	80020de <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002026:	4b69      	ldr	r3, [pc, #420]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a68      	ldr	r2, [pc, #416]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 800202c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002032:	f7fe ffcd 	bl	8000fd0 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203a:	f7fe ffc9 	bl	8000fd0 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e0ba      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800204c:	4b5f      	ldr	r3, [pc, #380]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1f0      	bne.n	800203a <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002058:	4b5c      	ldr	r3, [pc, #368]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	4b5c      	ldr	r3, [pc, #368]	; (80021d0 <HAL_RCC_OscConfig+0x75c>)
 800205e:	4013      	ands	r3, r2
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002068:	3a01      	subs	r2, #1
 800206a:	0112      	lsls	r2, r2, #4
 800206c:	4311      	orrs	r1, r2
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002072:	0212      	lsls	r2, r2, #8
 8002074:	4311      	orrs	r1, r2
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800207a:	0852      	lsrs	r2, r2, #1
 800207c:	3a01      	subs	r2, #1
 800207e:	0552      	lsls	r2, r2, #21
 8002080:	4311      	orrs	r1, r2
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002086:	0852      	lsrs	r2, r2, #1
 8002088:	3a01      	subs	r2, #1
 800208a:	0652      	lsls	r2, r2, #25
 800208c:	4311      	orrs	r1, r2
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002092:	0912      	lsrs	r2, r2, #4
 8002094:	0452      	lsls	r2, r2, #17
 8002096:	430a      	orrs	r2, r1
 8002098:	494c      	ldr	r1, [pc, #304]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 800209a:	4313      	orrs	r3, r2
 800209c:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800209e:	4b4b      	ldr	r3, [pc, #300]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a4a      	ldr	r2, [pc, #296]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 80020a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020a8:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020aa:	4b48      	ldr	r3, [pc, #288]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	4a47      	ldr	r2, [pc, #284]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 80020b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020b4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b6:	f7fe ff8b 	bl	8000fd0 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020be:	f7fe ff87 	bl	8000fd0 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e078      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d0:	4b3e      	ldr	r3, [pc, #248]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0f0      	beq.n	80020be <HAL_RCC_OscConfig+0x64a>
 80020dc:	e070      	b.n	80021c0 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020de:	4b3b      	ldr	r3, [pc, #236]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a3a      	ldr	r2, [pc, #232]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 80020e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020e8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80020ea:	4b38      	ldr	r3, [pc, #224]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d105      	bne.n	8002102 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80020f6:	4b35      	ldr	r3, [pc, #212]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	4a34      	ldr	r2, [pc, #208]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 80020fc:	f023 0303 	bic.w	r3, r3, #3
 8002100:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002102:	4b32      	ldr	r3, [pc, #200]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	4a31      	ldr	r2, [pc, #196]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 8002108:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800210c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002110:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002112:	f7fe ff5d 	bl	8000fd0 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211a:	f7fe ff59 	bl	8000fd0 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e04a      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800212c:	4b27      	ldr	r3, [pc, #156]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f0      	bne.n	800211a <HAL_RCC_OscConfig+0x6a6>
 8002138:	e042      	b.n	80021c0 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e03d      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002146:	4b21      	ldr	r3, [pc, #132]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f003 0203 	and.w	r2, r3, #3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002156:	429a      	cmp	r2, r3
 8002158:	d130      	bne.n	80021bc <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	3b01      	subs	r3, #1
 8002166:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002168:	429a      	cmp	r2, r3
 800216a:	d127      	bne.n	80021bc <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002176:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002178:	429a      	cmp	r2, r3
 800217a:	d11f      	bne.n	80021bc <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002186:	2a07      	cmp	r2, #7
 8002188:	bf14      	ite	ne
 800218a:	2201      	movne	r2, #1
 800218c:	2200      	moveq	r2, #0
 800218e:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002190:	4293      	cmp	r3, r2
 8002192:	d113      	bne.n	80021bc <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219e:	085b      	lsrs	r3, r3, #1
 80021a0:	3b01      	subs	r3, #1
 80021a2:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d109      	bne.n	80021bc <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	085b      	lsrs	r3, r3, #1
 80021b4:	3b01      	subs	r3, #1
 80021b6:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3720      	adds	r7, #32
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000
 80021d0:	f99d808c 	.word	0xf99d808c

080021d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0c8      	b.n	800237a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021e8:	4b66      	ldr	r3, [pc, #408]	; (8002384 <HAL_RCC_ClockConfig+0x1b0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d910      	bls.n	8002218 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f6:	4b63      	ldr	r3, [pc, #396]	; (8002384 <HAL_RCC_ClockConfig+0x1b0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 0207 	bic.w	r2, r3, #7
 80021fe:	4961      	ldr	r1, [pc, #388]	; (8002384 <HAL_RCC_ClockConfig+0x1b0>)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002206:	4b5f      	ldr	r3, [pc, #380]	; (8002384 <HAL_RCC_ClockConfig+0x1b0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d001      	beq.n	8002218 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0b0      	b.n	800237a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d04c      	beq.n	80022be <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b03      	cmp	r3, #3
 800222a:	d107      	bne.n	800223c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800222c:	4b56      	ldr	r3, [pc, #344]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d121      	bne.n	800227c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e09e      	b.n	800237a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d107      	bne.n	8002254 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002244:	4b50      	ldr	r3, [pc, #320]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d115      	bne.n	800227c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e092      	b.n	800237a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d107      	bne.n	800226c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800225c:	4b4a      	ldr	r3, [pc, #296]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d109      	bne.n	800227c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e086      	b.n	800237a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800226c:	4b46      	ldr	r3, [pc, #280]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e07e      	b.n	800237a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800227c:	4b42      	ldr	r3, [pc, #264]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f023 0203 	bic.w	r2, r3, #3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	493f      	ldr	r1, [pc, #252]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 800228a:	4313      	orrs	r3, r2
 800228c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800228e:	f7fe fe9f 	bl	8000fd0 <HAL_GetTick>
 8002292:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002294:	e00a      	b.n	80022ac <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002296:	f7fe fe9b 	bl	8000fd0 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e066      	b.n	800237a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ac:	4b36      	ldr	r3, [pc, #216]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 020c 	and.w	r2, r3, #12
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d1eb      	bne.n	8002296 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d008      	beq.n	80022dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ca:	4b2f      	ldr	r3, [pc, #188]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	492c      	ldr	r1, [pc, #176]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022dc:	4b29      	ldr	r3, [pc, #164]	; (8002384 <HAL_RCC_ClockConfig+0x1b0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d210      	bcs.n	800230c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ea:	4b26      	ldr	r3, [pc, #152]	; (8002384 <HAL_RCC_ClockConfig+0x1b0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 0207 	bic.w	r2, r3, #7
 80022f2:	4924      	ldr	r1, [pc, #144]	; (8002384 <HAL_RCC_ClockConfig+0x1b0>)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fa:	4b22      	ldr	r3, [pc, #136]	; (8002384 <HAL_RCC_ClockConfig+0x1b0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d001      	beq.n	800230c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e036      	b.n	800237a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002318:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	4918      	ldr	r1, [pc, #96]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 8002326:	4313      	orrs	r3, r2
 8002328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d009      	beq.n	800234a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002336:	4b14      	ldr	r3, [pc, #80]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4910      	ldr	r1, [pc, #64]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 8002346:	4313      	orrs	r3, r2
 8002348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800234a:	f000 f825 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 800234e:	4601      	mov	r1, r0
 8002350:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	091b      	lsrs	r3, r3, #4
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	4a0c      	ldr	r2, [pc, #48]	; (800238c <HAL_RCC_ClockConfig+0x1b8>)
 800235c:	5cd3      	ldrb	r3, [r2, r3]
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	fa21 f303 	lsr.w	r3, r1, r3
 8002366:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe fde2 	bl	8000f38 <HAL_InitTick>
 8002374:	4603      	mov	r3, r0
 8002376:	72fb      	strb	r3, [r7, #11]

  return status;
 8002378:	7afb      	ldrb	r3, [r7, #11]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40022000 	.word	0x40022000
 8002388:	40021000 	.word	0x40021000
 800238c:	0800b9c8 	.word	0x0800b9c8
 8002390:	200012c8 	.word	0x200012c8
 8002394:	20000000 	.word	0x20000000

08002398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002398:	b480      	push	{r7}
 800239a:	b089      	sub	sp, #36	; 0x24
 800239c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
 80023a2:	2300      	movs	r3, #0
 80023a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023a6:	4b3d      	ldr	r3, [pc, #244]	; (800249c <HAL_RCC_GetSysClockFreq+0x104>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023b0:	4b3a      	ldr	r3, [pc, #232]	; (800249c <HAL_RCC_GetSysClockFreq+0x104>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0x34>
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	2b0c      	cmp	r3, #12
 80023c4:	d121      	bne.n	800240a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d11e      	bne.n	800240a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023cc:	4b33      	ldr	r3, [pc, #204]	; (800249c <HAL_RCC_GetSysClockFreq+0x104>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d107      	bne.n	80023e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023d8:	4b30      	ldr	r3, [pc, #192]	; (800249c <HAL_RCC_GetSysClockFreq+0x104>)
 80023da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023de:	0a1b      	lsrs	r3, r3, #8
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	e005      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023e8:	4b2c      	ldr	r3, [pc, #176]	; (800249c <HAL_RCC_GetSysClockFreq+0x104>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023f4:	4a2a      	ldr	r2, [pc, #168]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10d      	bne.n	8002420 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002408:	e00a      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	2b04      	cmp	r3, #4
 800240e:	d102      	bne.n	8002416 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002410:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002412:	61bb      	str	r3, [r7, #24]
 8002414:	e004      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	2b08      	cmp	r3, #8
 800241a:	d101      	bne.n	8002420 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800241c:	4b22      	ldr	r3, [pc, #136]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x110>)
 800241e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	2b0c      	cmp	r3, #12
 8002424:	d133      	bne.n	800248e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002426:	4b1d      	ldr	r3, [pc, #116]	; (800249c <HAL_RCC_GetSysClockFreq+0x104>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d002      	beq.n	800243c <HAL_RCC_GetSysClockFreq+0xa4>
 8002436:	2b03      	cmp	r3, #3
 8002438:	d003      	beq.n	8002442 <HAL_RCC_GetSysClockFreq+0xaa>
 800243a:	e005      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800243c:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800243e:	617b      	str	r3, [r7, #20]
      break;
 8002440:	e005      	b.n	800244e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002442:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002444:	617b      	str	r3, [r7, #20]
      break;
 8002446:	e002      	b.n	800244e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	617b      	str	r3, [r7, #20]
      break;
 800244c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800244e:	4b13      	ldr	r3, [pc, #76]	; (800249c <HAL_RCC_GetSysClockFreq+0x104>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	091b      	lsrs	r3, r3, #4
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	3301      	adds	r3, #1
 800245a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800245c:	4b0f      	ldr	r3, [pc, #60]	; (800249c <HAL_RCC_GetSysClockFreq+0x104>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	fb02 f203 	mul.w	r2, r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <HAL_RCC_GetSysClockFreq+0x104>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	0e5b      	lsrs	r3, r3, #25
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	3301      	adds	r3, #1
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	fbb2 f3f3 	udiv	r3, r2, r3
 800248c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800248e:	69bb      	ldr	r3, [r7, #24]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3724      	adds	r7, #36	; 0x24
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	40021000 	.word	0x40021000
 80024a0:	0800b9e0 	.word	0x0800b9e0
 80024a4:	00f42400 	.word	0x00f42400
 80024a8:	007a1200 	.word	0x007a1200

080024ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024b0:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024b2:	681b      	ldr	r3, [r3, #0]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	200012c8 	.word	0x200012c8

080024c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024c8:	f7ff fff0 	bl	80024ac <HAL_RCC_GetHCLKFreq>
 80024cc:	4601      	mov	r1, r0
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	0a1b      	lsrs	r3, r3, #8
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	4a04      	ldr	r2, [pc, #16]	; (80024ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80024da:	5cd3      	ldrb	r3, [r2, r3]
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40021000 	.word	0x40021000
 80024ec:	0800b9d8 	.word	0x0800b9d8

080024f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024f4:	f7ff ffda 	bl	80024ac <HAL_RCC_GetHCLKFreq>
 80024f8:	4601      	mov	r1, r0
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	0adb      	lsrs	r3, r3, #11
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	4a04      	ldr	r2, [pc, #16]	; (8002518 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002506:	5cd3      	ldrb	r3, [r2, r3]
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002510:	4618      	mov	r0, r3
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40021000 	.word	0x40021000
 8002518:	0800b9d8 	.word	0x0800b9d8

0800251c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002528:	4b2a      	ldr	r3, [pc, #168]	; (80025d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800252a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002534:	f7ff fa3a 	bl	80019ac <HAL_PWREx_GetVoltageRange>
 8002538:	6178      	str	r0, [r7, #20]
 800253a:	e014      	b.n	8002566 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800253c:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800253e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002540:	4a24      	ldr	r2, [pc, #144]	; (80025d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002546:	6593      	str	r3, [r2, #88]	; 0x58
 8002548:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800254a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002554:	f7ff fa2a 	bl	80019ac <HAL_PWREx_GetVoltageRange>
 8002558:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800255a:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800255c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255e:	4a1d      	ldr	r2, [pc, #116]	; (80025d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002564:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800256c:	d10b      	bne.n	8002586 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b80      	cmp	r3, #128	; 0x80
 8002572:	d919      	bls.n	80025a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2ba0      	cmp	r3, #160	; 0xa0
 8002578:	d902      	bls.n	8002580 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800257a:	2302      	movs	r3, #2
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	e013      	b.n	80025a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002580:	2301      	movs	r3, #1
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	e010      	b.n	80025a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b80      	cmp	r3, #128	; 0x80
 800258a:	d902      	bls.n	8002592 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800258c:	2303      	movs	r3, #3
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	e00a      	b.n	80025a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b80      	cmp	r3, #128	; 0x80
 8002596:	d102      	bne.n	800259e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002598:	2302      	movs	r3, #2
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	e004      	b.n	80025a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b70      	cmp	r3, #112	; 0x70
 80025a2:	d101      	bne.n	80025a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025a4:	2301      	movs	r3, #1
 80025a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f023 0207 	bic.w	r2, r3, #7
 80025b0:	4909      	ldr	r1, [pc, #36]	; (80025d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025b8:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d001      	beq.n	80025ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40022000 	.word	0x40022000

080025dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025e4:	2300      	movs	r3, #0
 80025e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025e8:	2300      	movs	r3, #0
 80025ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d03f      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002600:	d01c      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002606:	d802      	bhi.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00e      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800260c:	e01f      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800260e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002612:	d003      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002614:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002618:	d01c      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800261a:	e018      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800261c:	4b85      	ldr	r3, [pc, #532]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4a84      	ldr	r2, [pc, #528]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002626:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002628:	e015      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3304      	adds	r3, #4
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f000 fab9 	bl	8002ba8 <RCCEx_PLLSAI1_Config>
 8002636:	4603      	mov	r3, r0
 8002638:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800263a:	e00c      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3320      	adds	r3, #32
 8002640:	2100      	movs	r1, #0
 8002642:	4618      	mov	r0, r3
 8002644:	f000 fba0 	bl	8002d88 <RCCEx_PLLSAI2_Config>
 8002648:	4603      	mov	r3, r0
 800264a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800264c:	e003      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	74fb      	strb	r3, [r7, #19]
      break;
 8002652:	e000      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002654:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002656:	7cfb      	ldrb	r3, [r7, #19]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10b      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800265c:	4b75      	ldr	r3, [pc, #468]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002662:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800266a:	4972      	ldr	r1, [pc, #456]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002672:	e001      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002674:	7cfb      	ldrb	r3, [r7, #19]
 8002676:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d03f      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800268c:	d01c      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800268e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002692:	d802      	bhi.n	800269a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00e      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002698:	e01f      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800269a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800269e:	d003      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80026a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026a4:	d01c      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80026a6:	e018      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026a8:	4b62      	ldr	r3, [pc, #392]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4a61      	ldr	r2, [pc, #388]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026b4:	e015      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3304      	adds	r3, #4
 80026ba:	2100      	movs	r1, #0
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 fa73 	bl	8002ba8 <RCCEx_PLLSAI1_Config>
 80026c2:	4603      	mov	r3, r0
 80026c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026c6:	e00c      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3320      	adds	r3, #32
 80026cc:	2100      	movs	r1, #0
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fb5a 	bl	8002d88 <RCCEx_PLLSAI2_Config>
 80026d4:	4603      	mov	r3, r0
 80026d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026d8:	e003      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	74fb      	strb	r3, [r7, #19]
      break;
 80026de:	e000      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80026e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026e2:	7cfb      	ldrb	r3, [r7, #19]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10b      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026e8:	4b52      	ldr	r3, [pc, #328]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026f6:	494f      	ldr	r1, [pc, #316]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026fe:	e001      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002700:	7cfb      	ldrb	r3, [r7, #19]
 8002702:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80a0 	beq.w	8002852 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002712:	2300      	movs	r3, #0
 8002714:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002716:	4b47      	ldr	r3, [pc, #284]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002726:	2300      	movs	r3, #0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00d      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800272c:	4b41      	ldr	r3, [pc, #260]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002730:	4a40      	ldr	r2, [pc, #256]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002736:	6593      	str	r3, [r2, #88]	; 0x58
 8002738:	4b3e      	ldr	r3, [pc, #248]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002744:	2301      	movs	r3, #1
 8002746:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002748:	4b3b      	ldr	r3, [pc, #236]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a3a      	ldr	r2, [pc, #232]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800274e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002752:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002754:	f7fe fc3c 	bl	8000fd0 <HAL_GetTick>
 8002758:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800275a:	e009      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275c:	f7fe fc38 	bl	8000fd0 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d902      	bls.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	74fb      	strb	r3, [r7, #19]
        break;
 800276e:	e005      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002770:	4b31      	ldr	r3, [pc, #196]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0ef      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800277c:	7cfb      	ldrb	r3, [r7, #19]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d15c      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002782:	4b2c      	ldr	r3, [pc, #176]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002788:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800278c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d01f      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	429a      	cmp	r2, r3
 800279e:	d019      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027a0:	4b24      	ldr	r3, [pc, #144]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027ac:	4b21      	ldr	r3, [pc, #132]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b2:	4a20      	ldr	r2, [pc, #128]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027bc:	4b1d      	ldr	r3, [pc, #116]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c2:	4a1c      	ldr	r2, [pc, #112]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027cc:	4a19      	ldr	r2, [pc, #100]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d016      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027de:	f7fe fbf7 	bl	8000fd0 <HAL_GetTick>
 80027e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027e4:	e00b      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e6:	f7fe fbf3 	bl	8000fd0 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d902      	bls.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	74fb      	strb	r3, [r7, #19]
            break;
 80027fc:	e006      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027fe:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0ec      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800280c:	7cfb      	ldrb	r3, [r7, #19]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10c      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002812:	4b08      	ldr	r3, [pc, #32]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002818:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002822:	4904      	ldr	r1, [pc, #16]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800282a:	e009      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	74bb      	strb	r3, [r7, #18]
 8002830:	e006      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000
 8002838:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800283c:	7cfb      	ldrb	r3, [r7, #19]
 800283e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002840:	7c7b      	ldrb	r3, [r7, #17]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d105      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002846:	4b9e      	ldr	r3, [pc, #632]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284a:	4a9d      	ldr	r2, [pc, #628]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800284c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002850:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800285e:	4b98      	ldr	r3, [pc, #608]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002864:	f023 0203 	bic.w	r2, r3, #3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	4994      	ldr	r1, [pc, #592]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00a      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002880:	4b8f      	ldr	r3, [pc, #572]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002886:	f023 020c 	bic.w	r2, r3, #12
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288e:	498c      	ldr	r1, [pc, #560]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028a2:	4b87      	ldr	r3, [pc, #540]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	4983      	ldr	r1, [pc, #524]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028c4:	4b7e      	ldr	r3, [pc, #504]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	497b      	ldr	r1, [pc, #492]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028e6:	4b76      	ldr	r3, [pc, #472]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f4:	4972      	ldr	r1, [pc, #456]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0320 	and.w	r3, r3, #32
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002908:	4b6d      	ldr	r3, [pc, #436]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002916:	496a      	ldr	r1, [pc, #424]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800292a:	4b65      	ldr	r3, [pc, #404]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002930:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002938:	4961      	ldr	r1, [pc, #388]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800294c:	4b5c      	ldr	r3, [pc, #368]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800295a:	4959      	ldr	r1, [pc, #356]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800296e:	4b54      	ldr	r3, [pc, #336]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002974:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800297c:	4950      	ldr	r1, [pc, #320]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00a      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002990:	4b4b      	ldr	r3, [pc, #300]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002996:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299e:	4948      	ldr	r1, [pc, #288]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00a      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029b2:	4b43      	ldr	r3, [pc, #268]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	493f      	ldr	r1, [pc, #252]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d028      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029d4:	4b3a      	ldr	r3, [pc, #232]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029e2:	4937      	ldr	r1, [pc, #220]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029f2:	d106      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029f4:	4b32      	ldr	r3, [pc, #200]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	4a31      	ldr	r2, [pc, #196]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029fe:	60d3      	str	r3, [r2, #12]
 8002a00:	e011      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a0a:	d10c      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	2101      	movs	r1, #1
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 f8c8 	bl	8002ba8 <RCCEx_PLLSAI1_Config>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a1c:	7cfb      	ldrb	r3, [r7, #19]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002a22:	7cfb      	ldrb	r3, [r7, #19]
 8002a24:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d028      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a32:	4b23      	ldr	r3, [pc, #140]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a38:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a40:	491f      	ldr	r1, [pc, #124]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a50:	d106      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a52:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	4a1a      	ldr	r2, [pc, #104]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a5c:	60d3      	str	r3, [r2, #12]
 8002a5e:	e011      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a68:	d10c      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	2101      	movs	r1, #1
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 f899 	bl	8002ba8 <RCCEx_PLLSAI1_Config>
 8002a76:	4603      	mov	r3, r0
 8002a78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a7a:	7cfb      	ldrb	r3, [r7, #19]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002a80:	7cfb      	ldrb	r3, [r7, #19]
 8002a82:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d02b      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a9e:	4908      	ldr	r1, [pc, #32]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aae:	d109      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4a02      	ldr	r2, [pc, #8]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aba:	60d3      	str	r3, [r2, #12]
 8002abc:	e014      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002abe:	bf00      	nop
 8002ac0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 f867 	bl	8002ba8 <RCCEx_PLLSAI1_Config>
 8002ada:	4603      	mov	r3, r0
 8002adc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ade:	7cfb      	ldrb	r3, [r7, #19]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002ae4:	7cfb      	ldrb	r3, [r7, #19]
 8002ae6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d02f      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002af4:	4b2b      	ldr	r3, [pc, #172]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b02:	4928      	ldr	r1, [pc, #160]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b12:	d10d      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3304      	adds	r3, #4
 8002b18:	2102      	movs	r1, #2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 f844 	bl	8002ba8 <RCCEx_PLLSAI1_Config>
 8002b20:	4603      	mov	r3, r0
 8002b22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b24:	7cfb      	ldrb	r3, [r7, #19]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d014      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002b2a:	7cfb      	ldrb	r3, [r7, #19]
 8002b2c:	74bb      	strb	r3, [r7, #18]
 8002b2e:	e011      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b38:	d10c      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2102      	movs	r1, #2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 f921 	bl	8002d88 <RCCEx_PLLSAI2_Config>
 8002b46:	4603      	mov	r3, r0
 8002b48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b4a:	7cfb      	ldrb	r3, [r7, #19]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002b50:	7cfb      	ldrb	r3, [r7, #19]
 8002b52:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00a      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b60:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b6e:	490d      	ldr	r1, [pc, #52]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00b      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b92:	4904      	ldr	r1, [pc, #16]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b9a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40021000 	.word	0x40021000

08002ba8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bb6:	4b73      	ldr	r3, [pc, #460]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d018      	beq.n	8002bf4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bc2:	4b70      	ldr	r3, [pc, #448]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f003 0203 	and.w	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d10d      	bne.n	8002bee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
       ||
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bda:	4b6a      	ldr	r3, [pc, #424]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	091b      	lsrs	r3, r3, #4
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
       ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d044      	beq.n	8002c78 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	73fb      	strb	r3, [r7, #15]
 8002bf2:	e041      	b.n	8002c78 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d00c      	beq.n	8002c16 <RCCEx_PLLSAI1_Config+0x6e>
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d013      	beq.n	8002c28 <RCCEx_PLLSAI1_Config+0x80>
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d120      	bne.n	8002c46 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c04:	4b5f      	ldr	r3, [pc, #380]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d11d      	bne.n	8002c4c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c14:	e01a      	b.n	8002c4c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c16:	4b5b      	ldr	r3, [pc, #364]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d116      	bne.n	8002c50 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c26:	e013      	b.n	8002c50 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c28:	4b56      	ldr	r3, [pc, #344]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10f      	bne.n	8002c54 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c34:	4b53      	ldr	r3, [pc, #332]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d109      	bne.n	8002c54 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c44:	e006      	b.n	8002c54 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
      break;
 8002c4a:	e004      	b.n	8002c56 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c4c:	bf00      	nop
 8002c4e:	e002      	b.n	8002c56 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c50:	bf00      	nop
 8002c52:	e000      	b.n	8002c56 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002c54:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10d      	bne.n	8002c78 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c5c:	4b49      	ldr	r3, [pc, #292]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6819      	ldr	r1, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	430b      	orrs	r3, r1
 8002c72:	4944      	ldr	r1, [pc, #272]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d17d      	bne.n	8002d7a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c7e:	4b41      	ldr	r3, [pc, #260]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a40      	ldr	r2, [pc, #256]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c8a:	f7fe f9a1 	bl	8000fd0 <HAL_GetTick>
 8002c8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c90:	e009      	b.n	8002ca6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c92:	f7fe f99d 	bl	8000fd0 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d902      	bls.n	8002ca6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	73fb      	strb	r3, [r7, #15]
        break;
 8002ca4:	e005      	b.n	8002cb2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ca6:	4b37      	ldr	r3, [pc, #220]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1ef      	bne.n	8002c92 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d160      	bne.n	8002d7a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d111      	bne.n	8002ce2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cbe:	4b31      	ldr	r3, [pc, #196]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6892      	ldr	r2, [r2, #8]
 8002cce:	0211      	lsls	r1, r2, #8
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	68d2      	ldr	r2, [r2, #12]
 8002cd4:	0912      	lsrs	r2, r2, #4
 8002cd6:	0452      	lsls	r2, r2, #17
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	492a      	ldr	r1, [pc, #168]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	610b      	str	r3, [r1, #16]
 8002ce0:	e027      	b.n	8002d32 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d112      	bne.n	8002d0e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ce8:	4b26      	ldr	r3, [pc, #152]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002cf0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6892      	ldr	r2, [r2, #8]
 8002cf8:	0211      	lsls	r1, r2, #8
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6912      	ldr	r2, [r2, #16]
 8002cfe:	0852      	lsrs	r2, r2, #1
 8002d00:	3a01      	subs	r2, #1
 8002d02:	0552      	lsls	r2, r2, #21
 8002d04:	430a      	orrs	r2, r1
 8002d06:	491f      	ldr	r1, [pc, #124]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	610b      	str	r3, [r1, #16]
 8002d0c:	e011      	b.n	8002d32 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6892      	ldr	r2, [r2, #8]
 8002d1e:	0211      	lsls	r1, r2, #8
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6952      	ldr	r2, [r2, #20]
 8002d24:	0852      	lsrs	r2, r2, #1
 8002d26:	3a01      	subs	r2, #1
 8002d28:	0652      	lsls	r2, r2, #25
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	4915      	ldr	r1, [pc, #84]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d32:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a13      	ldr	r2, [pc, #76]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d3c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3e:	f7fe f947 	bl	8000fd0 <HAL_GetTick>
 8002d42:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d44:	e009      	b.n	8002d5a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d46:	f7fe f943 	bl	8000fd0 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d902      	bls.n	8002d5a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	73fb      	strb	r3, [r7, #15]
          break;
 8002d58:	e005      	b.n	8002d66 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0ef      	beq.n	8002d46 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d106      	bne.n	8002d7a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	4903      	ldr	r1, [pc, #12]	; (8002d84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40021000 	.word	0x40021000

08002d88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d96:	4b68      	ldr	r3, [pc, #416]	; (8002f38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d018      	beq.n	8002dd4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002da2:	4b65      	ldr	r3, [pc, #404]	; (8002f38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f003 0203 	and.w	r2, r3, #3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d10d      	bne.n	8002dce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
       ||
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d009      	beq.n	8002dce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002dba:	4b5f      	ldr	r3, [pc, #380]	; (8002f38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	091b      	lsrs	r3, r3, #4
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
       ||
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d044      	beq.n	8002e58 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	73fb      	strb	r3, [r7, #15]
 8002dd2:	e041      	b.n	8002e58 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d00c      	beq.n	8002df6 <RCCEx_PLLSAI2_Config+0x6e>
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d013      	beq.n	8002e08 <RCCEx_PLLSAI2_Config+0x80>
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d120      	bne.n	8002e26 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002de4:	4b54      	ldr	r3, [pc, #336]	; (8002f38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d11d      	bne.n	8002e2c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002df4:	e01a      	b.n	8002e2c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002df6:	4b50      	ldr	r3, [pc, #320]	; (8002f38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d116      	bne.n	8002e30 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e06:	e013      	b.n	8002e30 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e08:	4b4b      	ldr	r3, [pc, #300]	; (8002f38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10f      	bne.n	8002e34 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e14:	4b48      	ldr	r3, [pc, #288]	; (8002f38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d109      	bne.n	8002e34 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e24:	e006      	b.n	8002e34 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	73fb      	strb	r3, [r7, #15]
      break;
 8002e2a:	e004      	b.n	8002e36 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002e2c:	bf00      	nop
 8002e2e:	e002      	b.n	8002e36 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002e30:	bf00      	nop
 8002e32:	e000      	b.n	8002e36 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002e34:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10d      	bne.n	8002e58 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e3c:	4b3e      	ldr	r3, [pc, #248]	; (8002f38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6819      	ldr	r1, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	011b      	lsls	r3, r3, #4
 8002e50:	430b      	orrs	r3, r1
 8002e52:	4939      	ldr	r1, [pc, #228]	; (8002f38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d167      	bne.n	8002f2e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e5e:	4b36      	ldr	r3, [pc, #216]	; (8002f38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a35      	ldr	r2, [pc, #212]	; (8002f38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e6a:	f7fe f8b1 	bl	8000fd0 <HAL_GetTick>
 8002e6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e70:	e009      	b.n	8002e86 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e72:	f7fe f8ad 	bl	8000fd0 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d902      	bls.n	8002e86 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	73fb      	strb	r3, [r7, #15]
        break;
 8002e84:	e005      	b.n	8002e92 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e86:	4b2c      	ldr	r3, [pc, #176]	; (8002f38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1ef      	bne.n	8002e72 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d14a      	bne.n	8002f2e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d111      	bne.n	8002ec2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e9e:	4b26      	ldr	r3, [pc, #152]	; (8002f38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6892      	ldr	r2, [r2, #8]
 8002eae:	0211      	lsls	r1, r2, #8
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	68d2      	ldr	r2, [r2, #12]
 8002eb4:	0912      	lsrs	r2, r2, #4
 8002eb6:	0452      	lsls	r2, r2, #17
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	491f      	ldr	r1, [pc, #124]	; (8002f38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	614b      	str	r3, [r1, #20]
 8002ec0:	e011      	b.n	8002ee6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ec2:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002eca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6892      	ldr	r2, [r2, #8]
 8002ed2:	0211      	lsls	r1, r2, #8
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6912      	ldr	r2, [r2, #16]
 8002ed8:	0852      	lsrs	r2, r2, #1
 8002eda:	3a01      	subs	r2, #1
 8002edc:	0652      	lsls	r2, r2, #25
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	4915      	ldr	r1, [pc, #84]	; (8002f38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ee6:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a13      	ldr	r2, [pc, #76]	; (8002f38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef2:	f7fe f86d 	bl	8000fd0 <HAL_GetTick>
 8002ef6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ef8:	e009      	b.n	8002f0e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002efa:	f7fe f869 	bl	8000fd0 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d902      	bls.n	8002f0e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	73fb      	strb	r3, [r7, #15]
          break;
 8002f0c:	e005      	b.n	8002f1a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0ef      	beq.n	8002efa <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d106      	bne.n	8002f2e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f22:	695a      	ldr	r2, [r3, #20]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	4903      	ldr	r1, [pc, #12]	; (8002f38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40021000 	.word	0x40021000

08002f3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e07c      	b.n	8003048 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d106      	bne.n	8002f6e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f005 fe21 	bl	8008bb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2202      	movs	r2, #2
 8002f72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f84:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f8e:	d902      	bls.n	8002f96 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	e002      	b.n	8002f9c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f9a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002fa4:	d007      	beq.n	8002fb6 <HAL_SPI_Init+0x7a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fae:	d002      	beq.n	8002fb6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10b      	bne.n	8002fd6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fc6:	d903      	bls.n	8002fd0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30
 8002fce:	e002      	b.n	8002fd6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	ea42 0103 	orr.w	r1, r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	0c1b      	lsrs	r3, r3, #16
 8003016:	f003 0204 	and.w	r2, r3, #4
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	ea42 0103 	orr.w	r1, r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	430a      	orrs	r2, r1
 8003036:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	4613      	mov	r3, r2
 800305e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <HAL_SPI_Transmit+0x22>
 800306e:	2302      	movs	r3, #2
 8003070:	e150      	b.n	8003314 <HAL_SPI_Transmit+0x2c4>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800307a:	f7fd ffa9 	bl	8000fd0 <HAL_GetTick>
 800307e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003080:	88fb      	ldrh	r3, [r7, #6]
 8003082:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d002      	beq.n	8003096 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003090:	2302      	movs	r3, #2
 8003092:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003094:	e135      	b.n	8003302 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <HAL_SPI_Transmit+0x52>
 800309c:	88fb      	ldrh	r3, [r7, #6]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d102      	bne.n	80030a8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030a6:	e12c      	b.n	8003302 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2203      	movs	r2, #3
 80030ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	88fa      	ldrh	r2, [r7, #6]
 80030c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	88fa      	ldrh	r2, [r7, #6]
 80030c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f2:	d107      	bne.n	8003104 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003102:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310e:	2b40      	cmp	r3, #64	; 0x40
 8003110:	d007      	beq.n	8003122 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003120:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800312a:	d94b      	bls.n	80031c4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <HAL_SPI_Transmit+0xea>
 8003134:	8afb      	ldrh	r3, [r7, #22]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d13e      	bne.n	80031b8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313e:	881a      	ldrh	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314a:	1c9a      	adds	r2, r3, #2
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003154:	b29b      	uxth	r3, r3
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800315e:	e02b      	b.n	80031b8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b02      	cmp	r3, #2
 800316c:	d112      	bne.n	8003194 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003172:	881a      	ldrh	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317e:	1c9a      	adds	r2, r3, #2
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003188:	b29b      	uxth	r3, r3
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003192:	e011      	b.n	80031b8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003194:	f7fd ff1c 	bl	8000fd0 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d803      	bhi.n	80031ac <HAL_SPI_Transmit+0x15c>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031aa:	d102      	bne.n	80031b2 <HAL_SPI_Transmit+0x162>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d102      	bne.n	80031b8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80031b6:	e0a4      	b.n	8003302 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031bc:	b29b      	uxth	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1ce      	bne.n	8003160 <HAL_SPI_Transmit+0x110>
 80031c2:	e07c      	b.n	80032be <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <HAL_SPI_Transmit+0x182>
 80031cc:	8afb      	ldrh	r3, [r7, #22]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d170      	bne.n	80032b4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d912      	bls.n	8003202 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b02      	subs	r3, #2
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003200:	e058      	b.n	80032b4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	330c      	adds	r3, #12
 800320c:	7812      	ldrb	r2, [r2, #0]
 800320e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800321e:	b29b      	uxth	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003228:	e044      	b.n	80032b4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b02      	cmp	r3, #2
 8003236:	d12b      	bne.n	8003290 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b01      	cmp	r3, #1
 8003240:	d912      	bls.n	8003268 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003246:	881a      	ldrh	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	1c9a      	adds	r2, r3, #2
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800325c:	b29b      	uxth	r3, r3
 800325e:	3b02      	subs	r3, #2
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003266:	e025      	b.n	80032b4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	330c      	adds	r3, #12
 8003272:	7812      	ldrb	r2, [r2, #0]
 8003274:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800328e:	e011      	b.n	80032b4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003290:	f7fd fe9e 	bl	8000fd0 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d803      	bhi.n	80032a8 <HAL_SPI_Transmit+0x258>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a6:	d102      	bne.n	80032ae <HAL_SPI_Transmit+0x25e>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d102      	bne.n	80032b4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032b2:	e026      	b.n	8003302 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1b5      	bne.n	800322a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	6839      	ldr	r1, [r7, #0]
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f901 	bl	80034ca <SPI_EndRxTxTransaction>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2220      	movs	r2, #32
 80032d2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10a      	bne.n	80032f2 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032dc:	2300      	movs	r3, #0
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	77fb      	strb	r3, [r7, #31]
 80032fe:	e000      	b.n	8003302 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003300:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003312:	7ffb      	ldrb	r3, [r7, #31]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3720      	adds	r7, #32
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	4613      	mov	r3, r2
 800332a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800332c:	e04c      	b.n	80033c8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003334:	d048      	beq.n	80033c8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003336:	f7fd fe4b 	bl	8000fd0 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d902      	bls.n	800334c <SPI_WaitFlagStateUntilTimeout+0x30>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d13d      	bne.n	80033c8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800335a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003364:	d111      	bne.n	800338a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800336e:	d004      	beq.n	800337a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003378:	d107      	bne.n	800338a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003388:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003392:	d10f      	bne.n	80033b4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e00f      	b.n	80033e8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	4013      	ands	r3, r2
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	bf0c      	ite	eq
 80033d8:	2301      	moveq	r3, #1
 80033da:	2300      	movne	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	461a      	mov	r2, r3
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d1a3      	bne.n	800332e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80033fe:	e057      	b.n	80034b0 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003406:	d106      	bne.n	8003416 <SPI_WaitFifoStateUntilTimeout+0x26>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d103      	bne.n	8003416 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	330c      	adds	r3, #12
 8003414:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341c:	d048      	beq.n	80034b0 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800341e:	f7fd fdd7 	bl	8000fd0 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d902      	bls.n	8003434 <SPI_WaitFifoStateUntilTimeout+0x44>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d13d      	bne.n	80034b0 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003442:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800344c:	d111      	bne.n	8003472 <SPI_WaitFifoStateUntilTimeout+0x82>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003456:	d004      	beq.n	8003462 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003460:	d107      	bne.n	8003472 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003470:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800347a:	d10f      	bne.n	800349c <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800349a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e008      	b.n	80034c2 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4013      	ands	r3, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d19f      	bne.n	8003400 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b086      	sub	sp, #24
 80034ce:	af02      	add	r7, sp, #8
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2200      	movs	r2, #0
 80034de:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f7ff ff84 	bl	80033f0 <SPI_WaitFifoStateUntilTimeout>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d007      	beq.n	80034fe <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f2:	f043 0220 	orr.w	r2, r3, #32
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e027      	b.n	800354e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2200      	movs	r2, #0
 8003506:	2180      	movs	r1, #128	; 0x80
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f7ff ff07 	bl	800331c <SPI_WaitFlagStateUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d007      	beq.n	8003524 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003518:	f043 0220 	orr.w	r2, r3, #32
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e014      	b.n	800354e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2200      	movs	r2, #0
 800352c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f7ff ff5d 	bl	80033f0 <SPI_WaitFifoStateUntilTimeout>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d007      	beq.n	800354c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003540:	f043 0220 	orr.w	r2, r3, #32
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e000      	b.n	800354e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e01d      	b.n	80035a4 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d106      	bne.n	8003582 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f005 fb77 	bl	8008c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2202      	movs	r2, #2
 8003586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3304      	adds	r3, #4
 8003592:	4619      	mov	r1, r3
 8003594:	4610      	mov	r0, r2
 8003596:	f000 fbdb 	bl	8003d50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <HAL_TIM_Base_Start_IT+0x50>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b06      	cmp	r3, #6
 80035d4:	d00b      	beq.n	80035ee <HAL_TIM_Base_Start_IT+0x42>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035dc:	d007      	beq.n	80035ee <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 0201 	orr.w	r2, r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	00010007 	.word	0x00010007

08003600 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e01d      	b.n	800364e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d106      	bne.n	800362c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f815 	bl	8003656 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3304      	adds	r3, #4
 800363c:	4619      	mov	r1, r3
 800363e:	4610      	mov	r0, r2
 8003640:	f000 fb86 	bl	8003d50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2201      	movs	r2, #1
 800367c:	6839      	ldr	r1, [r7, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f000 ff70 	bl	8004564 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a1e      	ldr	r2, [pc, #120]	; (8003704 <HAL_TIM_PWM_Start+0x98>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d013      	beq.n	80036b6 <HAL_TIM_PWM_Start+0x4a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1d      	ldr	r2, [pc, #116]	; (8003708 <HAL_TIM_PWM_Start+0x9c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00e      	beq.n	80036b6 <HAL_TIM_PWM_Start+0x4a>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a1b      	ldr	r2, [pc, #108]	; (800370c <HAL_TIM_PWM_Start+0xa0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d009      	beq.n	80036b6 <HAL_TIM_PWM_Start+0x4a>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a1a      	ldr	r2, [pc, #104]	; (8003710 <HAL_TIM_PWM_Start+0xa4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d004      	beq.n	80036b6 <HAL_TIM_PWM_Start+0x4a>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a18      	ldr	r2, [pc, #96]	; (8003714 <HAL_TIM_PWM_Start+0xa8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d101      	bne.n	80036ba <HAL_TIM_PWM_Start+0x4e>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <HAL_TIM_PWM_Start+0x50>
 80036ba:	2300      	movs	r3, #0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d007      	beq.n	80036d0 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	4b10      	ldr	r3, [pc, #64]	; (8003718 <HAL_TIM_PWM_Start+0xac>)
 80036d8:	4013      	ands	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b06      	cmp	r3, #6
 80036e0:	d00b      	beq.n	80036fa <HAL_TIM_PWM_Start+0x8e>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e8:	d007      	beq.n	80036fa <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0201 	orr.w	r2, r2, #1
 80036f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40012c00 	.word	0x40012c00
 8003708:	40013400 	.word	0x40013400
 800370c:	40014000 	.word	0x40014000
 8003710:	40014400 	.word	0x40014400
 8003714:	40014800 	.word	0x40014800
 8003718:	00010007 	.word	0x00010007

0800371c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b02      	cmp	r3, #2
 8003730:	d122      	bne.n	8003778 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b02      	cmp	r3, #2
 800373e:	d11b      	bne.n	8003778 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0202 	mvn.w	r2, #2
 8003748:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fad7 	bl	8003d12 <HAL_TIM_IC_CaptureCallback>
 8003764:	e005      	b.n	8003772 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fac9 	bl	8003cfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 fada 	bl	8003d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0304 	and.w	r3, r3, #4
 8003782:	2b04      	cmp	r3, #4
 8003784:	d122      	bne.n	80037cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b04      	cmp	r3, #4
 8003792:	d11b      	bne.n	80037cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0204 	mvn.w	r2, #4
 800379c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2202      	movs	r2, #2
 80037a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 faad 	bl	8003d12 <HAL_TIM_IC_CaptureCallback>
 80037b8:	e005      	b.n	80037c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fa9f 	bl	8003cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 fab0 	bl	8003d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d122      	bne.n	8003820 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d11b      	bne.n	8003820 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0208 	mvn.w	r2, #8
 80037f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2204      	movs	r2, #4
 80037f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fa83 	bl	8003d12 <HAL_TIM_IC_CaptureCallback>
 800380c:	e005      	b.n	800381a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fa75 	bl	8003cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 fa86 	bl	8003d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b10      	cmp	r3, #16
 800382c:	d122      	bne.n	8003874 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f003 0310 	and.w	r3, r3, #16
 8003838:	2b10      	cmp	r3, #16
 800383a:	d11b      	bne.n	8003874 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f06f 0210 	mvn.w	r2, #16
 8003844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2208      	movs	r2, #8
 800384a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fa59 	bl	8003d12 <HAL_TIM_IC_CaptureCallback>
 8003860:	e005      	b.n	800386e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 fa4b 	bl	8003cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fa5c 	bl	8003d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b01      	cmp	r3, #1
 8003880:	d10e      	bne.n	80038a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b01      	cmp	r3, #1
 800388e:	d107      	bne.n	80038a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0201 	mvn.w	r2, #1
 8003898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f005 f83e 	bl	800891c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038aa:	2b80      	cmp	r3, #128	; 0x80
 80038ac:	d10e      	bne.n	80038cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b8:	2b80      	cmp	r3, #128	; 0x80
 80038ba:	d107      	bne.n	80038cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 ff56 	bl	8004778 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038da:	d10e      	bne.n	80038fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e6:	2b80      	cmp	r3, #128	; 0x80
 80038e8:	d107      	bne.n	80038fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 ff49 	bl	800478c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003904:	2b40      	cmp	r3, #64	; 0x40
 8003906:	d10e      	bne.n	8003926 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003912:	2b40      	cmp	r3, #64	; 0x40
 8003914:	d107      	bne.n	8003926 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800391e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fa0a 	bl	8003d3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b20      	cmp	r3, #32
 8003932:	d10e      	bne.n	8003952 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f003 0320 	and.w	r3, r3, #32
 800393e:	2b20      	cmp	r3, #32
 8003940:	d107      	bne.n	8003952 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f06f 0220 	mvn.w	r2, #32
 800394a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 ff09 	bl	8004764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003972:	2302      	movs	r3, #2
 8003974:	e105      	b.n	8003b82 <HAL_TIM_PWM_ConfigChannel+0x226>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2202      	movs	r2, #2
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b14      	cmp	r3, #20
 800398a:	f200 80f0 	bhi.w	8003b6e <HAL_TIM_PWM_ConfigChannel+0x212>
 800398e:	a201      	add	r2, pc, #4	; (adr r2, 8003994 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003994:	080039e9 	.word	0x080039e9
 8003998:	08003b6f 	.word	0x08003b6f
 800399c:	08003b6f 	.word	0x08003b6f
 80039a0:	08003b6f 	.word	0x08003b6f
 80039a4:	08003a29 	.word	0x08003a29
 80039a8:	08003b6f 	.word	0x08003b6f
 80039ac:	08003b6f 	.word	0x08003b6f
 80039b0:	08003b6f 	.word	0x08003b6f
 80039b4:	08003a6b 	.word	0x08003a6b
 80039b8:	08003b6f 	.word	0x08003b6f
 80039bc:	08003b6f 	.word	0x08003b6f
 80039c0:	08003b6f 	.word	0x08003b6f
 80039c4:	08003aab 	.word	0x08003aab
 80039c8:	08003b6f 	.word	0x08003b6f
 80039cc:	08003b6f 	.word	0x08003b6f
 80039d0:	08003b6f 	.word	0x08003b6f
 80039d4:	08003aed 	.word	0x08003aed
 80039d8:	08003b6f 	.word	0x08003b6f
 80039dc:	08003b6f 	.word	0x08003b6f
 80039e0:	08003b6f 	.word	0x08003b6f
 80039e4:	08003b2d 	.word	0x08003b2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68b9      	ldr	r1, [r7, #8]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fa48 	bl	8003e84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699a      	ldr	r2, [r3, #24]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0208 	orr.w	r2, r2, #8
 8003a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0204 	bic.w	r2, r2, #4
 8003a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6999      	ldr	r1, [r3, #24]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	691a      	ldr	r2, [r3, #16]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	619a      	str	r2, [r3, #24]
      break;
 8003a26:	e0a3      	b.n	8003b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68b9      	ldr	r1, [r7, #8]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fab8 	bl	8003fa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699a      	ldr	r2, [r3, #24]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6999      	ldr	r1, [r3, #24]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	021a      	lsls	r2, r3, #8
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	619a      	str	r2, [r3, #24]
      break;
 8003a68:	e082      	b.n	8003b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68b9      	ldr	r1, [r7, #8]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 fb21 	bl	80040b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69da      	ldr	r2, [r3, #28]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f042 0208 	orr.w	r2, r2, #8
 8003a84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69da      	ldr	r2, [r3, #28]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0204 	bic.w	r2, r2, #4
 8003a94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69d9      	ldr	r1, [r3, #28]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	61da      	str	r2, [r3, #28]
      break;
 8003aa8:	e062      	b.n	8003b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 fb89 	bl	80041c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69da      	ldr	r2, [r3, #28]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69da      	ldr	r2, [r3, #28]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69d9      	ldr	r1, [r3, #28]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	021a      	lsls	r2, r3, #8
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	61da      	str	r2, [r3, #28]
      break;
 8003aea:	e041      	b.n	8003b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68b9      	ldr	r1, [r7, #8]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fbd2 	bl	800429c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0208 	orr.w	r2, r2, #8
 8003b06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0204 	bic.w	r2, r2, #4
 8003b16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	691a      	ldr	r2, [r3, #16]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b2a:	e021      	b.n	8003b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68b9      	ldr	r1, [r7, #8]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fc16 	bl	8004364 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	021a      	lsls	r2, r3, #8
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b6c:	e000      	b.n	8003b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8003b6e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop

08003b8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_TIM_ConfigClockSource+0x18>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e0a8      	b.n	8003cf6 <HAL_TIM_ConfigClockSource+0x16a>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b40      	cmp	r3, #64	; 0x40
 8003bde:	d067      	beq.n	8003cb0 <HAL_TIM_ConfigClockSource+0x124>
 8003be0:	2b40      	cmp	r3, #64	; 0x40
 8003be2:	d80b      	bhi.n	8003bfc <HAL_TIM_ConfigClockSource+0x70>
 8003be4:	2b10      	cmp	r3, #16
 8003be6:	d073      	beq.n	8003cd0 <HAL_TIM_ConfigClockSource+0x144>
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d802      	bhi.n	8003bf2 <HAL_TIM_ConfigClockSource+0x66>
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d06f      	beq.n	8003cd0 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003bf0:	e078      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	d06c      	beq.n	8003cd0 <HAL_TIM_ConfigClockSource+0x144>
 8003bf6:	2b30      	cmp	r3, #48	; 0x30
 8003bf8:	d06a      	beq.n	8003cd0 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003bfa:	e073      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003bfc:	2b70      	cmp	r3, #112	; 0x70
 8003bfe:	d00d      	beq.n	8003c1c <HAL_TIM_ConfigClockSource+0x90>
 8003c00:	2b70      	cmp	r3, #112	; 0x70
 8003c02:	d804      	bhi.n	8003c0e <HAL_TIM_ConfigClockSource+0x82>
 8003c04:	2b50      	cmp	r3, #80	; 0x50
 8003c06:	d033      	beq.n	8003c70 <HAL_TIM_ConfigClockSource+0xe4>
 8003c08:	2b60      	cmp	r3, #96	; 0x60
 8003c0a:	d041      	beq.n	8003c90 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003c0c:	e06a      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c12:	d066      	beq.n	8003ce2 <HAL_TIM_ConfigClockSource+0x156>
 8003c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c18:	d017      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003c1a:	e063      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6818      	ldr	r0, [r3, #0]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	6899      	ldr	r1, [r3, #8]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f000 fc7a 	bl	8004524 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	609a      	str	r2, [r3, #8]
      break;
 8003c48:	e04c      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6818      	ldr	r0, [r3, #0]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	6899      	ldr	r1, [r3, #8]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f000 fc63 	bl	8004524 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c6c:	609a      	str	r2, [r3, #8]
      break;
 8003c6e:	e039      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6818      	ldr	r0, [r3, #0]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	6859      	ldr	r1, [r3, #4]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	f000 fbd7 	bl	8004430 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2150      	movs	r1, #80	; 0x50
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fc30 	bl	80044ee <TIM_ITRx_SetConfig>
      break;
 8003c8e:	e029      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	6859      	ldr	r1, [r3, #4]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	f000 fbf6 	bl	800448e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2160      	movs	r1, #96	; 0x60
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fc20 	bl	80044ee <TIM_ITRx_SetConfig>
      break;
 8003cae:	e019      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6818      	ldr	r0, [r3, #0]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	6859      	ldr	r1, [r3, #4]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	f000 fbb7 	bl	8004430 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2140      	movs	r1, #64	; 0x40
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 fc10 	bl	80044ee <TIM_ITRx_SetConfig>
      break;
 8003cce:	e009      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4610      	mov	r0, r2
 8003cdc:	f000 fc07 	bl	80044ee <TIM_ITRx_SetConfig>
      break;
 8003ce0:	e000      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003ce2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
	...

08003d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a40      	ldr	r2, [pc, #256]	; (8003e64 <TIM_Base_SetConfig+0x114>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d013      	beq.n	8003d90 <TIM_Base_SetConfig+0x40>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6e:	d00f      	beq.n	8003d90 <TIM_Base_SetConfig+0x40>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a3d      	ldr	r2, [pc, #244]	; (8003e68 <TIM_Base_SetConfig+0x118>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00b      	beq.n	8003d90 <TIM_Base_SetConfig+0x40>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a3c      	ldr	r2, [pc, #240]	; (8003e6c <TIM_Base_SetConfig+0x11c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d007      	beq.n	8003d90 <TIM_Base_SetConfig+0x40>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a3b      	ldr	r2, [pc, #236]	; (8003e70 <TIM_Base_SetConfig+0x120>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d003      	beq.n	8003d90 <TIM_Base_SetConfig+0x40>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a3a      	ldr	r2, [pc, #232]	; (8003e74 <TIM_Base_SetConfig+0x124>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d108      	bne.n	8003da2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a2f      	ldr	r2, [pc, #188]	; (8003e64 <TIM_Base_SetConfig+0x114>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d01f      	beq.n	8003dea <TIM_Base_SetConfig+0x9a>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db0:	d01b      	beq.n	8003dea <TIM_Base_SetConfig+0x9a>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a2c      	ldr	r2, [pc, #176]	; (8003e68 <TIM_Base_SetConfig+0x118>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d017      	beq.n	8003dea <TIM_Base_SetConfig+0x9a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a2b      	ldr	r2, [pc, #172]	; (8003e6c <TIM_Base_SetConfig+0x11c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d013      	beq.n	8003dea <TIM_Base_SetConfig+0x9a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a2a      	ldr	r2, [pc, #168]	; (8003e70 <TIM_Base_SetConfig+0x120>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00f      	beq.n	8003dea <TIM_Base_SetConfig+0x9a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a29      	ldr	r2, [pc, #164]	; (8003e74 <TIM_Base_SetConfig+0x124>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d00b      	beq.n	8003dea <TIM_Base_SetConfig+0x9a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a28      	ldr	r2, [pc, #160]	; (8003e78 <TIM_Base_SetConfig+0x128>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d007      	beq.n	8003dea <TIM_Base_SetConfig+0x9a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a27      	ldr	r2, [pc, #156]	; (8003e7c <TIM_Base_SetConfig+0x12c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d003      	beq.n	8003dea <TIM_Base_SetConfig+0x9a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a26      	ldr	r2, [pc, #152]	; (8003e80 <TIM_Base_SetConfig+0x130>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d108      	bne.n	8003dfc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a10      	ldr	r2, [pc, #64]	; (8003e64 <TIM_Base_SetConfig+0x114>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d00f      	beq.n	8003e48 <TIM_Base_SetConfig+0xf8>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a12      	ldr	r2, [pc, #72]	; (8003e74 <TIM_Base_SetConfig+0x124>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d00b      	beq.n	8003e48 <TIM_Base_SetConfig+0xf8>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a11      	ldr	r2, [pc, #68]	; (8003e78 <TIM_Base_SetConfig+0x128>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d007      	beq.n	8003e48 <TIM_Base_SetConfig+0xf8>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a10      	ldr	r2, [pc, #64]	; (8003e7c <TIM_Base_SetConfig+0x12c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d003      	beq.n	8003e48 <TIM_Base_SetConfig+0xf8>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a0f      	ldr	r2, [pc, #60]	; (8003e80 <TIM_Base_SetConfig+0x130>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d103      	bne.n	8003e50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	691a      	ldr	r2, [r3, #16]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	615a      	str	r2, [r3, #20]
}
 8003e56:	bf00      	nop
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	40012c00 	.word	0x40012c00
 8003e68:	40000400 	.word	0x40000400
 8003e6c:	40000800 	.word	0x40000800
 8003e70:	40000c00 	.word	0x40000c00
 8003e74:	40013400 	.word	0x40013400
 8003e78:	40014000 	.word	0x40014000
 8003e7c:	40014400 	.word	0x40014400
 8003e80:	40014800 	.word	0x40014800

08003e84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	f023 0201 	bic.w	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0303 	bic.w	r3, r3, #3
 8003ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f023 0302 	bic.w	r3, r3, #2
 8003ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a2c      	ldr	r2, [pc, #176]	; (8003f90 <TIM_OC1_SetConfig+0x10c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d00f      	beq.n	8003f04 <TIM_OC1_SetConfig+0x80>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a2b      	ldr	r2, [pc, #172]	; (8003f94 <TIM_OC1_SetConfig+0x110>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d00b      	beq.n	8003f04 <TIM_OC1_SetConfig+0x80>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a2a      	ldr	r2, [pc, #168]	; (8003f98 <TIM_OC1_SetConfig+0x114>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d007      	beq.n	8003f04 <TIM_OC1_SetConfig+0x80>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a29      	ldr	r2, [pc, #164]	; (8003f9c <TIM_OC1_SetConfig+0x118>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d003      	beq.n	8003f04 <TIM_OC1_SetConfig+0x80>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a28      	ldr	r2, [pc, #160]	; (8003fa0 <TIM_OC1_SetConfig+0x11c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d10c      	bne.n	8003f1e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f023 0308 	bic.w	r3, r3, #8
 8003f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f023 0304 	bic.w	r3, r3, #4
 8003f1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a1b      	ldr	r2, [pc, #108]	; (8003f90 <TIM_OC1_SetConfig+0x10c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00f      	beq.n	8003f46 <TIM_OC1_SetConfig+0xc2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a1a      	ldr	r2, [pc, #104]	; (8003f94 <TIM_OC1_SetConfig+0x110>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00b      	beq.n	8003f46 <TIM_OC1_SetConfig+0xc2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a19      	ldr	r2, [pc, #100]	; (8003f98 <TIM_OC1_SetConfig+0x114>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d007      	beq.n	8003f46 <TIM_OC1_SetConfig+0xc2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a18      	ldr	r2, [pc, #96]	; (8003f9c <TIM_OC1_SetConfig+0x118>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d003      	beq.n	8003f46 <TIM_OC1_SetConfig+0xc2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a17      	ldr	r2, [pc, #92]	; (8003fa0 <TIM_OC1_SetConfig+0x11c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d111      	bne.n	8003f6a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	621a      	str	r2, [r3, #32]
}
 8003f84:	bf00      	nop
 8003f86:	371c      	adds	r7, #28
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	40012c00 	.word	0x40012c00
 8003f94:	40013400 	.word	0x40013400
 8003f98:	40014000 	.word	0x40014000
 8003f9c:	40014400 	.word	0x40014400
 8003fa0:	40014800 	.word	0x40014800

08003fa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	f023 0210 	bic.w	r2, r3, #16
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	021b      	lsls	r3, r3, #8
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f023 0320 	bic.w	r3, r3, #32
 8003ff2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a28      	ldr	r2, [pc, #160]	; (80040a4 <TIM_OC2_SetConfig+0x100>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_OC2_SetConfig+0x6c>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a27      	ldr	r2, [pc, #156]	; (80040a8 <TIM_OC2_SetConfig+0x104>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d10d      	bne.n	800402c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800402a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a1d      	ldr	r2, [pc, #116]	; (80040a4 <TIM_OC2_SetConfig+0x100>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d00f      	beq.n	8004054 <TIM_OC2_SetConfig+0xb0>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a1c      	ldr	r2, [pc, #112]	; (80040a8 <TIM_OC2_SetConfig+0x104>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d00b      	beq.n	8004054 <TIM_OC2_SetConfig+0xb0>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a1b      	ldr	r2, [pc, #108]	; (80040ac <TIM_OC2_SetConfig+0x108>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d007      	beq.n	8004054 <TIM_OC2_SetConfig+0xb0>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a1a      	ldr	r2, [pc, #104]	; (80040b0 <TIM_OC2_SetConfig+0x10c>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d003      	beq.n	8004054 <TIM_OC2_SetConfig+0xb0>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a19      	ldr	r2, [pc, #100]	; (80040b4 <TIM_OC2_SetConfig+0x110>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d113      	bne.n	800407c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800405a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004062:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4313      	orrs	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	621a      	str	r2, [r3, #32]
}
 8004096:	bf00      	nop
 8004098:	371c      	adds	r7, #28
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40012c00 	.word	0x40012c00
 80040a8:	40013400 	.word	0x40013400
 80040ac:	40014000 	.word	0x40014000
 80040b0:	40014400 	.word	0x40014400
 80040b4:	40014800 	.word	0x40014800

080040b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0303 	bic.w	r3, r3, #3
 80040f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	021b      	lsls	r3, r3, #8
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a27      	ldr	r2, [pc, #156]	; (80041b4 <TIM_OC3_SetConfig+0xfc>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d003      	beq.n	8004122 <TIM_OC3_SetConfig+0x6a>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a26      	ldr	r2, [pc, #152]	; (80041b8 <TIM_OC3_SetConfig+0x100>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d10d      	bne.n	800413e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004128:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	4313      	orrs	r3, r2
 8004134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800413c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a1c      	ldr	r2, [pc, #112]	; (80041b4 <TIM_OC3_SetConfig+0xfc>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00f      	beq.n	8004166 <TIM_OC3_SetConfig+0xae>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a1b      	ldr	r2, [pc, #108]	; (80041b8 <TIM_OC3_SetConfig+0x100>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00b      	beq.n	8004166 <TIM_OC3_SetConfig+0xae>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a1a      	ldr	r2, [pc, #104]	; (80041bc <TIM_OC3_SetConfig+0x104>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d007      	beq.n	8004166 <TIM_OC3_SetConfig+0xae>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a19      	ldr	r2, [pc, #100]	; (80041c0 <TIM_OC3_SetConfig+0x108>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d003      	beq.n	8004166 <TIM_OC3_SetConfig+0xae>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a18      	ldr	r2, [pc, #96]	; (80041c4 <TIM_OC3_SetConfig+0x10c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d113      	bne.n	800418e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800416c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	621a      	str	r2, [r3, #32]
}
 80041a8:	bf00      	nop
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	40012c00 	.word	0x40012c00
 80041b8:	40013400 	.word	0x40013400
 80041bc:	40014000 	.word	0x40014000
 80041c0:	40014400 	.word	0x40014400
 80041c4:	40014800 	.word	0x40014800

080041c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	021b      	lsls	r3, r3, #8
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	031b      	lsls	r3, r3, #12
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a18      	ldr	r2, [pc, #96]	; (8004288 <TIM_OC4_SetConfig+0xc0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00f      	beq.n	800424c <TIM_OC4_SetConfig+0x84>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a17      	ldr	r2, [pc, #92]	; (800428c <TIM_OC4_SetConfig+0xc4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d00b      	beq.n	800424c <TIM_OC4_SetConfig+0x84>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a16      	ldr	r2, [pc, #88]	; (8004290 <TIM_OC4_SetConfig+0xc8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d007      	beq.n	800424c <TIM_OC4_SetConfig+0x84>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a15      	ldr	r2, [pc, #84]	; (8004294 <TIM_OC4_SetConfig+0xcc>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d003      	beq.n	800424c <TIM_OC4_SetConfig+0x84>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a14      	ldr	r2, [pc, #80]	; (8004298 <TIM_OC4_SetConfig+0xd0>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d109      	bne.n	8004260 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004252:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	019b      	lsls	r3, r3, #6
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	4313      	orrs	r3, r2
 800425e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	621a      	str	r2, [r3, #32]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40012c00 	.word	0x40012c00
 800428c:	40013400 	.word	0x40013400
 8004290:	40014000 	.word	0x40014000
 8004294:	40014400 	.word	0x40014400
 8004298:	40014800 	.word	0x40014800

0800429c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80042e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	041b      	lsls	r3, r3, #16
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a17      	ldr	r2, [pc, #92]	; (8004350 <TIM_OC5_SetConfig+0xb4>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d00f      	beq.n	8004316 <TIM_OC5_SetConfig+0x7a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a16      	ldr	r2, [pc, #88]	; (8004354 <TIM_OC5_SetConfig+0xb8>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00b      	beq.n	8004316 <TIM_OC5_SetConfig+0x7a>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a15      	ldr	r2, [pc, #84]	; (8004358 <TIM_OC5_SetConfig+0xbc>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d007      	beq.n	8004316 <TIM_OC5_SetConfig+0x7a>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a14      	ldr	r2, [pc, #80]	; (800435c <TIM_OC5_SetConfig+0xc0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d003      	beq.n	8004316 <TIM_OC5_SetConfig+0x7a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a13      	ldr	r2, [pc, #76]	; (8004360 <TIM_OC5_SetConfig+0xc4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d109      	bne.n	800432a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800431c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	621a      	str	r2, [r3, #32]
}
 8004344:	bf00      	nop
 8004346:	371c      	adds	r7, #28
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	40012c00 	.word	0x40012c00
 8004354:	40013400 	.word	0x40013400
 8004358:	40014000 	.word	0x40014000
 800435c:	40014400 	.word	0x40014400
 8004360:	40014800 	.word	0x40014800

08004364 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	051b      	lsls	r3, r3, #20
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a18      	ldr	r2, [pc, #96]	; (800441c <TIM_OC6_SetConfig+0xb8>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d00f      	beq.n	80043e0 <TIM_OC6_SetConfig+0x7c>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a17      	ldr	r2, [pc, #92]	; (8004420 <TIM_OC6_SetConfig+0xbc>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d00b      	beq.n	80043e0 <TIM_OC6_SetConfig+0x7c>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a16      	ldr	r2, [pc, #88]	; (8004424 <TIM_OC6_SetConfig+0xc0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d007      	beq.n	80043e0 <TIM_OC6_SetConfig+0x7c>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a15      	ldr	r2, [pc, #84]	; (8004428 <TIM_OC6_SetConfig+0xc4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d003      	beq.n	80043e0 <TIM_OC6_SetConfig+0x7c>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a14      	ldr	r2, [pc, #80]	; (800442c <TIM_OC6_SetConfig+0xc8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d109      	bne.n	80043f4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	029b      	lsls	r3, r3, #10
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	621a      	str	r2, [r3, #32]
}
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40012c00 	.word	0x40012c00
 8004420:	40013400 	.word	0x40013400
 8004424:	40014000 	.word	0x40014000
 8004428:	40014400 	.word	0x40014400
 800442c:	40014800 	.word	0x40014800

08004430 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	f023 0201 	bic.w	r2, r3, #1
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800445a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	4313      	orrs	r3, r2
 8004464:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f023 030a 	bic.w	r3, r3, #10
 800446c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4313      	orrs	r3, r2
 8004474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	621a      	str	r2, [r3, #32]
}
 8004482:	bf00      	nop
 8004484:	371c      	adds	r7, #28
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800448e:	b480      	push	{r7}
 8004490:	b087      	sub	sp, #28
 8004492:	af00      	add	r7, sp, #0
 8004494:	60f8      	str	r0, [r7, #12]
 8004496:	60b9      	str	r1, [r7, #8]
 8004498:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	f023 0210 	bic.w	r2, r3, #16
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	031b      	lsls	r3, r3, #12
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	621a      	str	r2, [r3, #32]
}
 80044e2:	bf00      	nop
 80044e4:	371c      	adds	r7, #28
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b085      	sub	sp, #20
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
 80044f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004504:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	f043 0307 	orr.w	r3, r3, #7
 8004510:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	609a      	str	r2, [r3, #8]
}
 8004518:	bf00      	nop
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800453e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	021a      	lsls	r2, r3, #8
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	431a      	orrs	r2, r3
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4313      	orrs	r3, r2
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	609a      	str	r2, [r3, #8]
}
 8004558:	bf00      	nop
 800455a:	371c      	adds	r7, #28
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 031f 	and.w	r3, r3, #31
 8004576:	2201      	movs	r2, #1
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a1a      	ldr	r2, [r3, #32]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	43db      	mvns	r3, r3
 8004586:	401a      	ands	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a1a      	ldr	r2, [r3, #32]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f003 031f 	and.w	r3, r3, #31
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	fa01 f303 	lsl.w	r3, r1, r3
 800459c:	431a      	orrs	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	621a      	str	r2, [r3, #32]
}
 80045a2:	bf00      	nop
 80045a4:	371c      	adds	r7, #28
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045c4:	2302      	movs	r3, #2
 80045c6:	e045      	b.n	8004654 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a1c      	ldr	r2, [pc, #112]	; (8004660 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d004      	beq.n	80045fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a1b      	ldr	r2, [pc, #108]	; (8004664 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d108      	bne.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004602:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	4313      	orrs	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004614:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	4313      	orrs	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004626:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	4313      	orrs	r3, r2
 8004630:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	40012c00 	.word	0x40012c00
 8004664:	40013400 	.word	0x40013400

08004668 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004672:	2300      	movs	r3, #0
 8004674:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004680:	2302      	movs	r3, #2
 8004682:	e065      	b.n	8004750 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	041b      	lsls	r3, r3, #16
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a16      	ldr	r2, [pc, #88]	; (800475c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d004      	beq.n	8004712 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a14      	ldr	r2, [pc, #80]	; (8004760 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d115      	bne.n	800473e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	051b      	lsls	r3, r3, #20
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	4313      	orrs	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	40012c00 	.word	0x40012c00
 8004760:	40013400 	.word	0x40013400

08004764 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e040      	b.n	8004834 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d106      	bne.n	80047c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f004 fac4 	bl	8008d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2224      	movs	r2, #36	; 0x24
 80047cc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0201 	bic.w	r2, r2, #1
 80047dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 fa6e 	bl	8004cc0 <UART_SetConfig>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d101      	bne.n	80047ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e022      	b.n	8004834 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fdaa 	bl	8005350 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800480a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689a      	ldr	r2, [r3, #8]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800481a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 fe31 	bl	8005494 <UART_CheckIdleState>
 8004832:	4603      	mov	r3, r0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3708      	adds	r7, #8
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	4613      	mov	r3, r2
 8004848:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800484e:	2b20      	cmp	r3, #32
 8004850:	d144      	bne.n	80048dc <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <HAL_UART_Transmit_IT+0x22>
 8004858:	88fb      	ldrh	r3, [r7, #6]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e03d      	b.n	80048de <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004868:	2b01      	cmp	r3, #1
 800486a:	d101      	bne.n	8004870 <HAL_UART_Transmit_IT+0x34>
 800486c:	2302      	movs	r3, #2
 800486e:	e036      	b.n	80048de <HAL_UART_Transmit_IT+0xa2>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	88fa      	ldrh	r2, [r7, #6]
 8004882:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	88fa      	ldrh	r2, [r7, #6]
 800488a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2221      	movs	r2, #33	; 0x21
 800489e:	675a      	str	r2, [r3, #116]	; 0x74
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a8:	d107      	bne.n	80048ba <HAL_UART_Transmit_IT+0x7e>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d103      	bne.n	80048ba <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4a0d      	ldr	r2, [pc, #52]	; (80048ec <HAL_UART_Transmit_IT+0xb0>)
 80048b6:	665a      	str	r2, [r3, #100]	; 0x64
 80048b8:	e002      	b.n	80048c0 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4a0c      	ldr	r2, [pc, #48]	; (80048f0 <HAL_UART_Transmit_IT+0xb4>)
 80048be:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048d6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80048d8:	2300      	movs	r3, #0
 80048da:	e000      	b.n	80048de <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 80048dc:	2302      	movs	r3, #2
  }
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	0800568f 	.word	0x0800568f
 80048f0:	0800561b 	.word	0x0800561b

080048f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	4613      	mov	r3, r2
 8004900:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004906:	2b20      	cmp	r3, #32
 8004908:	f040 808a 	bne.w	8004a20 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d002      	beq.n	8004918 <HAL_UART_Receive_IT+0x24>
 8004912:	88fb      	ldrh	r3, [r7, #6]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e082      	b.n	8004a22 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <HAL_UART_Receive_IT+0x36>
 8004926:	2302      	movs	r3, #2
 8004928:	e07b      	b.n	8004a22 <HAL_UART_Receive_IT+0x12e>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	88fa      	ldrh	r2, [r7, #6]
 800493c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	88fa      	ldrh	r2, [r7, #6]
 8004944:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004956:	d10e      	bne.n	8004976 <HAL_UART_Receive_IT+0x82>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d105      	bne.n	800496c <HAL_UART_Receive_IT+0x78>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004966:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800496a:	e02d      	b.n	80049c8 <HAL_UART_Receive_IT+0xd4>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	22ff      	movs	r2, #255	; 0xff
 8004970:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004974:	e028      	b.n	80049c8 <HAL_UART_Receive_IT+0xd4>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10d      	bne.n	800499a <HAL_UART_Receive_IT+0xa6>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d104      	bne.n	8004990 <HAL_UART_Receive_IT+0x9c>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	22ff      	movs	r2, #255	; 0xff
 800498a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800498e:	e01b      	b.n	80049c8 <HAL_UART_Receive_IT+0xd4>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	227f      	movs	r2, #127	; 0x7f
 8004994:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004998:	e016      	b.n	80049c8 <HAL_UART_Receive_IT+0xd4>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049a2:	d10d      	bne.n	80049c0 <HAL_UART_Receive_IT+0xcc>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d104      	bne.n	80049b6 <HAL_UART_Receive_IT+0xc2>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	227f      	movs	r2, #127	; 0x7f
 80049b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049b4:	e008      	b.n	80049c8 <HAL_UART_Receive_IT+0xd4>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	223f      	movs	r2, #63	; 0x3f
 80049ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049be:	e003      	b.n	80049c8 <HAL_UART_Receive_IT+0xd4>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2222      	movs	r2, #34	; 0x22
 80049d2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ec:	d107      	bne.n	80049fe <HAL_UART_Receive_IT+0x10a>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d103      	bne.n	80049fe <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	4a0d      	ldr	r2, [pc, #52]	; (8004a30 <HAL_UART_Receive_IT+0x13c>)
 80049fa:	661a      	str	r2, [r3, #96]	; 0x60
 80049fc:	e002      	b.n	8004a04 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	4a0c      	ldr	r2, [pc, #48]	; (8004a34 <HAL_UART_Receive_IT+0x140>)
 8004a02:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004a1a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	e000      	b.n	8004a22 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004a20:	2302      	movs	r3, #2
  }
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	080057e7 	.word	0x080057e7
 8004a34:	0800573d 	.word	0x0800573d

08004a38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d113      	bne.n	8004a8e <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	f003 0320 	and.w	r3, r3, #32
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00e      	beq.n	8004a8e <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	f003 0320 	and.w	r3, r3, #32
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d009      	beq.n	8004a8e <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 80ff 	beq.w	8004c82 <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	4798      	blx	r3
      }
      return;
 8004a8c:	e0f9      	b.n	8004c82 <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 80c1 	beq.w	8004c18 <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d105      	bne.n	8004aac <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 80b6 	beq.w	8004c18 <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00e      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x9c>
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d009      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004acc:	f043 0201 	orr.w	r2, r3, #1
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00e      	beq.n	8004afc <HAL_UART_IRQHandler+0xc4>
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d009      	beq.n	8004afc <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2202      	movs	r2, #2
 8004aee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004af4:	f043 0204 	orr.w	r2, r3, #4
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	f003 0304 	and.w	r3, r3, #4
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00e      	beq.n	8004b24 <HAL_UART_IRQHandler+0xec>
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d009      	beq.n	8004b24 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2204      	movs	r2, #4
 8004b16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b1c:	f043 0202 	orr.w	r2, r3, #2
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d013      	beq.n	8004b56 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	f003 0320 	and.w	r3, r3, #32
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d104      	bne.n	8004b42 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d009      	beq.n	8004b56 <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2208      	movs	r2, #8
 8004b48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b4e:	f043 0208 	orr.w	r2, r3, #8
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 8093 	beq.w	8004c86 <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00c      	beq.n	8004b84 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	f003 0320 	and.w	r3, r3, #32
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d007      	beq.n	8004b84 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b88:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b94:	2b40      	cmp	r3, #64	; 0x40
 8004b96:	d004      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d031      	beq.n	8004c06 <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fd03 	bl	80055ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb2:	2b40      	cmp	r3, #64	; 0x40
 8004bb4:	d123      	bne.n	8004bfe <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bc4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d013      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bd2:	4a30      	ldr	r2, [pc, #192]	; (8004c94 <HAL_UART_IRQHandler+0x25c>)
 8004bd4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fc fce5 	bl	80015aa <HAL_DMA_Abort_IT>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d016      	beq.n	8004c14 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf4:	e00e      	b.n	8004c14 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f858 	bl	8004cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bfc:	e00a      	b.n	8004c14 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f854 	bl	8004cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c04:	e006      	b.n	8004c14 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f850 	bl	8004cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004c12:	e038      	b.n	8004c86 <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c14:	bf00      	nop
    return;
 8004c16:	e036      	b.n	8004c86 <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00d      	beq.n	8004c3e <HAL_UART_IRQHandler+0x206>
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d008      	beq.n	8004c3e <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 fe2a 	bl	8005890 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c3c:	e026      	b.n	8004c8c <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00d      	beq.n	8004c64 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d008      	beq.n	8004c64 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d017      	beq.n	8004c8a <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	4798      	blx	r3
    }
    return;
 8004c62:	e012      	b.n	8004c8a <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00e      	beq.n	8004c8c <HAL_UART_IRQHandler+0x254>
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d009      	beq.n	8004c8c <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 fd46 	bl	800570a <UART_EndTransmit_IT>
    return;
 8004c7e:	bf00      	nop
 8004c80:	e004      	b.n	8004c8c <HAL_UART_IRQHandler+0x254>
      return;
 8004c82:	bf00      	nop
 8004c84:	e002      	b.n	8004c8c <HAL_UART_IRQHandler+0x254>
    return;
 8004c86:	bf00      	nop
 8004c88:	e000      	b.n	8004c8c <HAL_UART_IRQHandler+0x254>
    return;
 8004c8a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004c8c:	3720      	adds	r7, #32
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	080055ef 	.word	0x080055ef

08004c98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cc0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004cc4:	b088      	sub	sp, #32
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	4bac      	ldr	r3, [pc, #688]	; (8004fa8 <UART_SetConfig+0x2e8>)
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6812      	ldr	r2, [r2, #0]
 8004cfc:	69f9      	ldr	r1, [r7, #28]
 8004cfe:	430b      	orrs	r3, r1
 8004d00:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4aa2      	ldr	r2, [pc, #648]	; (8004fac <UART_SetConfig+0x2ec>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d004      	beq.n	8004d32 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	69fa      	ldr	r2, [r7, #28]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	69fa      	ldr	r2, [r7, #28]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a99      	ldr	r2, [pc, #612]	; (8004fb0 <UART_SetConfig+0x2f0>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d121      	bne.n	8004d94 <UART_SetConfig+0xd4>
 8004d50:	4b98      	ldr	r3, [pc, #608]	; (8004fb4 <UART_SetConfig+0x2f4>)
 8004d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	2b03      	cmp	r3, #3
 8004d5c:	d816      	bhi.n	8004d8c <UART_SetConfig+0xcc>
 8004d5e:	a201      	add	r2, pc, #4	; (adr r2, 8004d64 <UART_SetConfig+0xa4>)
 8004d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d64:	08004d75 	.word	0x08004d75
 8004d68:	08004d81 	.word	0x08004d81
 8004d6c:	08004d7b 	.word	0x08004d7b
 8004d70:	08004d87 	.word	0x08004d87
 8004d74:	2301      	movs	r3, #1
 8004d76:	76fb      	strb	r3, [r7, #27]
 8004d78:	e0e8      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	76fb      	strb	r3, [r7, #27]
 8004d7e:	e0e5      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004d80:	2304      	movs	r3, #4
 8004d82:	76fb      	strb	r3, [r7, #27]
 8004d84:	e0e2      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004d86:	2308      	movs	r3, #8
 8004d88:	76fb      	strb	r3, [r7, #27]
 8004d8a:	e0df      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004d8c:	2310      	movs	r3, #16
 8004d8e:	76fb      	strb	r3, [r7, #27]
 8004d90:	bf00      	nop
 8004d92:	e0db      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a87      	ldr	r2, [pc, #540]	; (8004fb8 <UART_SetConfig+0x2f8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d134      	bne.n	8004e08 <UART_SetConfig+0x148>
 8004d9e:	4b85      	ldr	r3, [pc, #532]	; (8004fb4 <UART_SetConfig+0x2f4>)
 8004da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da4:	f003 030c 	and.w	r3, r3, #12
 8004da8:	2b0c      	cmp	r3, #12
 8004daa:	d829      	bhi.n	8004e00 <UART_SetConfig+0x140>
 8004dac:	a201      	add	r2, pc, #4	; (adr r2, 8004db4 <UART_SetConfig+0xf4>)
 8004dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db2:	bf00      	nop
 8004db4:	08004de9 	.word	0x08004de9
 8004db8:	08004e01 	.word	0x08004e01
 8004dbc:	08004e01 	.word	0x08004e01
 8004dc0:	08004e01 	.word	0x08004e01
 8004dc4:	08004df5 	.word	0x08004df5
 8004dc8:	08004e01 	.word	0x08004e01
 8004dcc:	08004e01 	.word	0x08004e01
 8004dd0:	08004e01 	.word	0x08004e01
 8004dd4:	08004def 	.word	0x08004def
 8004dd8:	08004e01 	.word	0x08004e01
 8004ddc:	08004e01 	.word	0x08004e01
 8004de0:	08004e01 	.word	0x08004e01
 8004de4:	08004dfb 	.word	0x08004dfb
 8004de8:	2300      	movs	r3, #0
 8004dea:	76fb      	strb	r3, [r7, #27]
 8004dec:	e0ae      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004dee:	2302      	movs	r3, #2
 8004df0:	76fb      	strb	r3, [r7, #27]
 8004df2:	e0ab      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004df4:	2304      	movs	r3, #4
 8004df6:	76fb      	strb	r3, [r7, #27]
 8004df8:	e0a8      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004dfa:	2308      	movs	r3, #8
 8004dfc:	76fb      	strb	r3, [r7, #27]
 8004dfe:	e0a5      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004e00:	2310      	movs	r3, #16
 8004e02:	76fb      	strb	r3, [r7, #27]
 8004e04:	bf00      	nop
 8004e06:	e0a1      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a6b      	ldr	r2, [pc, #428]	; (8004fbc <UART_SetConfig+0x2fc>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d120      	bne.n	8004e54 <UART_SetConfig+0x194>
 8004e12:	4b68      	ldr	r3, [pc, #416]	; (8004fb4 <UART_SetConfig+0x2f4>)
 8004e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e1c:	2b10      	cmp	r3, #16
 8004e1e:	d00f      	beq.n	8004e40 <UART_SetConfig+0x180>
 8004e20:	2b10      	cmp	r3, #16
 8004e22:	d802      	bhi.n	8004e2a <UART_SetConfig+0x16a>
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <UART_SetConfig+0x174>
 8004e28:	e010      	b.n	8004e4c <UART_SetConfig+0x18c>
 8004e2a:	2b20      	cmp	r3, #32
 8004e2c:	d005      	beq.n	8004e3a <UART_SetConfig+0x17a>
 8004e2e:	2b30      	cmp	r3, #48	; 0x30
 8004e30:	d009      	beq.n	8004e46 <UART_SetConfig+0x186>
 8004e32:	e00b      	b.n	8004e4c <UART_SetConfig+0x18c>
 8004e34:	2300      	movs	r3, #0
 8004e36:	76fb      	strb	r3, [r7, #27]
 8004e38:	e088      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	76fb      	strb	r3, [r7, #27]
 8004e3e:	e085      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004e40:	2304      	movs	r3, #4
 8004e42:	76fb      	strb	r3, [r7, #27]
 8004e44:	e082      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004e46:	2308      	movs	r3, #8
 8004e48:	76fb      	strb	r3, [r7, #27]
 8004e4a:	e07f      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004e4c:	2310      	movs	r3, #16
 8004e4e:	76fb      	strb	r3, [r7, #27]
 8004e50:	bf00      	nop
 8004e52:	e07b      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a59      	ldr	r2, [pc, #356]	; (8004fc0 <UART_SetConfig+0x300>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d120      	bne.n	8004ea0 <UART_SetConfig+0x1e0>
 8004e5e:	4b55      	ldr	r3, [pc, #340]	; (8004fb4 <UART_SetConfig+0x2f4>)
 8004e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e68:	2b40      	cmp	r3, #64	; 0x40
 8004e6a:	d00f      	beq.n	8004e8c <UART_SetConfig+0x1cc>
 8004e6c:	2b40      	cmp	r3, #64	; 0x40
 8004e6e:	d802      	bhi.n	8004e76 <UART_SetConfig+0x1b6>
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <UART_SetConfig+0x1c0>
 8004e74:	e010      	b.n	8004e98 <UART_SetConfig+0x1d8>
 8004e76:	2b80      	cmp	r3, #128	; 0x80
 8004e78:	d005      	beq.n	8004e86 <UART_SetConfig+0x1c6>
 8004e7a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e7c:	d009      	beq.n	8004e92 <UART_SetConfig+0x1d2>
 8004e7e:	e00b      	b.n	8004e98 <UART_SetConfig+0x1d8>
 8004e80:	2300      	movs	r3, #0
 8004e82:	76fb      	strb	r3, [r7, #27]
 8004e84:	e062      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004e86:	2302      	movs	r3, #2
 8004e88:	76fb      	strb	r3, [r7, #27]
 8004e8a:	e05f      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004e8c:	2304      	movs	r3, #4
 8004e8e:	76fb      	strb	r3, [r7, #27]
 8004e90:	e05c      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004e92:	2308      	movs	r3, #8
 8004e94:	76fb      	strb	r3, [r7, #27]
 8004e96:	e059      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004e98:	2310      	movs	r3, #16
 8004e9a:	76fb      	strb	r3, [r7, #27]
 8004e9c:	bf00      	nop
 8004e9e:	e055      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a47      	ldr	r2, [pc, #284]	; (8004fc4 <UART_SetConfig+0x304>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d124      	bne.n	8004ef4 <UART_SetConfig+0x234>
 8004eaa:	4b42      	ldr	r3, [pc, #264]	; (8004fb4 <UART_SetConfig+0x2f4>)
 8004eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eb8:	d012      	beq.n	8004ee0 <UART_SetConfig+0x220>
 8004eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ebe:	d802      	bhi.n	8004ec6 <UART_SetConfig+0x206>
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d007      	beq.n	8004ed4 <UART_SetConfig+0x214>
 8004ec4:	e012      	b.n	8004eec <UART_SetConfig+0x22c>
 8004ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eca:	d006      	beq.n	8004eda <UART_SetConfig+0x21a>
 8004ecc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ed0:	d009      	beq.n	8004ee6 <UART_SetConfig+0x226>
 8004ed2:	e00b      	b.n	8004eec <UART_SetConfig+0x22c>
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	76fb      	strb	r3, [r7, #27]
 8004ed8:	e038      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004eda:	2302      	movs	r3, #2
 8004edc:	76fb      	strb	r3, [r7, #27]
 8004ede:	e035      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004ee0:	2304      	movs	r3, #4
 8004ee2:	76fb      	strb	r3, [r7, #27]
 8004ee4:	e032      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004ee6:	2308      	movs	r3, #8
 8004ee8:	76fb      	strb	r3, [r7, #27]
 8004eea:	e02f      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004eec:	2310      	movs	r3, #16
 8004eee:	76fb      	strb	r3, [r7, #27]
 8004ef0:	bf00      	nop
 8004ef2:	e02b      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a2c      	ldr	r2, [pc, #176]	; (8004fac <UART_SetConfig+0x2ec>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d124      	bne.n	8004f48 <UART_SetConfig+0x288>
 8004efe:	4b2d      	ldr	r3, [pc, #180]	; (8004fb4 <UART_SetConfig+0x2f4>)
 8004f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f0c:	d012      	beq.n	8004f34 <UART_SetConfig+0x274>
 8004f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f12:	d802      	bhi.n	8004f1a <UART_SetConfig+0x25a>
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d007      	beq.n	8004f28 <UART_SetConfig+0x268>
 8004f18:	e012      	b.n	8004f40 <UART_SetConfig+0x280>
 8004f1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f1e:	d006      	beq.n	8004f2e <UART_SetConfig+0x26e>
 8004f20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f24:	d009      	beq.n	8004f3a <UART_SetConfig+0x27a>
 8004f26:	e00b      	b.n	8004f40 <UART_SetConfig+0x280>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	76fb      	strb	r3, [r7, #27]
 8004f2c:	e00e      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	76fb      	strb	r3, [r7, #27]
 8004f32:	e00b      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004f34:	2304      	movs	r3, #4
 8004f36:	76fb      	strb	r3, [r7, #27]
 8004f38:	e008      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004f3a:	2308      	movs	r3, #8
 8004f3c:	76fb      	strb	r3, [r7, #27]
 8004f3e:	e005      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004f40:	2310      	movs	r3, #16
 8004f42:	76fb      	strb	r3, [r7, #27]
 8004f44:	bf00      	nop
 8004f46:	e001      	b.n	8004f4c <UART_SetConfig+0x28c>
 8004f48:	2310      	movs	r3, #16
 8004f4a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a16      	ldr	r2, [pc, #88]	; (8004fac <UART_SetConfig+0x2ec>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	f040 80fa 	bne.w	800514c <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f58:	7efb      	ldrb	r3, [r7, #27]
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	d836      	bhi.n	8004fcc <UART_SetConfig+0x30c>
 8004f5e:	a201      	add	r2, pc, #4	; (adr r2, 8004f64 <UART_SetConfig+0x2a4>)
 8004f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f64:	08004f89 	.word	0x08004f89
 8004f68:	08004fcd 	.word	0x08004fcd
 8004f6c:	08004f91 	.word	0x08004f91
 8004f70:	08004fcd 	.word	0x08004fcd
 8004f74:	08004f97 	.word	0x08004f97
 8004f78:	08004fcd 	.word	0x08004fcd
 8004f7c:	08004fcd 	.word	0x08004fcd
 8004f80:	08004fcd 	.word	0x08004fcd
 8004f84:	08004f9f 	.word	0x08004f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004f88:	f7fd fa9c 	bl	80024c4 <HAL_RCC_GetPCLK1Freq>
 8004f8c:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f8e:	e020      	b.n	8004fd2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004f90:	4b0d      	ldr	r3, [pc, #52]	; (8004fc8 <UART_SetConfig+0x308>)
 8004f92:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f94:	e01d      	b.n	8004fd2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004f96:	f7fd f9ff 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8004f9a:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f9c:	e019      	b.n	8004fd2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fa2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004fa4:	e015      	b.n	8004fd2 <UART_SetConfig+0x312>
 8004fa6:	bf00      	nop
 8004fa8:	efff69f3 	.word	0xefff69f3
 8004fac:	40008000 	.word	0x40008000
 8004fb0:	40013800 	.word	0x40013800
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	40004400 	.word	0x40004400
 8004fbc:	40004800 	.word	0x40004800
 8004fc0:	40004c00 	.word	0x40004c00
 8004fc4:	40005000 	.word	0x40005000
 8004fc8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	74fb      	strb	r3, [r7, #19]
        break;
 8004fd0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 81ac 	beq.w	8005332 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	4413      	add	r3, r2
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d305      	bcc.n	8004ff6 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d902      	bls.n	8004ffc <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	74fb      	strb	r3, [r7, #19]
 8004ffa:	e19a      	b.n	8005332 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8004ffc:	7efb      	ldrb	r3, [r7, #27]
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	f200 8091 	bhi.w	8005126 <UART_SetConfig+0x466>
 8005004:	a201      	add	r2, pc, #4	; (adr r2, 800500c <UART_SetConfig+0x34c>)
 8005006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500a:	bf00      	nop
 800500c:	08005031 	.word	0x08005031
 8005010:	08005127 	.word	0x08005127
 8005014:	0800507d 	.word	0x0800507d
 8005018:	08005127 	.word	0x08005127
 800501c:	080050b1 	.word	0x080050b1
 8005020:	08005127 	.word	0x08005127
 8005024:	08005127 	.word	0x08005127
 8005028:	08005127 	.word	0x08005127
 800502c:	080050fd 	.word	0x080050fd
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005030:	f7fd fa48 	bl	80024c4 <HAL_RCC_GetPCLK1Freq>
 8005034:	4603      	mov	r3, r0
 8005036:	4619      	mov	r1, r3
 8005038:	f04f 0200 	mov.w	r2, #0
 800503c:	f04f 0300 	mov.w	r3, #0
 8005040:	f04f 0400 	mov.w	r4, #0
 8005044:	0214      	lsls	r4, r2, #8
 8005046:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800504a:	020b      	lsls	r3, r1, #8
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6852      	ldr	r2, [r2, #4]
 8005050:	0852      	lsrs	r2, r2, #1
 8005052:	4611      	mov	r1, r2
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	eb13 0b01 	adds.w	fp, r3, r1
 800505c:	eb44 0c02 	adc.w	ip, r4, r2
 8005060:	4658      	mov	r0, fp
 8005062:	4661      	mov	r1, ip
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f04f 0400 	mov.w	r4, #0
 800506c:	461a      	mov	r2, r3
 800506e:	4623      	mov	r3, r4
 8005070:	f7fb fdca 	bl	8000c08 <__aeabi_uldivmod>
 8005074:	4603      	mov	r3, r0
 8005076:	460c      	mov	r4, r1
 8005078:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800507a:	e057      	b.n	800512c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	085b      	lsrs	r3, r3, #1
 8005082:	f04f 0400 	mov.w	r4, #0
 8005086:	49b1      	ldr	r1, [pc, #708]	; (800534c <UART_SetConfig+0x68c>)
 8005088:	f04f 0200 	mov.w	r2, #0
 800508c:	eb13 0b01 	adds.w	fp, r3, r1
 8005090:	eb44 0c02 	adc.w	ip, r4, r2
 8005094:	4658      	mov	r0, fp
 8005096:	4661      	mov	r1, ip
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f04f 0400 	mov.w	r4, #0
 80050a0:	461a      	mov	r2, r3
 80050a2:	4623      	mov	r3, r4
 80050a4:	f7fb fdb0 	bl	8000c08 <__aeabi_uldivmod>
 80050a8:	4603      	mov	r3, r0
 80050aa:	460c      	mov	r4, r1
 80050ac:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80050ae:	e03d      	b.n	800512c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80050b0:	f7fd f972 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 80050b4:	4603      	mov	r3, r0
 80050b6:	4619      	mov	r1, r3
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	f04f 0400 	mov.w	r4, #0
 80050c4:	0214      	lsls	r4, r2, #8
 80050c6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80050ca:	020b      	lsls	r3, r1, #8
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	6852      	ldr	r2, [r2, #4]
 80050d0:	0852      	lsrs	r2, r2, #1
 80050d2:	4611      	mov	r1, r2
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	eb13 0b01 	adds.w	fp, r3, r1
 80050dc:	eb44 0c02 	adc.w	ip, r4, r2
 80050e0:	4658      	mov	r0, fp
 80050e2:	4661      	mov	r1, ip
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f04f 0400 	mov.w	r4, #0
 80050ec:	461a      	mov	r2, r3
 80050ee:	4623      	mov	r3, r4
 80050f0:	f7fb fd8a 	bl	8000c08 <__aeabi_uldivmod>
 80050f4:	4603      	mov	r3, r0
 80050f6:	460c      	mov	r4, r1
 80050f8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80050fa:	e017      	b.n	800512c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	085b      	lsrs	r3, r3, #1
 8005102:	f04f 0400 	mov.w	r4, #0
 8005106:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800510a:	f144 0100 	adc.w	r1, r4, #0
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f04f 0400 	mov.w	r4, #0
 8005116:	461a      	mov	r2, r3
 8005118:	4623      	mov	r3, r4
 800511a:	f7fb fd75 	bl	8000c08 <__aeabi_uldivmod>
 800511e:	4603      	mov	r3, r0
 8005120:	460c      	mov	r4, r1
 8005122:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005124:	e002      	b.n	800512c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	74fb      	strb	r3, [r7, #19]
            break;
 800512a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005132:	d308      	bcc.n	8005146 <UART_SetConfig+0x486>
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800513a:	d204      	bcs.n	8005146 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	60da      	str	r2, [r3, #12]
 8005144:	e0f5      	b.n	8005332 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	74fb      	strb	r3, [r7, #19]
 800514a:	e0f2      	b.n	8005332 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005154:	d17f      	bne.n	8005256 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8005156:	7efb      	ldrb	r3, [r7, #27]
 8005158:	2b08      	cmp	r3, #8
 800515a:	d85c      	bhi.n	8005216 <UART_SetConfig+0x556>
 800515c:	a201      	add	r2, pc, #4	; (adr r2, 8005164 <UART_SetConfig+0x4a4>)
 800515e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005162:	bf00      	nop
 8005164:	08005189 	.word	0x08005189
 8005168:	080051a7 	.word	0x080051a7
 800516c:	080051c5 	.word	0x080051c5
 8005170:	08005217 	.word	0x08005217
 8005174:	080051e1 	.word	0x080051e1
 8005178:	08005217 	.word	0x08005217
 800517c:	08005217 	.word	0x08005217
 8005180:	08005217 	.word	0x08005217
 8005184:	080051ff 	.word	0x080051ff
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005188:	f7fd f99c 	bl	80024c4 <HAL_RCC_GetPCLK1Freq>
 800518c:	4603      	mov	r3, r0
 800518e:	005a      	lsls	r2, r3, #1
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	085b      	lsrs	r3, r3, #1
 8005196:	441a      	add	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80051a4:	e03a      	b.n	800521c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80051a6:	f7fd f9a3 	bl	80024f0 <HAL_RCC_GetPCLK2Freq>
 80051aa:	4603      	mov	r3, r0
 80051ac:	005a      	lsls	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	085b      	lsrs	r3, r3, #1
 80051b4:	441a      	add	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80051be:	b29b      	uxth	r3, r3
 80051c0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80051c2:	e02b      	b.n	800521c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	085b      	lsrs	r3, r3, #1
 80051ca:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80051ce:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6852      	ldr	r2, [r2, #4]
 80051d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80051da:	b29b      	uxth	r3, r3
 80051dc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80051de:	e01d      	b.n	800521c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80051e0:	f7fd f8da 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 80051e4:	4603      	mov	r3, r0
 80051e6:	005a      	lsls	r2, r3, #1
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	085b      	lsrs	r3, r3, #1
 80051ee:	441a      	add	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80051fc:	e00e      	b.n	800521c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	085b      	lsrs	r3, r3, #1
 8005204:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005210:	b29b      	uxth	r3, r3
 8005212:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005214:	e002      	b.n	800521c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	74fb      	strb	r3, [r7, #19]
        break;
 800521a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	2b0f      	cmp	r3, #15
 8005220:	d916      	bls.n	8005250 <UART_SetConfig+0x590>
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005228:	d212      	bcs.n	8005250 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	b29b      	uxth	r3, r3
 800522e:	f023 030f 	bic.w	r3, r3, #15
 8005232:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	085b      	lsrs	r3, r3, #1
 8005238:	b29b      	uxth	r3, r3
 800523a:	f003 0307 	and.w	r3, r3, #7
 800523e:	b29a      	uxth	r2, r3
 8005240:	897b      	ldrh	r3, [r7, #10]
 8005242:	4313      	orrs	r3, r2
 8005244:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	897a      	ldrh	r2, [r7, #10]
 800524c:	60da      	str	r2, [r3, #12]
 800524e:	e070      	b.n	8005332 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	74fb      	strb	r3, [r7, #19]
 8005254:	e06d      	b.n	8005332 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8005256:	7efb      	ldrb	r3, [r7, #27]
 8005258:	2b08      	cmp	r3, #8
 800525a:	d859      	bhi.n	8005310 <UART_SetConfig+0x650>
 800525c:	a201      	add	r2, pc, #4	; (adr r2, 8005264 <UART_SetConfig+0x5a4>)
 800525e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005262:	bf00      	nop
 8005264:	08005289 	.word	0x08005289
 8005268:	080052a5 	.word	0x080052a5
 800526c:	080052c1 	.word	0x080052c1
 8005270:	08005311 	.word	0x08005311
 8005274:	080052dd 	.word	0x080052dd
 8005278:	08005311 	.word	0x08005311
 800527c:	08005311 	.word	0x08005311
 8005280:	08005311 	.word	0x08005311
 8005284:	080052f9 	.word	0x080052f9
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005288:	f7fd f91c 	bl	80024c4 <HAL_RCC_GetPCLK1Freq>
 800528c:	4602      	mov	r2, r0
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	085b      	lsrs	r3, r3, #1
 8005294:	441a      	add	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	fbb2 f3f3 	udiv	r3, r2, r3
 800529e:	b29b      	uxth	r3, r3
 80052a0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80052a2:	e038      	b.n	8005316 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80052a4:	f7fd f924 	bl	80024f0 <HAL_RCC_GetPCLK2Freq>
 80052a8:	4602      	mov	r2, r0
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	085b      	lsrs	r3, r3, #1
 80052b0:	441a      	add	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80052be:	e02a      	b.n	8005316 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	085b      	lsrs	r3, r3, #1
 80052c6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80052ca:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6852      	ldr	r2, [r2, #4]
 80052d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80052da:	e01c      	b.n	8005316 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80052dc:	f7fd f85c 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 80052e0:	4602      	mov	r2, r0
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	085b      	lsrs	r3, r3, #1
 80052e8:	441a      	add	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80052f6:	e00e      	b.n	8005316 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	085b      	lsrs	r3, r3, #1
 80052fe:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	fbb2 f3f3 	udiv	r3, r2, r3
 800530a:	b29b      	uxth	r3, r3
 800530c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800530e:	e002      	b.n	8005316 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	74fb      	strb	r3, [r7, #19]
        break;
 8005314:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2b0f      	cmp	r3, #15
 800531a:	d908      	bls.n	800532e <UART_SetConfig+0x66e>
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005322:	d204      	bcs.n	800532e <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	60da      	str	r2, [r3, #12]
 800532c:	e001      	b.n	8005332 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800533e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3720      	adds	r7, #32
 8005344:	46bd      	mov	sp, r7
 8005346:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800534a:	bf00      	nop
 800534c:	f4240000 	.word	0xf4240000

08005350 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00a      	beq.n	800537a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	f003 0304 	and.w	r3, r3, #4
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00a      	beq.n	80053be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	f003 0310 	and.w	r3, r3, #16
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005406:	f003 0320 	and.w	r3, r3, #32
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542c:	2b00      	cmp	r3, #0
 800542e:	d01a      	beq.n	8005466 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800544e:	d10a      	bne.n	8005466 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00a      	beq.n	8005488 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	605a      	str	r2, [r3, #4]
  }
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af02      	add	r7, sp, #8
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80054a2:	f7fb fd95 	bl	8000fd0 <HAL_GetTick>
 80054a6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0308 	and.w	r3, r3, #8
 80054b2:	2b08      	cmp	r3, #8
 80054b4:	d10e      	bne.n	80054d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f82a 	bl	800551e <UART_WaitOnFlagUntilTimeout>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e020      	b.n	8005516 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0304 	and.w	r3, r3, #4
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d10e      	bne.n	8005500 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 f814 	bl	800551e <UART_WaitOnFlagUntilTimeout>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e00a      	b.n	8005516 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2220      	movs	r2, #32
 8005504:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2220      	movs	r2, #32
 800550a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b084      	sub	sp, #16
 8005522:	af00      	add	r7, sp, #0
 8005524:	60f8      	str	r0, [r7, #12]
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	603b      	str	r3, [r7, #0]
 800552a:	4613      	mov	r3, r2
 800552c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800552e:	e02a      	b.n	8005586 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005536:	d026      	beq.n	8005586 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005538:	f7fb fd4a 	bl	8000fd0 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	429a      	cmp	r2, r3
 8005546:	d302      	bcc.n	800554e <UART_WaitOnFlagUntilTimeout+0x30>
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d11b      	bne.n	8005586 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800555c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	689a      	ldr	r2, [r3, #8]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0201 	bic.w	r2, r2, #1
 800556c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2220      	movs	r2, #32
 8005572:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2220      	movs	r2, #32
 8005578:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e00f      	b.n	80055a6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69da      	ldr	r2, [r3, #28]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	4013      	ands	r3, r2
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	429a      	cmp	r2, r3
 8005594:	bf0c      	ite	eq
 8005596:	2301      	moveq	r3, #1
 8005598:	2300      	movne	r3, #0
 800559a:	b2db      	uxtb	r3, r3
 800559c:	461a      	mov	r2, r3
 800559e:	79fb      	ldrb	r3, [r7, #7]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d0c5      	beq.n	8005530 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80055c4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0201 	bic.w	r2, r2, #1
 80055d4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2220      	movs	r2, #32
 80055da:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	661a      	str	r2, [r3, #96]	; 0x60
}
 80055e2:	bf00      	nop
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b084      	sub	sp, #16
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f7ff fb4d 	bl	8004cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005612:	bf00      	nop
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800561a:	b480      	push	{r7}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005626:	2b21      	cmp	r3, #33	; 0x21
 8005628:	d12b      	bne.n	8005682 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d110      	bne.n	8005658 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005644:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005654:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005656:	e014      	b.n	8005682 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800565c:	781a      	ldrb	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	b292      	uxth	r2, r2
 8005664:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800566a:	1c5a      	adds	r2, r3, #1
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005676:	b29b      	uxth	r3, r3
 8005678:	3b01      	subs	r3, #1
 800567a:	b29a      	uxth	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800568e:	b480      	push	{r7}
 8005690:	b085      	sub	sp, #20
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800569a:	2b21      	cmp	r3, #33	; 0x21
 800569c:	d12f      	bne.n	80056fe <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d110      	bne.n	80056cc <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056b8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056c8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80056ca:	e018      	b.n	80056fe <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	881a      	ldrh	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056de:	b292      	uxth	r2, r2
 80056e0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e6:	1c9a      	adds	r2, r3, #2
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80056fe:	bf00      	nop
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b082      	sub	sp, #8
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005720:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2220      	movs	r2, #32
 8005726:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff fab2 	bl	8004c98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005734:	bf00      	nop
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800574a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005750:	2b22      	cmp	r3, #34	; 0x22
 8005752:	d13a      	bne.n	80057ca <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800575a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800575c:	89bb      	ldrh	r3, [r7, #12]
 800575e:	b2d9      	uxtb	r1, r3
 8005760:	89fb      	ldrh	r3, [r7, #14]
 8005762:	b2da      	uxtb	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005768:	400a      	ands	r2, r1
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005772:	1c5a      	adds	r2, r3, #1
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d123      	bne.n	80057de <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80057a4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0201 	bic.w	r2, r2, #1
 80057b4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2220      	movs	r2, #32
 80057ba:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f002 fdd8 	bl	8008378 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057c8:	e009      	b.n	80057de <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	8b1b      	ldrh	r3, [r3, #24]
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0208 	orr.w	r2, r2, #8
 80057da:	b292      	uxth	r2, r2
 80057dc:	831a      	strh	r2, [r3, #24]
}
 80057de:	bf00      	nop
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b084      	sub	sp, #16
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80057f4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057fa:	2b22      	cmp	r3, #34	; 0x22
 80057fc:	d13a      	bne.n	8005874 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005804:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800580c:	89ba      	ldrh	r2, [r7, #12]
 800580e:	89fb      	ldrh	r3, [r7, #14]
 8005810:	4013      	ands	r3, r2
 8005812:	b29a      	uxth	r2, r3
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581c:	1c9a      	adds	r2, r3, #2
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005828:	b29b      	uxth	r3, r3
 800582a:	3b01      	subs	r3, #1
 800582c:	b29a      	uxth	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800583a:	b29b      	uxth	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d123      	bne.n	8005888 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800584e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689a      	ldr	r2, [r3, #8]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0201 	bic.w	r2, r2, #1
 800585e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2220      	movs	r2, #32
 8005864:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f002 fd83 	bl	8008378 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005872:	e009      	b.n	8005888 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	8b1b      	ldrh	r3, [r3, #24]
 800587a:	b29a      	uxth	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f042 0208 	orr.w	r2, r2, #8
 8005884:	b292      	uxth	r2, r2
 8005886:	831a      	strh	r2, [r3, #24]
}
 8005888:	bf00      	nop
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	4603      	mov	r3, r0
 80058ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80058ae:	2300      	movs	r3, #0
 80058b0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80058b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058b6:	2b84      	cmp	r3, #132	; 0x84
 80058b8:	d005      	beq.n	80058c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80058ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4413      	add	r3, r2
 80058c2:	3303      	adds	r3, #3
 80058c4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80058c6:	68fb      	ldr	r3, [r7, #12]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80058d8:	f000 fa4a 	bl	8005d70 <vTaskStartScheduler>
  
  return osOK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80058e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058e4:	b087      	sub	sp, #28
 80058e6:	af02      	add	r7, sp, #8
 80058e8:	6078      	str	r0, [r7, #4]
 80058ea:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685c      	ldr	r4, [r3, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058f8:	b29e      	uxth	r6, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005900:	4618      	mov	r0, r3
 8005902:	f7ff ffcf 	bl	80058a4 <makeFreeRtosPriority>
 8005906:	4602      	mov	r2, r0
 8005908:	f107 030c 	add.w	r3, r7, #12
 800590c:	9301      	str	r3, [sp, #4]
 800590e:	9200      	str	r2, [sp, #0]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	4632      	mov	r2, r6
 8005914:	4629      	mov	r1, r5
 8005916:	4620      	mov	r0, r4
 8005918:	f000 f8be 	bl	8005a98 <xTaskCreate>
 800591c:	4603      	mov	r3, r0
 800591e:	2b01      	cmp	r3, #1
 8005920:	d001      	beq.n	8005926 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8005922:	2300      	movs	r3, #0
 8005924:	e000      	b.n	8005928 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8005926:	68fb      	ldr	r3, [r7, #12]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005930 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f103 0208 	add.w	r2, r3, #8
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f04f 32ff 	mov.w	r2, #4294967295
 8005948:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f103 0208 	add.w	r2, r3, #8
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f103 0208 	add.w	r2, r3, #8
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800597e:	bf00      	nop
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800598a:	b480      	push	{r7}
 800598c:	b085      	sub	sp, #20
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	601a      	str	r2, [r3, #0]
}
 80059c6:	bf00      	nop
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059d2:	b480      	push	{r7}
 80059d4:	b085      	sub	sp, #20
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e8:	d103      	bne.n	80059f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	e00c      	b.n	8005a0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	3308      	adds	r3, #8
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	e002      	b.n	8005a00 <vListInsert+0x2e>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d2f6      	bcs.n	80059fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	601a      	str	r2, [r3, #0]
}
 8005a38:	bf00      	nop
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6892      	ldr	r2, [r2, #8]
 8005a5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6852      	ldr	r2, [r2, #4]
 8005a64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d103      	bne.n	8005a78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	1e5a      	subs	r2, r3, #1
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08c      	sub	sp, #48	; 0x30
 8005a9c:	af04      	add	r7, sp, #16
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	603b      	str	r3, [r7, #0]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aa8:	88fb      	ldrh	r3, [r7, #6]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 fec1 	bl	8006834 <pvPortMalloc>
 8005ab2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00e      	beq.n	8005ad8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005aba:	2060      	movs	r0, #96	; 0x60
 8005abc:	f000 feba 	bl	8006834 <pvPortMalloc>
 8005ac0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	631a      	str	r2, [r3, #48]	; 0x30
 8005ace:	e005      	b.n	8005adc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ad0:	6978      	ldr	r0, [r7, #20]
 8005ad2:	f000 ff71 	bl	80069b8 <vPortFree>
 8005ad6:	e001      	b.n	8005adc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d013      	beq.n	8005b0a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ae2:	88fa      	ldrh	r2, [r7, #6]
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	9303      	str	r3, [sp, #12]
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	9302      	str	r3, [sp, #8]
 8005aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aee:	9301      	str	r3, [sp, #4]
 8005af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 f80e 	bl	8005b1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005afe:	69f8      	ldr	r0, [r7, #28]
 8005b00:	f000 f894 	bl	8005c2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b04:	2301      	movs	r3, #1
 8005b06:	61bb      	str	r3, [r7, #24]
 8005b08:	e002      	b.n	8005b10 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b0e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b10:	69bb      	ldr	r3, [r7, #24]
	}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3720      	adds	r7, #32
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b088      	sub	sp, #32
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	60f8      	str	r0, [r7, #12]
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	607a      	str	r2, [r7, #4]
 8005b26:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	461a      	mov	r2, r3
 8005b32:	21a5      	movs	r1, #165	; 0xa5
 8005b34:	f003 fa7d 	bl	8009032 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b42:	3b01      	subs	r3, #1
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	f023 0307 	bic.w	r3, r3, #7
 8005b50:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	f003 0307 	and.w	r3, r3, #7
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d009      	beq.n	8005b70 <prvInitialiseNewTask+0x56>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	617b      	str	r3, [r7, #20]
 8005b6e:	e7fe      	b.n	8005b6e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b70:	2300      	movs	r3, #0
 8005b72:	61fb      	str	r3, [r7, #28]
 8005b74:	e012      	b.n	8005b9c <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	7819      	ldrb	r1, [r3, #0]
 8005b7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	4413      	add	r3, r2
 8005b84:	3334      	adds	r3, #52	; 0x34
 8005b86:	460a      	mov	r2, r1
 8005b88:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	4413      	add	r3, r2
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d006      	beq.n	8005ba4 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	61fb      	str	r3, [r7, #28]
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	2b0f      	cmp	r3, #15
 8005ba0:	d9e9      	bls.n	8005b76 <prvInitialiseNewTask+0x5c>
 8005ba2:	e000      	b.n	8005ba6 <prvInitialiseNewTask+0x8c>
		{
			break;
 8005ba4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb0:	2b06      	cmp	r3, #6
 8005bb2:	d901      	bls.n	8005bb8 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005bb4:	2306      	movs	r3, #6
 8005bb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bc2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bcc:	3304      	adds	r3, #4
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7ff fece 	bl	8005970 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	3318      	adds	r3, #24
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7ff fec9 	bl	8005970 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005be2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be6:	f1c3 0207 	rsb	r2, r3, #7
 8005bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bf2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8005bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	68f9      	ldr	r1, [r7, #12]
 8005c0c:	69b8      	ldr	r0, [r7, #24]
 8005c0e:	f000 fc11 	bl	8006434 <pxPortInitialiseStack>
 8005c12:	4602      	mov	r2, r0
 8005c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c16:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c24:	bf00      	nop
 8005c26:	3720      	adds	r7, #32
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c34:	f000 fd22 	bl	800667c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c38:	4b2c      	ldr	r3, [pc, #176]	; (8005cec <prvAddNewTaskToReadyList+0xc0>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	4a2b      	ldr	r2, [pc, #172]	; (8005cec <prvAddNewTaskToReadyList+0xc0>)
 8005c40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c42:	4b2b      	ldr	r3, [pc, #172]	; (8005cf0 <prvAddNewTaskToReadyList+0xc4>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d109      	bne.n	8005c5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c4a:	4a29      	ldr	r2, [pc, #164]	; (8005cf0 <prvAddNewTaskToReadyList+0xc4>)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c50:	4b26      	ldr	r3, [pc, #152]	; (8005cec <prvAddNewTaskToReadyList+0xc0>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d110      	bne.n	8005c7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c58:	f000 fac6 	bl	80061e8 <prvInitialiseTaskLists>
 8005c5c:	e00d      	b.n	8005c7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c5e:	4b25      	ldr	r3, [pc, #148]	; (8005cf4 <prvAddNewTaskToReadyList+0xc8>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d109      	bne.n	8005c7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c66:	4b22      	ldr	r3, [pc, #136]	; (8005cf0 <prvAddNewTaskToReadyList+0xc4>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d802      	bhi.n	8005c7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c74:	4a1e      	ldr	r2, [pc, #120]	; (8005cf0 <prvAddNewTaskToReadyList+0xc4>)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c7a:	4b1f      	ldr	r3, [pc, #124]	; (8005cf8 <prvAddNewTaskToReadyList+0xcc>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	4a1d      	ldr	r2, [pc, #116]	; (8005cf8 <prvAddNewTaskToReadyList+0xcc>)
 8005c82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c84:	4b1c      	ldr	r3, [pc, #112]	; (8005cf8 <prvAddNewTaskToReadyList+0xcc>)
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c90:	2201      	movs	r2, #1
 8005c92:	409a      	lsls	r2, r3
 8005c94:	4b19      	ldr	r3, [pc, #100]	; (8005cfc <prvAddNewTaskToReadyList+0xd0>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	4a18      	ldr	r2, [pc, #96]	; (8005cfc <prvAddNewTaskToReadyList+0xd0>)
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4a15      	ldr	r2, [pc, #84]	; (8005d00 <prvAddNewTaskToReadyList+0xd4>)
 8005cac:	441a      	add	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	f7ff fe68 	bl	800598a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005cba:	f000 fd0d 	bl	80066d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005cbe:	4b0d      	ldr	r3, [pc, #52]	; (8005cf4 <prvAddNewTaskToReadyList+0xc8>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00e      	beq.n	8005ce4 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005cc6:	4b0a      	ldr	r3, [pc, #40]	; (8005cf0 <prvAddNewTaskToReadyList+0xc4>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d207      	bcs.n	8005ce4 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005cd4:	4b0b      	ldr	r3, [pc, #44]	; (8005d04 <prvAddNewTaskToReadyList+0xd8>)
 8005cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ce4:	bf00      	nop
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	200015bc 	.word	0x200015bc
 8005cf0:	200014bc 	.word	0x200014bc
 8005cf4:	200015c8 	.word	0x200015c8
 8005cf8:	200015d8 	.word	0x200015d8
 8005cfc:	200015c4 	.word	0x200015c4
 8005d00:	200014c0 	.word	0x200014c0
 8005d04:	e000ed04 	.word	0xe000ed04

08005d08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d10:	2300      	movs	r3, #0
 8005d12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d016      	beq.n	8005d48 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d1a:	4b13      	ldr	r3, [pc, #76]	; (8005d68 <vTaskDelay+0x60>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d009      	beq.n	8005d36 <vTaskDelay+0x2e>
 8005d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	60bb      	str	r3, [r7, #8]
 8005d34:	e7fe      	b.n	8005d34 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005d36:	f000 f863 	bl	8005e00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fb13 	bl	8006368 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d42:	f000 f86b 	bl	8005e1c <xTaskResumeAll>
 8005d46:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d107      	bne.n	8005d5e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005d4e:	4b07      	ldr	r3, [pc, #28]	; (8005d6c <vTaskDelay+0x64>)
 8005d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d5e:	bf00      	nop
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	200015e4 	.word	0x200015e4
 8005d6c:	e000ed04 	.word	0xe000ed04

08005d70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8005d76:	4b1c      	ldr	r3, [pc, #112]	; (8005de8 <vTaskStartScheduler+0x78>)
 8005d78:	9301      	str	r3, [sp, #4]
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	2300      	movs	r3, #0
 8005d80:	2280      	movs	r2, #128	; 0x80
 8005d82:	491a      	ldr	r1, [pc, #104]	; (8005dec <vTaskStartScheduler+0x7c>)
 8005d84:	481a      	ldr	r0, [pc, #104]	; (8005df0 <vTaskStartScheduler+0x80>)
 8005d86:	f7ff fe87 	bl	8005a98 <xTaskCreate>
 8005d8a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d117      	bne.n	8005dc2 <vTaskStartScheduler+0x52>
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005da4:	4b13      	ldr	r3, [pc, #76]	; (8005df4 <vTaskStartScheduler+0x84>)
 8005da6:	f04f 32ff 	mov.w	r2, #4294967295
 8005daa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005dac:	4b12      	ldr	r3, [pc, #72]	; (8005df8 <vTaskStartScheduler+0x88>)
 8005dae:	2201      	movs	r2, #1
 8005db0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005db2:	4b12      	ldr	r3, [pc, #72]	; (8005dfc <vTaskStartScheduler+0x8c>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8005db8:	f001 ff83 	bl	8007cc2 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005dbc:	f000 fbc0 	bl	8006540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005dc0:	e00d      	b.n	8005dde <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc8:	d109      	bne.n	8005dde <vTaskStartScheduler+0x6e>
 8005dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	607b      	str	r3, [r7, #4]
 8005ddc:	e7fe      	b.n	8005ddc <vTaskStartScheduler+0x6c>
}
 8005dde:	bf00      	nop
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	200015e0 	.word	0x200015e0
 8005dec:	0800b168 	.word	0x0800b168
 8005df0:	080061b9 	.word	0x080061b9
 8005df4:	200015dc 	.word	0x200015dc
 8005df8:	200015c8 	.word	0x200015c8
 8005dfc:	200015c0 	.word	0x200015c0

08005e00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005e04:	4b04      	ldr	r3, [pc, #16]	; (8005e18 <vTaskSuspendAll+0x18>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	4a03      	ldr	r2, [pc, #12]	; (8005e18 <vTaskSuspendAll+0x18>)
 8005e0c:	6013      	str	r3, [r2, #0]
}
 8005e0e:	bf00      	nop
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	200015e4 	.word	0x200015e4

08005e1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e22:	2300      	movs	r3, #0
 8005e24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e26:	2300      	movs	r3, #0
 8005e28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e2a:	4b41      	ldr	r3, [pc, #260]	; (8005f30 <xTaskResumeAll+0x114>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d109      	bne.n	8005e46 <xTaskResumeAll+0x2a>
 8005e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	603b      	str	r3, [r7, #0]
 8005e44:	e7fe      	b.n	8005e44 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e46:	f000 fc19 	bl	800667c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e4a:	4b39      	ldr	r3, [pc, #228]	; (8005f30 <xTaskResumeAll+0x114>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	4a37      	ldr	r2, [pc, #220]	; (8005f30 <xTaskResumeAll+0x114>)
 8005e52:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e54:	4b36      	ldr	r3, [pc, #216]	; (8005f30 <xTaskResumeAll+0x114>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d161      	bne.n	8005f20 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e5c:	4b35      	ldr	r3, [pc, #212]	; (8005f34 <xTaskResumeAll+0x118>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d05d      	beq.n	8005f20 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e64:	e02e      	b.n	8005ec4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005e66:	4b34      	ldr	r3, [pc, #208]	; (8005f38 <xTaskResumeAll+0x11c>)
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	3318      	adds	r3, #24
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7ff fde6 	bl	8005a44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7ff fde1 	bl	8005a44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e86:	2201      	movs	r2, #1
 8005e88:	409a      	lsls	r2, r3
 8005e8a:	4b2c      	ldr	r3, [pc, #176]	; (8005f3c <xTaskResumeAll+0x120>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	4a2a      	ldr	r2, [pc, #168]	; (8005f3c <xTaskResumeAll+0x120>)
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e98:	4613      	mov	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4a27      	ldr	r2, [pc, #156]	; (8005f40 <xTaskResumeAll+0x124>)
 8005ea2:	441a      	add	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	3304      	adds	r3, #4
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4610      	mov	r0, r2
 8005eac:	f7ff fd6d 	bl	800598a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb4:	4b23      	ldr	r3, [pc, #140]	; (8005f44 <xTaskResumeAll+0x128>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d302      	bcc.n	8005ec4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005ebe:	4b22      	ldr	r3, [pc, #136]	; (8005f48 <xTaskResumeAll+0x12c>)
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ec4:	4b1c      	ldr	r3, [pc, #112]	; (8005f38 <xTaskResumeAll+0x11c>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1cc      	bne.n	8005e66 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ed2:	f000 fa05 	bl	80062e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005ed6:	4b1d      	ldr	r3, [pc, #116]	; (8005f4c <xTaskResumeAll+0x130>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d010      	beq.n	8005f04 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ee2:	f000 f837 	bl	8005f54 <xTaskIncrementTick>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d002      	beq.n	8005ef2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005eec:	4b16      	ldr	r3, [pc, #88]	; (8005f48 <xTaskResumeAll+0x12c>)
 8005eee:	2201      	movs	r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1f1      	bne.n	8005ee2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005efe:	4b13      	ldr	r3, [pc, #76]	; (8005f4c <xTaskResumeAll+0x130>)
 8005f00:	2200      	movs	r2, #0
 8005f02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f04:	4b10      	ldr	r3, [pc, #64]	; (8005f48 <xTaskResumeAll+0x12c>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d009      	beq.n	8005f20 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f10:	4b0f      	ldr	r3, [pc, #60]	; (8005f50 <xTaskResumeAll+0x134>)
 8005f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f20:	f000 fbda 	bl	80066d8 <vPortExitCritical>

	return xAlreadyYielded;
 8005f24:	68bb      	ldr	r3, [r7, #8]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	200015e4 	.word	0x200015e4
 8005f34:	200015bc 	.word	0x200015bc
 8005f38:	2000157c 	.word	0x2000157c
 8005f3c:	200015c4 	.word	0x200015c4
 8005f40:	200014c0 	.word	0x200014c0
 8005f44:	200014bc 	.word	0x200014bc
 8005f48:	200015d0 	.word	0x200015d0
 8005f4c:	200015cc 	.word	0x200015cc
 8005f50:	e000ed04 	.word	0xe000ed04

08005f54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f5e:	4b50      	ldr	r3, [pc, #320]	; (80060a0 <xTaskIncrementTick+0x14c>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f040 808c 	bne.w	8006080 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f68:	4b4e      	ldr	r3, [pc, #312]	; (80060a4 <xTaskIncrementTick+0x150>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f70:	4a4c      	ldr	r2, [pc, #304]	; (80060a4 <xTaskIncrementTick+0x150>)
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d11f      	bne.n	8005fbc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f7c:	4b4a      	ldr	r3, [pc, #296]	; (80060a8 <xTaskIncrementTick+0x154>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d009      	beq.n	8005f9a <xTaskIncrementTick+0x46>
 8005f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8a:	f383 8811 	msr	BASEPRI, r3
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f3bf 8f4f 	dsb	sy
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	e7fe      	b.n	8005f98 <xTaskIncrementTick+0x44>
 8005f9a:	4b43      	ldr	r3, [pc, #268]	; (80060a8 <xTaskIncrementTick+0x154>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	4b42      	ldr	r3, [pc, #264]	; (80060ac <xTaskIncrementTick+0x158>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a40      	ldr	r2, [pc, #256]	; (80060a8 <xTaskIncrementTick+0x154>)
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	4a40      	ldr	r2, [pc, #256]	; (80060ac <xTaskIncrementTick+0x158>)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6013      	str	r3, [r2, #0]
 8005fae:	4b40      	ldr	r3, [pc, #256]	; (80060b0 <xTaskIncrementTick+0x15c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	4a3e      	ldr	r2, [pc, #248]	; (80060b0 <xTaskIncrementTick+0x15c>)
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	f000 f992 	bl	80062e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005fbc:	4b3d      	ldr	r3, [pc, #244]	; (80060b4 <xTaskIncrementTick+0x160>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d34d      	bcc.n	8006062 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fc6:	4b38      	ldr	r3, [pc, #224]	; (80060a8 <xTaskIncrementTick+0x154>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <xTaskIncrementTick+0x80>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e000      	b.n	8005fd6 <xTaskIncrementTick+0x82>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d004      	beq.n	8005fe4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fda:	4b36      	ldr	r3, [pc, #216]	; (80060b4 <xTaskIncrementTick+0x160>)
 8005fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8005fe0:	601a      	str	r2, [r3, #0]
					break;
 8005fe2:	e03e      	b.n	8006062 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005fe4:	4b30      	ldr	r3, [pc, #192]	; (80060a8 <xTaskIncrementTick+0x154>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d203      	bcs.n	8006004 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ffc:	4a2d      	ldr	r2, [pc, #180]	; (80060b4 <xTaskIncrementTick+0x160>)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6013      	str	r3, [r2, #0]
						break;
 8006002:	e02e      	b.n	8006062 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	3304      	adds	r3, #4
 8006008:	4618      	mov	r0, r3
 800600a:	f7ff fd1b 	bl	8005a44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006012:	2b00      	cmp	r3, #0
 8006014:	d004      	beq.n	8006020 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	3318      	adds	r3, #24
 800601a:	4618      	mov	r0, r3
 800601c:	f7ff fd12 	bl	8005a44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	2201      	movs	r2, #1
 8006026:	409a      	lsls	r2, r3
 8006028:	4b23      	ldr	r3, [pc, #140]	; (80060b8 <xTaskIncrementTick+0x164>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4313      	orrs	r3, r2
 800602e:	4a22      	ldr	r2, [pc, #136]	; (80060b8 <xTaskIncrementTick+0x164>)
 8006030:	6013      	str	r3, [r2, #0]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006036:	4613      	mov	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4a1f      	ldr	r2, [pc, #124]	; (80060bc <xTaskIncrementTick+0x168>)
 8006040:	441a      	add	r2, r3
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	3304      	adds	r3, #4
 8006046:	4619      	mov	r1, r3
 8006048:	4610      	mov	r0, r2
 800604a:	f7ff fc9e 	bl	800598a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006052:	4b1b      	ldr	r3, [pc, #108]	; (80060c0 <xTaskIncrementTick+0x16c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006058:	429a      	cmp	r2, r3
 800605a:	d3b4      	bcc.n	8005fc6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800605c:	2301      	movs	r3, #1
 800605e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006060:	e7b1      	b.n	8005fc6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006062:	4b17      	ldr	r3, [pc, #92]	; (80060c0 <xTaskIncrementTick+0x16c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006068:	4914      	ldr	r1, [pc, #80]	; (80060bc <xTaskIncrementTick+0x168>)
 800606a:	4613      	mov	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	440b      	add	r3, r1
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d907      	bls.n	800608a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800607a:	2301      	movs	r3, #1
 800607c:	617b      	str	r3, [r7, #20]
 800607e:	e004      	b.n	800608a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006080:	4b10      	ldr	r3, [pc, #64]	; (80060c4 <xTaskIncrementTick+0x170>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3301      	adds	r3, #1
 8006086:	4a0f      	ldr	r2, [pc, #60]	; (80060c4 <xTaskIncrementTick+0x170>)
 8006088:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800608a:	4b0f      	ldr	r3, [pc, #60]	; (80060c8 <xTaskIncrementTick+0x174>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006092:	2301      	movs	r3, #1
 8006094:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006096:	697b      	ldr	r3, [r7, #20]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	200015e4 	.word	0x200015e4
 80060a4:	200015c0 	.word	0x200015c0
 80060a8:	20001574 	.word	0x20001574
 80060ac:	20001578 	.word	0x20001578
 80060b0:	200015d4 	.word	0x200015d4
 80060b4:	200015dc 	.word	0x200015dc
 80060b8:	200015c4 	.word	0x200015c4
 80060bc:	200014c0 	.word	0x200014c0
 80060c0:	200014bc 	.word	0x200014bc
 80060c4:	200015cc 	.word	0x200015cc
 80060c8:	200015d0 	.word	0x200015d0

080060cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060d2:	4b32      	ldr	r3, [pc, #200]	; (800619c <vTaskSwitchContext+0xd0>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060da:	4b31      	ldr	r3, [pc, #196]	; (80061a0 <vTaskSwitchContext+0xd4>)
 80060dc:	2201      	movs	r2, #1
 80060de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80060e0:	e057      	b.n	8006192 <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 80060e2:	4b2f      	ldr	r3, [pc, #188]	; (80061a0 <vTaskSwitchContext+0xd4>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80060e8:	f001 fdf2 	bl	8007cd0 <getRunTimeCounterValue>
 80060ec:	4602      	mov	r2, r0
 80060ee:	4b2d      	ldr	r3, [pc, #180]	; (80061a4 <vTaskSwitchContext+0xd8>)
 80060f0:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 80060f2:	4b2c      	ldr	r3, [pc, #176]	; (80061a4 <vTaskSwitchContext+0xd8>)
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	4b2c      	ldr	r3, [pc, #176]	; (80061a8 <vTaskSwitchContext+0xdc>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d909      	bls.n	8006112 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80060fe:	4b2b      	ldr	r3, [pc, #172]	; (80061ac <vTaskSwitchContext+0xe0>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006104:	4a27      	ldr	r2, [pc, #156]	; (80061a4 <vTaskSwitchContext+0xd8>)
 8006106:	6810      	ldr	r0, [r2, #0]
 8006108:	4a27      	ldr	r2, [pc, #156]	; (80061a8 <vTaskSwitchContext+0xdc>)
 800610a:	6812      	ldr	r2, [r2, #0]
 800610c:	1a82      	subs	r2, r0, r2
 800610e:	440a      	add	r2, r1
 8006110:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 8006112:	4b24      	ldr	r3, [pc, #144]	; (80061a4 <vTaskSwitchContext+0xd8>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a24      	ldr	r2, [pc, #144]	; (80061a8 <vTaskSwitchContext+0xdc>)
 8006118:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800611a:	4b25      	ldr	r3, [pc, #148]	; (80061b0 <vTaskSwitchContext+0xe4>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	fab3 f383 	clz	r3, r3
 8006126:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006128:	7afb      	ldrb	r3, [r7, #11]
 800612a:	f1c3 031f 	rsb	r3, r3, #31
 800612e:	617b      	str	r3, [r7, #20]
 8006130:	4920      	ldr	r1, [pc, #128]	; (80061b4 <vTaskSwitchContext+0xe8>)
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	4613      	mov	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	440b      	add	r3, r1
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d109      	bne.n	8006158 <vTaskSwitchContext+0x8c>
	__asm volatile
 8006144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	607b      	str	r3, [r7, #4]
 8006156:	e7fe      	b.n	8006156 <vTaskSwitchContext+0x8a>
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	4613      	mov	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4a14      	ldr	r2, [pc, #80]	; (80061b4 <vTaskSwitchContext+0xe8>)
 8006164:	4413      	add	r3, r2
 8006166:	613b      	str	r3, [r7, #16]
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	605a      	str	r2, [r3, #4]
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	3308      	adds	r3, #8
 800617a:	429a      	cmp	r2, r3
 800617c:	d104      	bne.n	8006188 <vTaskSwitchContext+0xbc>
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	605a      	str	r2, [r3, #4]
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	4a07      	ldr	r2, [pc, #28]	; (80061ac <vTaskSwitchContext+0xe0>)
 8006190:	6013      	str	r3, [r2, #0]
}
 8006192:	bf00      	nop
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	200015e4 	.word	0x200015e4
 80061a0:	200015d0 	.word	0x200015d0
 80061a4:	200015ec 	.word	0x200015ec
 80061a8:	200015e8 	.word	0x200015e8
 80061ac:	200014bc 	.word	0x200014bc
 80061b0:	200015c4 	.word	0x200015c4
 80061b4:	200014c0 	.word	0x200014c0

080061b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80061c0:	f000 f852 	bl	8006268 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80061c4:	4b06      	ldr	r3, [pc, #24]	; (80061e0 <prvIdleTask+0x28>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d9f9      	bls.n	80061c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80061cc:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <prvIdleTask+0x2c>)
 80061ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80061dc:	e7f0      	b.n	80061c0 <prvIdleTask+0x8>
 80061de:	bf00      	nop
 80061e0:	200014c0 	.word	0x200014c0
 80061e4:	e000ed04 	.word	0xe000ed04

080061e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061ee:	2300      	movs	r3, #0
 80061f0:	607b      	str	r3, [r7, #4]
 80061f2:	e00c      	b.n	800620e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	4613      	mov	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4a12      	ldr	r2, [pc, #72]	; (8006248 <prvInitialiseTaskLists+0x60>)
 8006200:	4413      	add	r3, r2
 8006202:	4618      	mov	r0, r3
 8006204:	f7ff fb94 	bl	8005930 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3301      	adds	r3, #1
 800620c:	607b      	str	r3, [r7, #4]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b06      	cmp	r3, #6
 8006212:	d9ef      	bls.n	80061f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006214:	480d      	ldr	r0, [pc, #52]	; (800624c <prvInitialiseTaskLists+0x64>)
 8006216:	f7ff fb8b 	bl	8005930 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800621a:	480d      	ldr	r0, [pc, #52]	; (8006250 <prvInitialiseTaskLists+0x68>)
 800621c:	f7ff fb88 	bl	8005930 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006220:	480c      	ldr	r0, [pc, #48]	; (8006254 <prvInitialiseTaskLists+0x6c>)
 8006222:	f7ff fb85 	bl	8005930 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006226:	480c      	ldr	r0, [pc, #48]	; (8006258 <prvInitialiseTaskLists+0x70>)
 8006228:	f7ff fb82 	bl	8005930 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800622c:	480b      	ldr	r0, [pc, #44]	; (800625c <prvInitialiseTaskLists+0x74>)
 800622e:	f7ff fb7f 	bl	8005930 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006232:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <prvInitialiseTaskLists+0x78>)
 8006234:	4a05      	ldr	r2, [pc, #20]	; (800624c <prvInitialiseTaskLists+0x64>)
 8006236:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006238:	4b0a      	ldr	r3, [pc, #40]	; (8006264 <prvInitialiseTaskLists+0x7c>)
 800623a:	4a05      	ldr	r2, [pc, #20]	; (8006250 <prvInitialiseTaskLists+0x68>)
 800623c:	601a      	str	r2, [r3, #0]
}
 800623e:	bf00      	nop
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	200014c0 	.word	0x200014c0
 800624c:	2000154c 	.word	0x2000154c
 8006250:	20001560 	.word	0x20001560
 8006254:	2000157c 	.word	0x2000157c
 8006258:	20001590 	.word	0x20001590
 800625c:	200015a8 	.word	0x200015a8
 8006260:	20001574 	.word	0x20001574
 8006264:	20001578 	.word	0x20001578

08006268 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800626e:	e019      	b.n	80062a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006270:	f000 fa04 	bl	800667c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006274:	4b0f      	ldr	r3, [pc, #60]	; (80062b4 <prvCheckTasksWaitingTermination+0x4c>)
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	3304      	adds	r3, #4
 8006280:	4618      	mov	r0, r3
 8006282:	f7ff fbdf 	bl	8005a44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006286:	4b0c      	ldr	r3, [pc, #48]	; (80062b8 <prvCheckTasksWaitingTermination+0x50>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3b01      	subs	r3, #1
 800628c:	4a0a      	ldr	r2, [pc, #40]	; (80062b8 <prvCheckTasksWaitingTermination+0x50>)
 800628e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006290:	4b0a      	ldr	r3, [pc, #40]	; (80062bc <prvCheckTasksWaitingTermination+0x54>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3b01      	subs	r3, #1
 8006296:	4a09      	ldr	r2, [pc, #36]	; (80062bc <prvCheckTasksWaitingTermination+0x54>)
 8006298:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800629a:	f000 fa1d 	bl	80066d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f80e 	bl	80062c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062a4:	4b05      	ldr	r3, [pc, #20]	; (80062bc <prvCheckTasksWaitingTermination+0x54>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1e1      	bne.n	8006270 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80062ac:	bf00      	nop
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	20001590 	.word	0x20001590
 80062b8:	200015bc 	.word	0x200015bc
 80062bc:	200015a4 	.word	0x200015a4

080062c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 fb73 	bl	80069b8 <vPortFree>
			vPortFree( pxTCB );
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fb70 	bl	80069b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80062d8:	bf00      	nop
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062e6:	4b0f      	ldr	r3, [pc, #60]	; (8006324 <prvResetNextTaskUnblockTime+0x44>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <prvResetNextTaskUnblockTime+0x14>
 80062f0:	2301      	movs	r3, #1
 80062f2:	e000      	b.n	80062f6 <prvResetNextTaskUnblockTime+0x16>
 80062f4:	2300      	movs	r3, #0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d004      	beq.n	8006304 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80062fa:	4b0b      	ldr	r3, [pc, #44]	; (8006328 <prvResetNextTaskUnblockTime+0x48>)
 80062fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006300:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006302:	e008      	b.n	8006316 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006304:	4b07      	ldr	r3, [pc, #28]	; (8006324 <prvResetNextTaskUnblockTime+0x44>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	4a05      	ldr	r2, [pc, #20]	; (8006328 <prvResetNextTaskUnblockTime+0x48>)
 8006314:	6013      	str	r3, [r2, #0]
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	20001574 	.word	0x20001574
 8006328:	200015dc 	.word	0x200015dc

0800632c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006332:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <xTaskGetSchedulerState+0x34>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d102      	bne.n	8006340 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800633a:	2301      	movs	r3, #1
 800633c:	607b      	str	r3, [r7, #4]
 800633e:	e008      	b.n	8006352 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006340:	4b08      	ldr	r3, [pc, #32]	; (8006364 <xTaskGetSchedulerState+0x38>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d102      	bne.n	800634e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006348:	2302      	movs	r3, #2
 800634a:	607b      	str	r3, [r7, #4]
 800634c:	e001      	b.n	8006352 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800634e:	2300      	movs	r3, #0
 8006350:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006352:	687b      	ldr	r3, [r7, #4]
	}
 8006354:	4618      	mov	r0, r3
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	200015c8 	.word	0x200015c8
 8006364:	200015e4 	.word	0x200015e4

08006368 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006372:	4b29      	ldr	r3, [pc, #164]	; (8006418 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006378:	4b28      	ldr	r3, [pc, #160]	; (800641c <prvAddCurrentTaskToDelayedList+0xb4>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3304      	adds	r3, #4
 800637e:	4618      	mov	r0, r3
 8006380:	f7ff fb60 	bl	8005a44 <uxListRemove>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10b      	bne.n	80063a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800638a:	4b24      	ldr	r3, [pc, #144]	; (800641c <prvAddCurrentTaskToDelayedList+0xb4>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006390:	2201      	movs	r2, #1
 8006392:	fa02 f303 	lsl.w	r3, r2, r3
 8006396:	43da      	mvns	r2, r3
 8006398:	4b21      	ldr	r3, [pc, #132]	; (8006420 <prvAddCurrentTaskToDelayedList+0xb8>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4013      	ands	r3, r2
 800639e:	4a20      	ldr	r2, [pc, #128]	; (8006420 <prvAddCurrentTaskToDelayedList+0xb8>)
 80063a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a8:	d10a      	bne.n	80063c0 <prvAddCurrentTaskToDelayedList+0x58>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d007      	beq.n	80063c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063b0:	4b1a      	ldr	r3, [pc, #104]	; (800641c <prvAddCurrentTaskToDelayedList+0xb4>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3304      	adds	r3, #4
 80063b6:	4619      	mov	r1, r3
 80063b8:	481a      	ldr	r0, [pc, #104]	; (8006424 <prvAddCurrentTaskToDelayedList+0xbc>)
 80063ba:	f7ff fae6 	bl	800598a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063be:	e026      	b.n	800640e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4413      	add	r3, r2
 80063c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063c8:	4b14      	ldr	r3, [pc, #80]	; (800641c <prvAddCurrentTaskToDelayedList+0xb4>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d209      	bcs.n	80063ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063d8:	4b13      	ldr	r3, [pc, #76]	; (8006428 <prvAddCurrentTaskToDelayedList+0xc0>)
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	4b0f      	ldr	r3, [pc, #60]	; (800641c <prvAddCurrentTaskToDelayedList+0xb4>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3304      	adds	r3, #4
 80063e2:	4619      	mov	r1, r3
 80063e4:	4610      	mov	r0, r2
 80063e6:	f7ff faf4 	bl	80059d2 <vListInsert>
}
 80063ea:	e010      	b.n	800640e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063ec:	4b0f      	ldr	r3, [pc, #60]	; (800642c <prvAddCurrentTaskToDelayedList+0xc4>)
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	4b0a      	ldr	r3, [pc, #40]	; (800641c <prvAddCurrentTaskToDelayedList+0xb4>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3304      	adds	r3, #4
 80063f6:	4619      	mov	r1, r3
 80063f8:	4610      	mov	r0, r2
 80063fa:	f7ff faea 	bl	80059d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80063fe:	4b0c      	ldr	r3, [pc, #48]	; (8006430 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	429a      	cmp	r2, r3
 8006406:	d202      	bcs.n	800640e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006408:	4a09      	ldr	r2, [pc, #36]	; (8006430 <prvAddCurrentTaskToDelayedList+0xc8>)
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	6013      	str	r3, [r2, #0]
}
 800640e:	bf00      	nop
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	200015c0 	.word	0x200015c0
 800641c:	200014bc 	.word	0x200014bc
 8006420:	200015c4 	.word	0x200015c4
 8006424:	200015a8 	.word	0x200015a8
 8006428:	20001578 	.word	0x20001578
 800642c:	20001574 	.word	0x20001574
 8006430:	200015dc 	.word	0x200015dc

08006434 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	3b04      	subs	r3, #4
 8006444:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800644c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3b04      	subs	r3, #4
 8006452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f023 0201 	bic.w	r2, r3, #1
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	3b04      	subs	r3, #4
 8006462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006464:	4a0c      	ldr	r2, [pc, #48]	; (8006498 <pxPortInitialiseStack+0x64>)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3b14      	subs	r3, #20
 800646e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	3b04      	subs	r3, #4
 800647a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f06f 0202 	mvn.w	r2, #2
 8006482:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	3b20      	subs	r3, #32
 8006488:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800648a:	68fb      	ldr	r3, [r7, #12]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	0800649d 	.word	0x0800649d

0800649c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80064a2:	2300      	movs	r3, #0
 80064a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064a6:	4b11      	ldr	r3, [pc, #68]	; (80064ec <prvTaskExitError+0x50>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ae:	d009      	beq.n	80064c4 <prvTaskExitError+0x28>
 80064b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	60fb      	str	r3, [r7, #12]
 80064c2:	e7fe      	b.n	80064c2 <prvTaskExitError+0x26>
 80064c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80064d6:	bf00      	nop
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d0fc      	beq.n	80064d8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80064de:	bf00      	nop
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	20000008 	.word	0x20000008

080064f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80064f0:	4b07      	ldr	r3, [pc, #28]	; (8006510 <pxCurrentTCBConst2>)
 80064f2:	6819      	ldr	r1, [r3, #0]
 80064f4:	6808      	ldr	r0, [r1, #0]
 80064f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064fa:	f380 8809 	msr	PSP, r0
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f04f 0000 	mov.w	r0, #0
 8006506:	f380 8811 	msr	BASEPRI, r0
 800650a:	4770      	bx	lr
 800650c:	f3af 8000 	nop.w

08006510 <pxCurrentTCBConst2>:
 8006510:	200014bc 	.word	0x200014bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006514:	bf00      	nop
 8006516:	bf00      	nop

08006518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006518:	4808      	ldr	r0, [pc, #32]	; (800653c <prvPortStartFirstTask+0x24>)
 800651a:	6800      	ldr	r0, [r0, #0]
 800651c:	6800      	ldr	r0, [r0, #0]
 800651e:	f380 8808 	msr	MSP, r0
 8006522:	f04f 0000 	mov.w	r0, #0
 8006526:	f380 8814 	msr	CONTROL, r0
 800652a:	b662      	cpsie	i
 800652c:	b661      	cpsie	f
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	df00      	svc	0
 8006538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800653a:	bf00      	nop
 800653c:	e000ed08 	.word	0xe000ed08

08006540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006546:	4b44      	ldr	r3, [pc, #272]	; (8006658 <xPortStartScheduler+0x118>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a44      	ldr	r2, [pc, #272]	; (800665c <xPortStartScheduler+0x11c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d109      	bne.n	8006564 <xPortStartScheduler+0x24>
 8006550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	613b      	str	r3, [r7, #16]
 8006562:	e7fe      	b.n	8006562 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006564:	4b3c      	ldr	r3, [pc, #240]	; (8006658 <xPortStartScheduler+0x118>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a3d      	ldr	r2, [pc, #244]	; (8006660 <xPortStartScheduler+0x120>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d109      	bne.n	8006582 <xPortStartScheduler+0x42>
 800656e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	e7fe      	b.n	8006580 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006582:	4b38      	ldr	r3, [pc, #224]	; (8006664 <xPortStartScheduler+0x124>)
 8006584:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	b2db      	uxtb	r3, r3
 800658c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	22ff      	movs	r2, #255	; 0xff
 8006592:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	b2db      	uxtb	r3, r3
 800659a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800659c:	78fb      	ldrb	r3, [r7, #3]
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	4b30      	ldr	r3, [pc, #192]	; (8006668 <xPortStartScheduler+0x128>)
 80065a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065aa:	4b30      	ldr	r3, [pc, #192]	; (800666c <xPortStartScheduler+0x12c>)
 80065ac:	2207      	movs	r2, #7
 80065ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065b0:	e009      	b.n	80065c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80065b2:	4b2e      	ldr	r3, [pc, #184]	; (800666c <xPortStartScheduler+0x12c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	4a2c      	ldr	r2, [pc, #176]	; (800666c <xPortStartScheduler+0x12c>)
 80065ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80065bc:	78fb      	ldrb	r3, [r7, #3]
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	005b      	lsls	r3, r3, #1
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065c6:	78fb      	ldrb	r3, [r7, #3]
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ce:	2b80      	cmp	r3, #128	; 0x80
 80065d0:	d0ef      	beq.n	80065b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80065d2:	4b26      	ldr	r3, [pc, #152]	; (800666c <xPortStartScheduler+0x12c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f1c3 0307 	rsb	r3, r3, #7
 80065da:	2b04      	cmp	r3, #4
 80065dc:	d009      	beq.n	80065f2 <xPortStartScheduler+0xb2>
 80065de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	60bb      	str	r3, [r7, #8]
 80065f0:	e7fe      	b.n	80065f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80065f2:	4b1e      	ldr	r3, [pc, #120]	; (800666c <xPortStartScheduler+0x12c>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	021b      	lsls	r3, r3, #8
 80065f8:	4a1c      	ldr	r2, [pc, #112]	; (800666c <xPortStartScheduler+0x12c>)
 80065fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80065fc:	4b1b      	ldr	r3, [pc, #108]	; (800666c <xPortStartScheduler+0x12c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006604:	4a19      	ldr	r2, [pc, #100]	; (800666c <xPortStartScheduler+0x12c>)
 8006606:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	b2da      	uxtb	r2, r3
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006610:	4b17      	ldr	r3, [pc, #92]	; (8006670 <xPortStartScheduler+0x130>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a16      	ldr	r2, [pc, #88]	; (8006670 <xPortStartScheduler+0x130>)
 8006616:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800661a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800661c:	4b14      	ldr	r3, [pc, #80]	; (8006670 <xPortStartScheduler+0x130>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a13      	ldr	r2, [pc, #76]	; (8006670 <xPortStartScheduler+0x130>)
 8006622:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006626:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006628:	f000 f8d6 	bl	80067d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800662c:	4b11      	ldr	r3, [pc, #68]	; (8006674 <xPortStartScheduler+0x134>)
 800662e:	2200      	movs	r2, #0
 8006630:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006632:	f000 f8f5 	bl	8006820 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006636:	4b10      	ldr	r3, [pc, #64]	; (8006678 <xPortStartScheduler+0x138>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a0f      	ldr	r2, [pc, #60]	; (8006678 <xPortStartScheduler+0x138>)
 800663c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006640:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006642:	f7ff ff69 	bl	8006518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006646:	f7ff fd41 	bl	80060cc <vTaskSwitchContext>
	prvTaskExitError();
 800664a:	f7ff ff27 	bl	800649c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3718      	adds	r7, #24
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	e000ed00 	.word	0xe000ed00
 800665c:	410fc271 	.word	0x410fc271
 8006660:	410fc270 	.word	0x410fc270
 8006664:	e000e400 	.word	0xe000e400
 8006668:	200015f0 	.word	0x200015f0
 800666c:	200015f4 	.word	0x200015f4
 8006670:	e000ed20 	.word	0xe000ed20
 8006674:	20000008 	.word	0x20000008
 8006678:	e000ef34 	.word	0xe000ef34

0800667c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006694:	4b0e      	ldr	r3, [pc, #56]	; (80066d0 <vPortEnterCritical+0x54>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3301      	adds	r3, #1
 800669a:	4a0d      	ldr	r2, [pc, #52]	; (80066d0 <vPortEnterCritical+0x54>)
 800669c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800669e:	4b0c      	ldr	r3, [pc, #48]	; (80066d0 <vPortEnterCritical+0x54>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d10e      	bne.n	80066c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066a6:	4b0b      	ldr	r3, [pc, #44]	; (80066d4 <vPortEnterCritical+0x58>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d009      	beq.n	80066c4 <vPortEnterCritical+0x48>
 80066b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	603b      	str	r3, [r7, #0]
 80066c2:	e7fe      	b.n	80066c2 <vPortEnterCritical+0x46>
	}
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	20000008 	.word	0x20000008
 80066d4:	e000ed04 	.word	0xe000ed04

080066d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80066de:	4b11      	ldr	r3, [pc, #68]	; (8006724 <vPortExitCritical+0x4c>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d109      	bne.n	80066fa <vPortExitCritical+0x22>
 80066e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	607b      	str	r3, [r7, #4]
 80066f8:	e7fe      	b.n	80066f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80066fa:	4b0a      	ldr	r3, [pc, #40]	; (8006724 <vPortExitCritical+0x4c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3b01      	subs	r3, #1
 8006700:	4a08      	ldr	r2, [pc, #32]	; (8006724 <vPortExitCritical+0x4c>)
 8006702:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006704:	4b07      	ldr	r3, [pc, #28]	; (8006724 <vPortExitCritical+0x4c>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d104      	bne.n	8006716 <vPortExitCritical+0x3e>
 800670c:	2300      	movs	r3, #0
 800670e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006716:	bf00      	nop
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	20000008 	.word	0x20000008
	...

08006730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006730:	f3ef 8009 	mrs	r0, PSP
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	4b15      	ldr	r3, [pc, #84]	; (8006790 <pxCurrentTCBConst>)
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	f01e 0f10 	tst.w	lr, #16
 8006740:	bf08      	it	eq
 8006742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674a:	6010      	str	r0, [r2, #0]
 800674c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006750:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006754:	f380 8811 	msr	BASEPRI, r0
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f7ff fcb4 	bl	80060cc <vTaskSwitchContext>
 8006764:	f04f 0000 	mov.w	r0, #0
 8006768:	f380 8811 	msr	BASEPRI, r0
 800676c:	bc09      	pop	{r0, r3}
 800676e:	6819      	ldr	r1, [r3, #0]
 8006770:	6808      	ldr	r0, [r1, #0]
 8006772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006776:	f01e 0f10 	tst.w	lr, #16
 800677a:	bf08      	it	eq
 800677c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006780:	f380 8809 	msr	PSP, r0
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	f3af 8000 	nop.w

08006790 <pxCurrentTCBConst>:
 8006790:	200014bc 	.word	0x200014bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006794:	bf00      	nop
 8006796:	bf00      	nop

08006798 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067b0:	f7ff fbd0 	bl	8005f54 <xTaskIncrementTick>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067ba:	4b06      	ldr	r3, [pc, #24]	; (80067d4 <xPortSysTickHandler+0x3c>)
 80067bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067c0:	601a      	str	r2, [r3, #0]
 80067c2:	2300      	movs	r3, #0
 80067c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80067cc:	bf00      	nop
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	e000ed04 	.word	0xe000ed04

080067d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80067d8:	b480      	push	{r7}
 80067da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80067dc:	4b0b      	ldr	r3, [pc, #44]	; (800680c <vPortSetupTimerInterrupt+0x34>)
 80067de:	2200      	movs	r2, #0
 80067e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80067e2:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <vPortSetupTimerInterrupt+0x38>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80067e8:	4b0a      	ldr	r3, [pc, #40]	; (8006814 <vPortSetupTimerInterrupt+0x3c>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a0a      	ldr	r2, [pc, #40]	; (8006818 <vPortSetupTimerInterrupt+0x40>)
 80067ee:	fba2 2303 	umull	r2, r3, r2, r3
 80067f2:	099b      	lsrs	r3, r3, #6
 80067f4:	4a09      	ldr	r2, [pc, #36]	; (800681c <vPortSetupTimerInterrupt+0x44>)
 80067f6:	3b01      	subs	r3, #1
 80067f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80067fa:	4b04      	ldr	r3, [pc, #16]	; (800680c <vPortSetupTimerInterrupt+0x34>)
 80067fc:	2207      	movs	r2, #7
 80067fe:	601a      	str	r2, [r3, #0]
}
 8006800:	bf00      	nop
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	e000e010 	.word	0xe000e010
 8006810:	e000e018 	.word	0xe000e018
 8006814:	200012c8 	.word	0x200012c8
 8006818:	10624dd3 	.word	0x10624dd3
 800681c:	e000e014 	.word	0xe000e014

08006820 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006820:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006830 <vPortEnableVFP+0x10>
 8006824:	6801      	ldr	r1, [r0, #0]
 8006826:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800682a:	6001      	str	r1, [r0, #0]
 800682c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800682e:	bf00      	nop
 8006830:	e000ed88 	.word	0xe000ed88

08006834 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b08a      	sub	sp, #40	; 0x28
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800683c:	2300      	movs	r3, #0
 800683e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006840:	f7ff fade 	bl	8005e00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006844:	4b57      	ldr	r3, [pc, #348]	; (80069a4 <pvPortMalloc+0x170>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800684c:	f000 f90c 	bl	8006a68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006850:	4b55      	ldr	r3, [pc, #340]	; (80069a8 <pvPortMalloc+0x174>)
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4013      	ands	r3, r2
 8006858:	2b00      	cmp	r3, #0
 800685a:	f040 808c 	bne.w	8006976 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d01c      	beq.n	800689e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006864:	2208      	movs	r2, #8
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4413      	add	r3, r2
 800686a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f003 0307 	and.w	r3, r3, #7
 8006872:	2b00      	cmp	r3, #0
 8006874:	d013      	beq.n	800689e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f023 0307 	bic.w	r3, r3, #7
 800687c:	3308      	adds	r3, #8
 800687e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f003 0307 	and.w	r3, r3, #7
 8006886:	2b00      	cmp	r3, #0
 8006888:	d009      	beq.n	800689e <pvPortMalloc+0x6a>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	617b      	str	r3, [r7, #20]
 800689c:	e7fe      	b.n	800689c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d068      	beq.n	8006976 <pvPortMalloc+0x142>
 80068a4:	4b41      	ldr	r3, [pc, #260]	; (80069ac <pvPortMalloc+0x178>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d863      	bhi.n	8006976 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068ae:	4b40      	ldr	r3, [pc, #256]	; (80069b0 <pvPortMalloc+0x17c>)
 80068b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068b2:	4b3f      	ldr	r3, [pc, #252]	; (80069b0 <pvPortMalloc+0x17c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068b8:	e004      	b.n	80068c4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d903      	bls.n	80068d6 <pvPortMalloc+0xa2>
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1f1      	bne.n	80068ba <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068d6:	4b33      	ldr	r3, [pc, #204]	; (80069a4 <pvPortMalloc+0x170>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068dc:	429a      	cmp	r2, r3
 80068de:	d04a      	beq.n	8006976 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2208      	movs	r2, #8
 80068e6:	4413      	add	r3, r2
 80068e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	1ad2      	subs	r2, r2, r3
 80068fa:	2308      	movs	r3, #8
 80068fc:	005b      	lsls	r3, r3, #1
 80068fe:	429a      	cmp	r2, r3
 8006900:	d91e      	bls.n	8006940 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4413      	add	r3, r2
 8006908:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	f003 0307 	and.w	r3, r3, #7
 8006910:	2b00      	cmp	r3, #0
 8006912:	d009      	beq.n	8006928 <pvPortMalloc+0xf4>
 8006914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	613b      	str	r3, [r7, #16]
 8006926:	e7fe      	b.n	8006926 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	1ad2      	subs	r2, r2, r3
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800693a:	69b8      	ldr	r0, [r7, #24]
 800693c:	f000 f8f6 	bl	8006b2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006940:	4b1a      	ldr	r3, [pc, #104]	; (80069ac <pvPortMalloc+0x178>)
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	4a18      	ldr	r2, [pc, #96]	; (80069ac <pvPortMalloc+0x178>)
 800694c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800694e:	4b17      	ldr	r3, [pc, #92]	; (80069ac <pvPortMalloc+0x178>)
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	4b18      	ldr	r3, [pc, #96]	; (80069b4 <pvPortMalloc+0x180>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	429a      	cmp	r2, r3
 8006958:	d203      	bcs.n	8006962 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800695a:	4b14      	ldr	r3, [pc, #80]	; (80069ac <pvPortMalloc+0x178>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a15      	ldr	r2, [pc, #84]	; (80069b4 <pvPortMalloc+0x180>)
 8006960:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	4b10      	ldr	r3, [pc, #64]	; (80069a8 <pvPortMalloc+0x174>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	431a      	orrs	r2, r3
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006976:	f7ff fa51 	bl	8005e1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	f003 0307 	and.w	r3, r3, #7
 8006980:	2b00      	cmp	r3, #0
 8006982:	d009      	beq.n	8006998 <pvPortMalloc+0x164>
 8006984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	60fb      	str	r3, [r7, #12]
 8006996:	e7fe      	b.n	8006996 <pvPortMalloc+0x162>
	return pvReturn;
 8006998:	69fb      	ldr	r3, [r7, #28]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3728      	adds	r7, #40	; 0x28
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	200025a0 	.word	0x200025a0
 80069a8:	200025ac 	.word	0x200025ac
 80069ac:	200025a4 	.word	0x200025a4
 80069b0:	20002598 	.word	0x20002598
 80069b4:	200025a8 	.word	0x200025a8

080069b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d046      	beq.n	8006a58 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069ca:	2308      	movs	r3, #8
 80069cc:	425b      	negs	r3, r3
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	4413      	add	r3, r2
 80069d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	4b20      	ldr	r3, [pc, #128]	; (8006a60 <vPortFree+0xa8>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4013      	ands	r3, r2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d109      	bne.n	80069fa <vPortFree+0x42>
 80069e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ea:	f383 8811 	msr	BASEPRI, r3
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	e7fe      	b.n	80069f8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d009      	beq.n	8006a16 <vPortFree+0x5e>
 8006a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	60bb      	str	r3, [r7, #8]
 8006a14:	e7fe      	b.n	8006a14 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	4b11      	ldr	r3, [pc, #68]	; (8006a60 <vPortFree+0xa8>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4013      	ands	r3, r2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d019      	beq.n	8006a58 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d115      	bne.n	8006a58 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	4b0b      	ldr	r3, [pc, #44]	; (8006a60 <vPortFree+0xa8>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	43db      	mvns	r3, r3
 8006a36:	401a      	ands	r2, r3
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a3c:	f7ff f9e0 	bl	8005e00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	4b07      	ldr	r3, [pc, #28]	; (8006a64 <vPortFree+0xac>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4413      	add	r3, r2
 8006a4a:	4a06      	ldr	r2, [pc, #24]	; (8006a64 <vPortFree+0xac>)
 8006a4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a4e:	6938      	ldr	r0, [r7, #16]
 8006a50:	f000 f86c 	bl	8006b2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006a54:	f7ff f9e2 	bl	8005e1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a58:	bf00      	nop
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	200025ac 	.word	0x200025ac
 8006a64:	200025a4 	.word	0x200025a4

08006a68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a6e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8006a72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a74:	4b27      	ldr	r3, [pc, #156]	; (8006b14 <prvHeapInit+0xac>)
 8006a76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f003 0307 	and.w	r3, r3, #7
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00c      	beq.n	8006a9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	3307      	adds	r3, #7
 8006a86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f023 0307 	bic.w	r3, r3, #7
 8006a8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	4a1f      	ldr	r2, [pc, #124]	; (8006b14 <prvHeapInit+0xac>)
 8006a98:	4413      	add	r3, r2
 8006a9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006aa0:	4a1d      	ldr	r2, [pc, #116]	; (8006b18 <prvHeapInit+0xb0>)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006aa6:	4b1c      	ldr	r3, [pc, #112]	; (8006b18 <prvHeapInit+0xb0>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ab4:	2208      	movs	r2, #8
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	1a9b      	subs	r3, r3, r2
 8006aba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 0307 	bic.w	r3, r3, #7
 8006ac2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4a15      	ldr	r2, [pc, #84]	; (8006b1c <prvHeapInit+0xb4>)
 8006ac8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006aca:	4b14      	ldr	r3, [pc, #80]	; (8006b1c <prvHeapInit+0xb4>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ad2:	4b12      	ldr	r3, [pc, #72]	; (8006b1c <prvHeapInit+0xb4>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	1ad2      	subs	r2, r2, r3
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ae8:	4b0c      	ldr	r3, [pc, #48]	; (8006b1c <prvHeapInit+0xb4>)
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	4a0a      	ldr	r2, [pc, #40]	; (8006b20 <prvHeapInit+0xb8>)
 8006af6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	4a09      	ldr	r2, [pc, #36]	; (8006b24 <prvHeapInit+0xbc>)
 8006afe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b00:	4b09      	ldr	r3, [pc, #36]	; (8006b28 <prvHeapInit+0xc0>)
 8006b02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b06:	601a      	str	r2, [r3, #0]
}
 8006b08:	bf00      	nop
 8006b0a:	3714      	adds	r7, #20
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	200015f8 	.word	0x200015f8
 8006b18:	20002598 	.word	0x20002598
 8006b1c:	200025a0 	.word	0x200025a0
 8006b20:	200025a8 	.word	0x200025a8
 8006b24:	200025a4 	.word	0x200025a4
 8006b28:	200025ac 	.word	0x200025ac

08006b2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b34:	4b28      	ldr	r3, [pc, #160]	; (8006bd8 <prvInsertBlockIntoFreeList+0xac>)
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	e002      	b.n	8006b40 <prvInsertBlockIntoFreeList+0x14>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d8f7      	bhi.n	8006b3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	4413      	add	r3, r2
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d108      	bne.n	8006b6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	441a      	add	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	441a      	add	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d118      	bne.n	8006bb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	4b15      	ldr	r3, [pc, #84]	; (8006bdc <prvInsertBlockIntoFreeList+0xb0>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d00d      	beq.n	8006baa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685a      	ldr	r2, [r3, #4]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	441a      	add	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	601a      	str	r2, [r3, #0]
 8006ba8:	e008      	b.n	8006bbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006baa:	4b0c      	ldr	r3, [pc, #48]	; (8006bdc <prvInsertBlockIntoFreeList+0xb0>)
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	e003      	b.n	8006bbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d002      	beq.n	8006bca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bca:	bf00      	nop
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	20002598 	.word	0x20002598
 8006bdc:	200025a0 	.word	0x200025a0

08006be0 <Source_Command>:
 */

#include <Commands_Fun.h>

uint16_t Source_Command(const char tableWithMessagePieces[MAX_NUMBER_OF_PIECES][MAX_LENGTH_OF_A_PIECE], const uint8_t *numberOfPieces, const uint16_t *CommandNumbers, char *SCPI_buffer)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	603b      	str	r3, [r7, #0]
	ERROR_CODE errorCode = 0x00;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	75fb      	strb	r3, [r7, #23]

	switch (CommandNumbers[1])
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	3302      	adds	r3, #2
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	2b7d      	cmp	r3, #125	; 0x7d
 8006bfa:	d108      	bne.n	8006c0e <Source_Command+0x2e>
	{
		case 0x7D:		//INT, INTernal
		{
			errorCode = Source_INT_Command(tableWithMessagePieces, numberOfPieces, CommandNumbers, SCPI_buffer);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	68b9      	ldr	r1, [r7, #8]
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 f80c 	bl	8006c20 <Source_INT_Command>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	75fb      	strb	r3, [r7, #23]
			break;
 8006c0c:	e002      	b.n	8006c14 <Source_Command+0x34>
		}
		default:
		{
			errorCode = COMMAND_NOT_RECOGNIZED;
 8006c0e:	2325      	movs	r3, #37	; 0x25
 8006c10:	75fb      	strb	r3, [r7, #23]
			break;
 8006c12:	bf00      	nop
		}
	}

	return errorCode;
 8006c14:	7dfb      	ldrb	r3, [r7, #23]
 8006c16:	b29b      	uxth	r3, r3
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3718      	adds	r7, #24
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <Source_INT_Command>:

uint16_t Source_INT_Command(const char tableWithMessagePieces[MAX_NUMBER_OF_PIECES][MAX_LENGTH_OF_A_PIECE], const uint8_t *numberOfPieces, const uint16_t *CommandNumbers, char *SCPI_buffer)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
 8006c2c:	603b      	str	r3, [r7, #0]
	ERROR_CODE errorCode = 0x00;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	75fb      	strb	r3, [r7, #23]

	switch (CommandNumbers[2])
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	3304      	adds	r3, #4
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	3b7e      	subs	r3, #126	; 0x7e
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d82e      	bhi.n	8006c9c <Source_INT_Command+0x7c>
 8006c3e:	a201      	add	r2, pc, #4	; (adr r2, 8006c44 <Source_INT_Command+0x24>)
 8006c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c44:	08006c55 	.word	0x08006c55
 8006c48:	08006c67 	.word	0x08006c67
 8006c4c:	08006c79 	.word	0x08006c79
 8006c50:	08006c8b 	.word	0x08006c8b
	{
		case 0x7E:		//WAVE
		{
			errorCode = Source_INT_WAVE_Command(tableWithMessagePieces, numberOfPieces, CommandNumbers, SCPI_buffer);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	68b9      	ldr	r1, [r7, #8]
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f000 f828 	bl	8006cb0 <Source_INT_WAVE_Command>
 8006c60:	4603      	mov	r3, r0
 8006c62:	75fb      	strb	r3, [r7, #23]
			break;
 8006c64:	e01d      	b.n	8006ca2 <Source_INT_Command+0x82>
		}
		case 0x7F:		//FREQ, FREQuency
		{
			errorCode = Source_INT_FREQ_Command(tableWithMessagePieces, numberOfPieces, CommandNumbers, SCPI_buffer);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	68b9      	ldr	r1, [r7, #8]
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 f889 	bl	8006d84 <Source_INT_FREQ_Command>
 8006c72:	4603      	mov	r3, r0
 8006c74:	75fb      	strb	r3, [r7, #23]
			break;
 8006c76:	e014      	b.n	8006ca2 <Source_INT_Command+0x82>
		}
		case 0x80:		//PWMDUTY
		{
			errorCode = Source_INT_PWMDUTY_Command(tableWithMessagePieces, numberOfPieces, CommandNumbers, SCPI_buffer);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	68b9      	ldr	r1, [r7, #8]
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f000 f8e0 	bl	8006e44 <Source_INT_PWMDUTY_Command>
 8006c84:	4603      	mov	r3, r0
 8006c86:	75fb      	strb	r3, [r7, #23]
			break;
 8006c88:	e00b      	b.n	8006ca2 <Source_INT_Command+0x82>
		}
		case 0x81:		//GAUSS
		{
			errorCode = Source_INT_GAUSS_Command(tableWithMessagePieces, numberOfPieces, CommandNumbers, SCPI_buffer);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	68b9      	ldr	r1, [r7, #8]
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 f8ff 	bl	8006e94 <Source_INT_GAUSS_Command>
 8006c96:	4603      	mov	r3, r0
 8006c98:	75fb      	strb	r3, [r7, #23]
			break;
 8006c9a:	e002      	b.n	8006ca2 <Source_INT_Command+0x82>
		}
		default:
		{
			errorCode = COMMAND_NOT_RECOGNIZED;
 8006c9c:	2325      	movs	r3, #37	; 0x25
 8006c9e:	75fb      	strb	r3, [r7, #23]
			break;
 8006ca0:	bf00      	nop
		}
	}

	return errorCode;
 8006ca2:	7dfb      	ldrb	r3, [r7, #23]
 8006ca4:	b29b      	uxth	r3, r3
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3718      	adds	r7, #24
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop

08006cb0 <Source_INT_WAVE_Command>:


uint16_t Source_INT_WAVE_Command(const char tableWithMessagePieces[MAX_NUMBER_OF_PIECES][MAX_LENGTH_OF_A_PIECE], const uint8_t *numberOfPieces, const uint16_t *CommandNumbers, char *SCPI_buffer)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
 8006cbc:	603b      	str	r3, [r7, #0]
	ERROR_CODE errorCode = 0x00;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	75fb      	strb	r3, [r7, #23]

	switch (CommandNumbers[3])
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	3306      	adds	r3, #6
 8006cc6:	881b      	ldrh	r3, [r3, #0]
 8006cc8:	3ba8      	subs	r3, #168	; 0xa8
 8006cca:	2b05      	cmp	r3, #5
 8006ccc:	d847      	bhi.n	8006d5e <Source_INT_WAVE_Command+0xae>
 8006cce:	a201      	add	r2, pc, #4	; (adr r2, 8006cd4 <Source_INT_WAVE_Command+0x24>)
 8006cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd4:	08006ced 	.word	0x08006ced
 8006cd8:	08006d01 	.word	0x08006d01
 8006cdc:	08006d15 	.word	0x08006d15
 8006ce0:	08006d29 	.word	0x08006d29
 8006ce4:	08006d3d 	.word	0x08006d3d
 8006ce8:	08006d51 	.word	0x08006d51
	{
		case 0xA8:		//SINE
		{
			setSignalType = SIN;
 8006cec:	4b21      	ldr	r3, [pc, #132]	; (8006d74 <Source_INT_WAVE_Command+0xc4>)
 8006cee:	2200      	movs	r2, #0
 8006cf0:	701a      	strb	r2, [r3, #0]
			setSignalFlag = 1;
 8006cf2:	4b21      	ldr	r3, [pc, #132]	; (8006d78 <Source_INT_WAVE_Command+0xc8>)
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	701a      	strb	r2, [r3, #0]
			multiplexerChannelSelect = AD9833;
 8006cf8:	4b20      	ldr	r3, [pc, #128]	; (8006d7c <Source_INT_WAVE_Command+0xcc>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	701a      	strb	r2, [r3, #0]
			break;
 8006cfe:	e031      	b.n	8006d64 <Source_INT_WAVE_Command+0xb4>
		}
		case 0xA9:		//TRIANGLE
		{
			setSignalType = TRIANGLE;
 8006d00:	4b1c      	ldr	r3, [pc, #112]	; (8006d74 <Source_INT_WAVE_Command+0xc4>)
 8006d02:	2201      	movs	r2, #1
 8006d04:	701a      	strb	r2, [r3, #0]
			setSignalFlag = 1;
 8006d06:	4b1c      	ldr	r3, [pc, #112]	; (8006d78 <Source_INT_WAVE_Command+0xc8>)
 8006d08:	2201      	movs	r2, #1
 8006d0a:	701a      	strb	r2, [r3, #0]
			multiplexerChannelSelect = AD9833;
 8006d0c:	4b1b      	ldr	r3, [pc, #108]	; (8006d7c <Source_INT_WAVE_Command+0xcc>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	701a      	strb	r2, [r3, #0]
			break;
 8006d12:	e027      	b.n	8006d64 <Source_INT_WAVE_Command+0xb4>
		}
		case 0xAA:		//SQUARE
		{
			setSignalType = SQUARE;
 8006d14:	4b17      	ldr	r3, [pc, #92]	; (8006d74 <Source_INT_WAVE_Command+0xc4>)
 8006d16:	2202      	movs	r2, #2
 8006d18:	701a      	strb	r2, [r3, #0]
			setSignalFlag = 1;
 8006d1a:	4b17      	ldr	r3, [pc, #92]	; (8006d78 <Source_INT_WAVE_Command+0xc8>)
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	701a      	strb	r2, [r3, #0]
			multiplexerChannelSelect = AD9833;
 8006d20:	4b16      	ldr	r3, [pc, #88]	; (8006d7c <Source_INT_WAVE_Command+0xcc>)
 8006d22:	2200      	movs	r2, #0
 8006d24:	701a      	strb	r2, [r3, #0]
			break;
 8006d26:	e01d      	b.n	8006d64 <Source_INT_WAVE_Command+0xb4>
		}
		case 0xAB:		//GAU, GAUSIAN
		{
			setSignalFlag = 1;
 8006d28:	4b13      	ldr	r3, [pc, #76]	; (8006d78 <Source_INT_WAVE_Command+0xc8>)
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	701a      	strb	r2, [r3, #0]
			dacSignalSelect = GAUSSIAN;
 8006d2e:	4b14      	ldr	r3, [pc, #80]	; (8006d80 <Source_INT_WAVE_Command+0xd0>)
 8006d30:	2201      	movs	r2, #1
 8006d32:	701a      	strb	r2, [r3, #0]
			multiplexerChannelSelect = CA_CH1;
 8006d34:	4b11      	ldr	r3, [pc, #68]	; (8006d7c <Source_INT_WAVE_Command+0xcc>)
 8006d36:	2201      	movs	r2, #1
 8006d38:	701a      	strb	r2, [r3, #0]
			break;
 8006d3a:	e013      	b.n	8006d64 <Source_INT_WAVE_Command+0xb4>
		}
		case 0xAC:		//RUP
		{
			setSignalFlag = 1;
 8006d3c:	4b0e      	ldr	r3, [pc, #56]	; (8006d78 <Source_INT_WAVE_Command+0xc8>)
 8006d3e:	2201      	movs	r2, #1
 8006d40:	701a      	strb	r2, [r3, #0]
			dacSignalSelect = SAWTOOTH;
 8006d42:	4b0f      	ldr	r3, [pc, #60]	; (8006d80 <Source_INT_WAVE_Command+0xd0>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	701a      	strb	r2, [r3, #0]
			multiplexerChannelSelect = CA_CH1;
 8006d48:	4b0c      	ldr	r3, [pc, #48]	; (8006d7c <Source_INT_WAVE_Command+0xcc>)
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	701a      	strb	r2, [r3, #0]
			break;
 8006d4e:	e009      	b.n	8006d64 <Source_INT_WAVE_Command+0xb4>
		}
		case 0xAD:		//PWM
		{
			setSignalFlag = 1;
 8006d50:	4b09      	ldr	r3, [pc, #36]	; (8006d78 <Source_INT_WAVE_Command+0xc8>)
 8006d52:	2201      	movs	r2, #1
 8006d54:	701a      	strb	r2, [r3, #0]
			multiplexerChannelSelect = PWM;
 8006d56:	4b09      	ldr	r3, [pc, #36]	; (8006d7c <Source_INT_WAVE_Command+0xcc>)
 8006d58:	2202      	movs	r2, #2
 8006d5a:	701a      	strb	r2, [r3, #0]
			break;
 8006d5c:	e002      	b.n	8006d64 <Source_INT_WAVE_Command+0xb4>
		}

		default:
		{
			errorCode = COMMAND_NOT_RECOGNIZED;
 8006d5e:	2325      	movs	r3, #37	; 0x25
 8006d60:	75fb      	strb	r3, [r7, #23]
			break;
 8006d62:	bf00      	nop
		}
	}

	return errorCode;
 8006d64:	7dfb      	ldrb	r3, [r7, #23]
 8006d66:	b29b      	uxth	r3, r3
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	371c      	adds	r7, #28
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	20002a6a 	.word	0x20002a6a
 8006d78:	200025b2 	.word	0x200025b2
 8006d7c:	20002b18 	.word	0x20002b18
 8006d80:	20002b22 	.word	0x20002b22

08006d84 <Source_INT_FREQ_Command>:

uint16_t Source_INT_FREQ_Command(const char tableWithMessagePieces[MAX_NUMBER_OF_PIECES][MAX_LENGTH_OF_A_PIECE], const uint8_t *numberOfPieces, const uint16_t *CommandNumbers, char *SCPI_buffer)
{
 8006d84:	b590      	push	{r4, r7, lr}
 8006d86:	b087      	sub	sp, #28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
 8006d90:	603b      	str	r3, [r7, #0]
	ERROR_CODE errorCode = 0x00;
 8006d92:	2300      	movs	r3, #0
 8006d94:	75fb      	strb	r3, [r7, #23]

	if (0x00 == CommandNumbers[3])
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	3306      	adds	r3, #6
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d13d      	bne.n	8006e1c <Source_INT_FREQ_Command+0x98>
	{
		switch(multiplexerChannelSelect)
 8006da0:	4b22      	ldr	r3, [pc, #136]	; (8006e2c <Source_INT_FREQ_Command+0xa8>)
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d010      	beq.n	8006dca <Source_INT_FREQ_Command+0x46>
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d026      	beq.n	8006dfa <Source_INT_FREQ_Command+0x76>
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d131      	bne.n	8006e14 <Source_INT_FREQ_Command+0x90>
		{
		case AD9833:
			setSignalFlag = 1;
 8006db0:	4b1f      	ldr	r3, [pc, #124]	; (8006e30 <Source_INT_FREQ_Command+0xac>)
 8006db2:	2201      	movs	r2, #1
 8006db4:	701a      	strb	r2, [r3, #0]
			setSignalFreq = (int)atoi(tableWithMessagePieces[3]);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	333c      	adds	r3, #60	; 0x3c
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f002 f8db 	bl	8008f76 <atoi>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	4b1b      	ldr	r3, [pc, #108]	; (8006e34 <Source_INT_FREQ_Command+0xb0>)
 8006dc6:	601a      	str	r2, [r3, #0]
			break;
 8006dc8:	e024      	b.n	8006e14 <Source_INT_FREQ_Command+0x90>
		case CA_CH1:
			dacStep = (int)atoi(tableWithMessagePieces[3]) / 24.5;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	333c      	adds	r3, #60	; 0x3c
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f002 f8d1 	bl	8008f76 <atoi>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7f9 fbb4 	bl	8000544 <__aeabi_i2d>
 8006ddc:	f04f 0200 	mov.w	r2, #0
 8006de0:	4b15      	ldr	r3, [pc, #84]	; (8006e38 <Source_INT_FREQ_Command+0xb4>)
 8006de2:	f7f9 fd43 	bl	800086c <__aeabi_ddiv>
 8006de6:	4603      	mov	r3, r0
 8006de8:	460c      	mov	r4, r1
 8006dea:	4618      	mov	r0, r3
 8006dec:	4621      	mov	r1, r4
 8006dee:	f7f9 feeb 	bl	8000bc8 <__aeabi_d2uiz>
 8006df2:	4603      	mov	r3, r0
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	4b11      	ldr	r3, [pc, #68]	; (8006e3c <Source_INT_FREQ_Command+0xb8>)
 8006df8:	801a      	strh	r2, [r3, #0]
		case PWM:
			setSignalFlag = 1;
 8006dfa:	4b0d      	ldr	r3, [pc, #52]	; (8006e30 <Source_INT_FREQ_Command+0xac>)
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	701a      	strb	r2, [r3, #0]
			PWM_Freq = (int)atoi(tableWithMessagePieces[3]);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	333c      	adds	r3, #60	; 0x3c
 8006e04:	4618      	mov	r0, r3
 8006e06:	f002 f8b6 	bl	8008f76 <atoi>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	4b0c      	ldr	r3, [pc, #48]	; (8006e40 <Source_INT_FREQ_Command+0xbc>)
 8006e10:	601a      	str	r2, [r3, #0]
			break;
 8006e12:	bf00      	nop
		}
		setSignalFlag = 1;
 8006e14:	4b06      	ldr	r3, [pc, #24]	; (8006e30 <Source_INT_FREQ_Command+0xac>)
 8006e16:	2201      	movs	r2, #1
 8006e18:	701a      	strb	r2, [r3, #0]
 8006e1a:	e001      	b.n	8006e20 <Source_INT_FREQ_Command+0x9c>
	}
	else
	{
		errorCode = COMMAND_NOT_RECOGNIZED;
 8006e1c:	2325      	movs	r3, #37	; 0x25
 8006e1e:	75fb      	strb	r3, [r7, #23]
	}

	return errorCode;
 8006e20:	7dfb      	ldrb	r3, [r7, #23]
 8006e22:	b29b      	uxth	r3, r3
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	371c      	adds	r7, #28
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd90      	pop	{r4, r7, pc}
 8006e2c:	20002b18 	.word	0x20002b18
 8006e30:	200025b2 	.word	0x200025b2
 8006e34:	20002c20 	.word	0x20002c20
 8006e38:	40388000 	.word	0x40388000
 8006e3c:	20002a74 	.word	0x20002a74
 8006e40:	20002b24 	.word	0x20002b24

08006e44 <Source_INT_PWMDUTY_Command>:

uint16_t Source_INT_PWMDUTY_Command(const char tableWithMessagePieces[MAX_NUMBER_OF_PIECES][MAX_LENGTH_OF_A_PIECE], const uint8_t *numberOfPieces, const uint16_t *CommandNumbers, char *SCPI_buffer)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
 8006e50:	603b      	str	r3, [r7, #0]
	ERROR_CODE errorCode = 0x00;
 8006e52:	2300      	movs	r3, #0
 8006e54:	75fb      	strb	r3, [r7, #23]

	if (0x00 == CommandNumbers[3])
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	3306      	adds	r3, #6
 8006e5a:	881b      	ldrh	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10c      	bne.n	8006e7a <Source_INT_PWMDUTY_Command+0x36>
	{
		PWM_Duty = (int)atoi(tableWithMessagePieces[3]);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	333c      	adds	r3, #60	; 0x3c
 8006e64:	4618      	mov	r0, r3
 8006e66:	f002 f886 	bl	8008f76 <atoi>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	4b07      	ldr	r3, [pc, #28]	; (8006e8c <Source_INT_PWMDUTY_Command+0x48>)
 8006e70:	701a      	strb	r2, [r3, #0]
		setSignalFlag = 1;
 8006e72:	4b07      	ldr	r3, [pc, #28]	; (8006e90 <Source_INT_PWMDUTY_Command+0x4c>)
 8006e74:	2201      	movs	r2, #1
 8006e76:	701a      	strb	r2, [r3, #0]
 8006e78:	e001      	b.n	8006e7e <Source_INT_PWMDUTY_Command+0x3a>
	}
	else
	{
		errorCode = COMMAND_NOT_RECOGNIZED;
 8006e7a:	2325      	movs	r3, #37	; 0x25
 8006e7c:	75fb      	strb	r3, [r7, #23]
	}

	return errorCode;
 8006e7e:	7dfb      	ldrb	r3, [r7, #23]
 8006e80:	b29b      	uxth	r3, r3
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3718      	adds	r7, #24
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20002c24 	.word	0x20002c24
 8006e90:	200025b2 	.word	0x200025b2

08006e94 <Source_INT_GAUSS_Command>:

uint16_t Source_INT_GAUSS_Command(const char tableWithMessagePieces[MAX_NUMBER_OF_PIECES][MAX_LENGTH_OF_A_PIECE], const uint8_t *numberOfPieces, const uint16_t *CommandNumbers, char *SCPI_buffer)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
 8006ea0:	603b      	str	r3, [r7, #0]
	ERROR_CODE errorCode = 0x00;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	75fb      	strb	r3, [r7, #23]

	if (0xAE == CommandNumbers[3]) //MEAN
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	3306      	adds	r3, #6
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	2bae      	cmp	r3, #174	; 0xae
 8006eae:	d109      	bne.n	8006ec4 <Source_INT_GAUSS_Command+0x30>
	{
		gauss_mean = (int)atoi(tableWithMessagePieces[4]);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	3350      	adds	r3, #80	; 0x50
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f002 f85e 	bl	8008f76 <atoi>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	4b0d      	ldr	r3, [pc, #52]	; (8006ef4 <Source_INT_GAUSS_Command+0x60>)
 8006ec0:	801a      	strh	r2, [r3, #0]
 8006ec2:	e010      	b.n	8006ee6 <Source_INT_GAUSS_Command+0x52>
	}
	else if (0xAF == CommandNumbers[3]) //STDDEV
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3306      	adds	r3, #6
 8006ec8:	881b      	ldrh	r3, [r3, #0]
 8006eca:	2baf      	cmp	r3, #175	; 0xaf
 8006ecc:	d109      	bne.n	8006ee2 <Source_INT_GAUSS_Command+0x4e>
	{
		gauss_std_dev = (int)atoi(tableWithMessagePieces[4]);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3350      	adds	r3, #80	; 0x50
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f002 f84f 	bl	8008f76 <atoi>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	4b06      	ldr	r3, [pc, #24]	; (8006ef8 <Source_INT_GAUSS_Command+0x64>)
 8006ede:	801a      	strh	r2, [r3, #0]
 8006ee0:	e001      	b.n	8006ee6 <Source_INT_GAUSS_Command+0x52>
	}
	else
	{
		errorCode = COMMAND_NOT_RECOGNIZED;
 8006ee2:	2325      	movs	r3, #37	; 0x25
 8006ee4:	75fb      	strb	r3, [r7, #23]
	}

	return errorCode;
 8006ee6:	7dfb      	ldrb	r3, [r7, #23]
 8006ee8:	b29b      	uxth	r3, r3
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3718      	adds	r7, #24
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	20002b28 	.word	0x20002b28
 8006ef8:	20002b20 	.word	0x20002b20

08006efc <Set_Command>:
//
//	return errorCode;
}
//
uint16_t Set_Command(const char tableWithMessagePieces[MAX_NUMBER_OF_PIECES][MAX_LENGTH_OF_A_PIECE], const uint8_t *numberOfPieces, const uint16_t *CommandNumbers, char *SCPI_buffer)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
 8006f08:	603b      	str	r3, [r7, #0]
//			break;
//		}
//	}
//
//	return errorCode;
}
 8006f0a:	bf00      	nop
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <Return_Error_Description>:

#include "Errors.h"


char* Return_Error_Description(const uint16_t errorCode)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	4603      	mov	r3, r0
 8006f20:	80fb      	strh	r3, [r7, #6]
	char *description;

	switch(errorCode)
 8006f22:	88fb      	ldrh	r3, [r7, #6]
 8006f24:	2b25      	cmp	r3, #37	; 0x25
 8006f26:	d86a      	bhi.n	8006ffe <Return_Error_Description+0xe6>
 8006f28:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <Return_Error_Description+0x18>)
 8006f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2e:	bf00      	nop
 8006f30:	08006fc9 	.word	0x08006fc9
 8006f34:	08006fcf 	.word	0x08006fcf
 8006f38:	08006fd5 	.word	0x08006fd5
 8006f3c:	08006fff 	.word	0x08006fff
 8006f40:	08006fff 	.word	0x08006fff
 8006f44:	08006fff 	.word	0x08006fff
 8006f48:	08006fff 	.word	0x08006fff
 8006f4c:	08006fff 	.word	0x08006fff
 8006f50:	08006fff 	.word	0x08006fff
 8006f54:	08006fff 	.word	0x08006fff
 8006f58:	08006fff 	.word	0x08006fff
 8006f5c:	08006fff 	.word	0x08006fff
 8006f60:	08006fff 	.word	0x08006fff
 8006f64:	08006fff 	.word	0x08006fff
 8006f68:	08006fff 	.word	0x08006fff
 8006f6c:	08006fff 	.word	0x08006fff
 8006f70:	08006fff 	.word	0x08006fff
 8006f74:	08006fff 	.word	0x08006fff
 8006f78:	08006fff 	.word	0x08006fff
 8006f7c:	08006fff 	.word	0x08006fff
 8006f80:	08006fff 	.word	0x08006fff
 8006f84:	08006fff 	.word	0x08006fff
 8006f88:	08006fff 	.word	0x08006fff
 8006f8c:	08006fff 	.word	0x08006fff
 8006f90:	08006fff 	.word	0x08006fff
 8006f94:	08006fff 	.word	0x08006fff
 8006f98:	08006fff 	.word	0x08006fff
 8006f9c:	08006fff 	.word	0x08006fff
 8006fa0:	08006fff 	.word	0x08006fff
 8006fa4:	08006fff 	.word	0x08006fff
 8006fa8:	08006fff 	.word	0x08006fff
 8006fac:	08006fff 	.word	0x08006fff
 8006fb0:	08006fdb 	.word	0x08006fdb
 8006fb4:	08006fe1 	.word	0x08006fe1
 8006fb8:	08006fe7 	.word	0x08006fe7
 8006fbc:	08006fed 	.word	0x08006fed
 8006fc0:	08006ff3 	.word	0x08006ff3
 8006fc4:	08006ff9 	.word	0x08006ff9
	{
		case 0x00:
		{
			description = "No error was detected.";
 8006fc8:	4b12      	ldr	r3, [pc, #72]	; (8007014 <Return_Error_Description+0xfc>)
 8006fca:	60fb      	str	r3, [r7, #12]
			break;
 8006fcc:	e01a      	b.n	8007004 <Return_Error_Description+0xec>
		}
		case 0x01:
		{
			description = "Received message is too long - shorten the message or increase the receive buffer size!";
 8006fce:	4b12      	ldr	r3, [pc, #72]	; (8007018 <Return_Error_Description+0x100>)
 8006fd0:	60fb      	str	r3, [r7, #12]
			break;
 8006fd2:	e017      	b.n	8007004 <Return_Error_Description+0xec>
		}
		case 0x02:
		{
			description = "Message prepared to send is too long - increase the send buffer size!";
 8006fd4:	4b11      	ldr	r3, [pc, #68]	; (800701c <Return_Error_Description+0x104>)
 8006fd6:	60fb      	str	r3, [r7, #12]
			break;
 8006fd8:	e014      	b.n	8007004 <Return_Error_Description+0xec>
		}
		case 0x20:
		{
			description = "Received message is incorrect - check spelling!";
 8006fda:	4b11      	ldr	r3, [pc, #68]	; (8007020 <Return_Error_Description+0x108>)
 8006fdc:	60fb      	str	r3, [r7, #12]
			break;
 8006fde:	e011      	b.n	8007004 <Return_Error_Description+0xec>
		}
		case 0x21:
		{
			description = "Received message has length 0! Check if message is sent correctly.";
 8006fe0:	4b10      	ldr	r3, [pc, #64]	; (8007024 <Return_Error_Description+0x10c>)
 8006fe2:	60fb      	str	r3, [r7, #12]
			break;
 8006fe4:	e00e      	b.n	8007004 <Return_Error_Description+0xec>
		}
		case 0x22:
		{
			description = "Received message has too many separators! Try shortening message or increase maximum allowed number of separators.";
 8006fe6:	4b10      	ldr	r3, [pc, #64]	; (8007028 <Return_Error_Description+0x110>)
 8006fe8:	60fb      	str	r3, [r7, #12]
			break;
 8006fea:	e00b      	b.n	8007004 <Return_Error_Description+0xec>
		}
		case 0x23:
		{
			description = "Wrong end of the message! There is a separator at the end - try deleting it.";
 8006fec:	4b0f      	ldr	r3, [pc, #60]	; (800702c <Return_Error_Description+0x114>)
 8006fee:	60fb      	str	r3, [r7, #12]
			break;
 8006ff0:	e008      	b.n	8007004 <Return_Error_Description+0xec>
		}
		case 0x24:
		{
			description = "A command in received message is too long! Try shortening (use abbreviation?) or increase maximum allowed command length.";
 8006ff2:	4b0f      	ldr	r3, [pc, #60]	; (8007030 <Return_Error_Description+0x118>)
 8006ff4:	60fb      	str	r3, [r7, #12]
			break;
 8006ff6:	e005      	b.n	8007004 <Return_Error_Description+0xec>
		}
		case 0x25:
		{
			description = "Received message has an unrecognized command inside! Check spelling.";
 8006ff8:	4b0e      	ldr	r3, [pc, #56]	; (8007034 <Return_Error_Description+0x11c>)
 8006ffa:	60fb      	str	r3, [r7, #12]
			break;
 8006ffc:	e002      	b.n	8007004 <Return_Error_Description+0xec>
		}
		default:
		{
			description = "!!Unknown error!!";
 8006ffe:	4b0e      	ldr	r3, [pc, #56]	; (8007038 <Return_Error_Description+0x120>)
 8007000:	60fb      	str	r3, [r7, #12]
			break;
 8007002:	bf00      	nop
		}
	}
}
 8007004:	bf00      	nop
 8007006:	4618      	mov	r0, r3
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	0800b198 	.word	0x0800b198
 8007018:	0800b1b0 	.word	0x0800b1b0
 800701c:	0800b208 	.word	0x0800b208
 8007020:	0800b250 	.word	0x0800b250
 8007024:	0800b280 	.word	0x0800b280
 8007028:	0800b2c4 	.word	0x0800b2c4
 800702c:	0800b338 	.word	0x0800b338
 8007030:	0800b388 	.word	0x0800b388
 8007034:	0800b404 	.word	0x0800b404
 8007038:	0800b44c 	.word	0x0800b44c

0800703c <Get_Message_Length>:
const uint16_t Ports_LENGTH = sizeof(Ports) / sizeof(Ports[0]);



static uint16_t Get_Message_Length(const char *MESSAGE)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
	ERROR_CODE errorCode = 0x00;
 8007044:	2300      	movs	r3, #0
 8007046:	73fb      	strb	r3, [r7, #15]
	messageLength = strlen(MESSAGE);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f7f9 f8cb 	bl	80001e4 <strlen>
 800704e:	4603      	mov	r3, r0
 8007050:	b29a      	uxth	r2, r3
 8007052:	4b07      	ldr	r3, [pc, #28]	; (8007070 <Get_Message_Length+0x34>)
 8007054:	801a      	strh	r2, [r3, #0]

	if(0 == messageLength)
 8007056:	4b06      	ldr	r3, [pc, #24]	; (8007070 <Get_Message_Length+0x34>)
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <Get_Message_Length+0x26>
		errorCode = MESSAGE_HAS_LENGTH_ZERO;
 800705e:	2321      	movs	r3, #33	; 0x21
 8007060:	73fb      	strb	r3, [r7, #15]

	return errorCode;
 8007062:	7bfb      	ldrb	r3, [r7, #15]
 8007064:	b29b      	uxth	r3, r3
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	200025b0 	.word	0x200025b0

08007074 <Message_To_Upper_Letters>:


static uint16_t Message_To_Upper_Letters(char* message)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
	ERROR_CODE errorCode = 0x00;
 800707c:	2300      	movs	r3, #0
 800707e:	737b      	strb	r3, [r7, #13]
	uint16_t i = 0;
 8007080:	2300      	movs	r3, #0
 8007082:	81fb      	strh	r3, [r7, #14]

	for (i = 0; i < messageLength; ++i)
 8007084:	2300      	movs	r3, #0
 8007086:	81fb      	strh	r3, [r7, #14]
 8007088:	e018      	b.n	80070bc <Message_To_Upper_Letters+0x48>
	{
		if (message[i] >= 97 && message[i] <= 122)
 800708a:	89fb      	ldrh	r3, [r7, #14]
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	4413      	add	r3, r2
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	2b60      	cmp	r3, #96	; 0x60
 8007094:	d90f      	bls.n	80070b6 <Message_To_Upper_Letters+0x42>
 8007096:	89fb      	ldrh	r3, [r7, #14]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	4413      	add	r3, r2
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	2b7a      	cmp	r3, #122	; 0x7a
 80070a0:	d809      	bhi.n	80070b6 <Message_To_Upper_Letters+0x42>
		{
			message[i] = message[i] - 32;
 80070a2:	89fb      	ldrh	r3, [r7, #14]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	4413      	add	r3, r2
 80070a8:	781a      	ldrb	r2, [r3, #0]
 80070aa:	89fb      	ldrh	r3, [r7, #14]
 80070ac:	6879      	ldr	r1, [r7, #4]
 80070ae:	440b      	add	r3, r1
 80070b0:	3a20      	subs	r2, #32
 80070b2:	b2d2      	uxtb	r2, r2
 80070b4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < messageLength; ++i)
 80070b6:	89fb      	ldrh	r3, [r7, #14]
 80070b8:	3301      	adds	r3, #1
 80070ba:	81fb      	strh	r3, [r7, #14]
 80070bc:	4b06      	ldr	r3, [pc, #24]	; (80070d8 <Message_To_Upper_Letters+0x64>)
 80070be:	881b      	ldrh	r3, [r3, #0]
 80070c0:	89fa      	ldrh	r2, [r7, #14]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d3e1      	bcc.n	800708a <Message_To_Upper_Letters+0x16>
		}
	}

	return errorCode;
 80070c6:	7b7b      	ldrb	r3, [r7, #13]
 80070c8:	b29b      	uxth	r3, r3
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3714      	adds	r7, #20
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	200025b0 	.word	0x200025b0

080070dc <Find_Separators>:


static uint16_t Find_Separators(const char *MESSAGE, uint16_t *separatorIndexesTable, uint8_t *howManySeparatorsWereFound)
{
 80070dc:	b480      	push	{r7}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
	ERROR_CODE errorCode = 0x00;
 80070e8:	2300      	movs	r3, #0
 80070ea:	75fb      	strb	r3, [r7, #23]
	uint16_t i = 0;
 80070ec:	2300      	movs	r3, #0
 80070ee:	82bb      	strh	r3, [r7, #20]
	uint16_t j = 0;
 80070f0:	2300      	movs	r3, #0
 80070f2:	827b      	strh	r3, [r7, #18]

	for (i = 0; i < messageLength; ++i)
 80070f4:	2300      	movs	r3, #0
 80070f6:	82bb      	strh	r3, [r7, #20]
 80070f8:	e041      	b.n	800717e <Find_Separators+0xa2>
	{
		if (':' == MESSAGE[i] || ' ' == MESSAGE[i] || ',' == MESSAGE[i])
 80070fa:	8abb      	ldrh	r3, [r7, #20]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	4413      	add	r3, r2
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	2b3a      	cmp	r3, #58	; 0x3a
 8007104:	d00b      	beq.n	800711e <Find_Separators+0x42>
 8007106:	8abb      	ldrh	r3, [r7, #20]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	4413      	add	r3, r2
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	2b20      	cmp	r3, #32
 8007110:	d005      	beq.n	800711e <Find_Separators+0x42>
 8007112:	8abb      	ldrh	r3, [r7, #20]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	4413      	add	r3, r2
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	2b2c      	cmp	r3, #44	; 0x2c
 800711c:	d12c      	bne.n	8007178 <Find_Separators+0x9c>
		{
			separatorIndexesTable[j] = i;
 800711e:	8a7b      	ldrh	r3, [r7, #18]
 8007120:	005b      	lsls	r3, r3, #1
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	4413      	add	r3, r2
 8007126:	8aba      	ldrh	r2, [r7, #20]
 8007128:	801a      	strh	r2, [r3, #0]
			++*howManySeparatorsWereFound;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	3301      	adds	r3, #1
 8007130:	b2da      	uxtb	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	701a      	strb	r2, [r3, #0]

			if (*howManySeparatorsWereFound > MAX_NUMBER_OF_SEPARATORS)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	2b0a      	cmp	r3, #10
 800713c:	d902      	bls.n	8007144 <Find_Separators+0x68>
			{
				errorCode = TOO_MANY_SEPARATORS;
 800713e:	2322      	movs	r3, #34	; 0x22
 8007140:	75fb      	strb	r3, [r7, #23]
				break;
 8007142:	e021      	b.n	8007188 <Find_Separators+0xac>
			}

			if (0 != j)	//if it is not the first colon found
 8007144:	8a7b      	ldrh	r3, [r7, #18]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d013      	beq.n	8007172 <Find_Separators+0x96>
			{
				if (separatorIndexesTable[j] - separatorIndexesTable[j-1] <= 1)	//check if there is something between colons
 800714a:	8a7b      	ldrh	r3, [r7, #18]
 800714c:	005b      	lsls	r3, r3, #1
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	4413      	add	r3, r2
 8007152:	881b      	ldrh	r3, [r3, #0]
 8007154:	4619      	mov	r1, r3
 8007156:	8a7b      	ldrh	r3, [r7, #18]
 8007158:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800715c:	3b01      	subs	r3, #1
 800715e:	005b      	lsls	r3, r3, #1
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	4413      	add	r3, r2
 8007164:	881b      	ldrh	r3, [r3, #0]
 8007166:	1acb      	subs	r3, r1, r3
 8007168:	2b01      	cmp	r3, #1
 800716a:	dc02      	bgt.n	8007172 <Find_Separators+0x96>
				{
					errorCode = MESSAGE_NOT_CORRECT;
 800716c:	2320      	movs	r3, #32
 800716e:	75fb      	strb	r3, [r7, #23]
					break;
 8007170:	e00a      	b.n	8007188 <Find_Separators+0xac>
				}
			}
			++j;	// move to next position in separatorIndexesTable to remember next colons
 8007172:	8a7b      	ldrh	r3, [r7, #18]
 8007174:	3301      	adds	r3, #1
 8007176:	827b      	strh	r3, [r7, #18]
	for (i = 0; i < messageLength; ++i)
 8007178:	8abb      	ldrh	r3, [r7, #20]
 800717a:	3301      	adds	r3, #1
 800717c:	82bb      	strh	r3, [r7, #20]
 800717e:	4b06      	ldr	r3, [pc, #24]	; (8007198 <Find_Separators+0xbc>)
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	8aba      	ldrh	r2, [r7, #20]
 8007184:	429a      	cmp	r2, r3
 8007186:	d3b8      	bcc.n	80070fa <Find_Separators+0x1e>
		}
	}

	return errorCode;
 8007188:	7dfb      	ldrb	r3, [r7, #23]
 800718a:	b29b      	uxth	r3, r3
}
 800718c:	4618      	mov	r0, r3
 800718e:	371c      	adds	r7, #28
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	200025b0 	.word	0x200025b0

0800719c <Cut_Message_Into_Pieces>:


static uint16_t Cut_Message_Into_Pieces(const char *MESSAGE, char tableWithMessagePieces[MAX_NUMBER_OF_PIECES][MAX_LENGTH_OF_A_PIECE], uint8_t *numberOfPieces)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b08c      	sub	sp, #48	; 0x30
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
	ERROR_CODE errorCode = 0x00;
 80071a8:	2300      	movs	r3, #0
 80071aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint16_t iteratorInMessage = 0;
 80071ae:	2300      	movs	r3, #0
 80071b0:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint16_t jteratorInseparatorIndexesTable = 0;
 80071b2:	2300      	movs	r3, #0
 80071b4:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t lastPosition = 0;
 80071b6:	2300      	movs	r3, #0
 80071b8:	853b      	strh	r3, [r7, #40]	; 0x28
	uint16_t pieceIterator = 0;
 80071ba:	2300      	movs	r3, #0
 80071bc:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t howManySeparatorsWereFound = 0;
 80071be:	2300      	movs	r3, #0
 80071c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint16_t separatorIndexesTable[MAX_NUMBER_OF_SEPARATORS] = {0};
 80071c4:	f107 0310 	add.w	r3, r7, #16
 80071c8:	2200      	movs	r2, #0
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	605a      	str	r2, [r3, #4]
 80071ce:	609a      	str	r2, [r3, #8]
 80071d0:	60da      	str	r2, [r3, #12]
 80071d2:	611a      	str	r2, [r3, #16]

	/* We look for separators between pieces of messages. The separators are: ":", " " and ",". */
	errorCode = Find_Separators(MESSAGE, separatorIndexesTable, &howManySeparatorsWereFound);
 80071d4:	f107 0225 	add.w	r2, r7, #37	; 0x25
 80071d8:	f107 0310 	add.w	r3, r7, #16
 80071dc:	4619      	mov	r1, r3
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f7ff ff7c 	bl	80070dc <Find_Separators>
 80071e4:	4603      	mov	r3, r0
 80071e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	*numberOfPieces = howManySeparatorsWereFound + 1;
 80071ea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80071ee:	3301      	adds	r3, #1
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	701a      	strb	r2, [r3, #0]

	if (0 != howManySeparatorsWereFound && 0 == errorCode)
 80071f6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d07a      	beq.n	80072f4 <Cut_Message_Into_Pieces+0x158>
 80071fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007202:	2b00      	cmp	r3, #0
 8007204:	d176      	bne.n	80072f4 <Cut_Message_Into_Pieces+0x158>
	{
		for (jteratorInseparatorIndexesTable = 0; jteratorInseparatorIndexesTable < howManySeparatorsWereFound; ++jteratorInseparatorIndexesTable)
 8007206:	2300      	movs	r3, #0
 8007208:	857b      	strh	r3, [r7, #42]	; 0x2a
 800720a:	e042      	b.n	8007292 <Cut_Message_Into_Pieces+0xf6>
		{
			if (errorCode != 0)
 800720c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007210:	2b00      	cmp	r3, #0
 8007212:	d145      	bne.n	80072a0 <Cut_Message_Into_Pieces+0x104>
				break;

			for (iteratorInMessage = lastPosition; iteratorInMessage < separatorIndexesTable[jteratorInseparatorIndexesTable]; ++iteratorInMessage)
 8007214:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007216:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007218:	e01a      	b.n	8007250 <Cut_Message_Into_Pieces+0xb4>
			{
				tableWithMessagePieces[jteratorInseparatorIndexesTable][pieceIterator] = MESSAGE[iteratorInMessage];
 800721a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	18d1      	adds	r1, r2, r3
 8007220:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8007222:	4613      	mov	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4413      	add	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	461a      	mov	r2, r3
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	441a      	add	r2, r3
 8007230:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007232:	7809      	ldrb	r1, [r1, #0]
 8007234:	54d1      	strb	r1, [r2, r3]
				++pieceIterator;
 8007236:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007238:	3301      	adds	r3, #1
 800723a:	84fb      	strh	r3, [r7, #38]	; 0x26

				if (pieceIterator >= MAX_LENGTH_OF_A_PIECE-1)
 800723c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800723e:	2b12      	cmp	r3, #18
 8007240:	d903      	bls.n	800724a <Cut_Message_Into_Pieces+0xae>
				{
					errorCode = PIECE_TOO_LONG;
 8007242:	2324      	movs	r3, #36	; 0x24
 8007244:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 8007248:	e00c      	b.n	8007264 <Cut_Message_Into_Pieces+0xc8>
			for (iteratorInMessage = lastPosition; iteratorInMessage < separatorIndexesTable[jteratorInseparatorIndexesTable]; ++iteratorInMessage)
 800724a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800724c:	3301      	adds	r3, #1
 800724e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007250:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007252:	005b      	lsls	r3, r3, #1
 8007254:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007258:	4413      	add	r3, r2
 800725a:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800725e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007260:	429a      	cmp	r2, r3
 8007262:	d3da      	bcc.n	800721a <Cut_Message_Into_Pieces+0x7e>
				}
			}

			lastPosition = separatorIndexesTable[jteratorInseparatorIndexesTable]+1;
 8007264:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007266:	005b      	lsls	r3, r3, #1
 8007268:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800726c:	4413      	add	r3, r2
 800726e:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007272:	3301      	adds	r3, #1
 8007274:	853b      	strh	r3, [r7, #40]	; 0x28
			pieceIterator = 0;
 8007276:	2300      	movs	r3, #0
 8007278:	84fb      	strh	r3, [r7, #38]	; 0x26

			if (lastPosition >= messageLength)
 800727a:	4b24      	ldr	r3, [pc, #144]	; (800730c <Cut_Message_Into_Pieces+0x170>)
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007280:	429a      	cmp	r2, r3
 8007282:	d303      	bcc.n	800728c <Cut_Message_Into_Pieces+0xf0>
			{
				errorCode = SEPARATOR_AT_THE_END_OF_MESSAGE;
 8007284:	2323      	movs	r3, #35	; 0x23
 8007286:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800728a:	e00a      	b.n	80072a2 <Cut_Message_Into_Pieces+0x106>
		for (jteratorInseparatorIndexesTable = 0; jteratorInseparatorIndexesTable < howManySeparatorsWereFound; ++jteratorInseparatorIndexesTable)
 800728c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800728e:	3301      	adds	r3, #1
 8007290:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007292:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007296:	b29b      	uxth	r3, r3
 8007298:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800729a:	429a      	cmp	r2, r3
 800729c:	d3b6      	bcc.n	800720c <Cut_Message_Into_Pieces+0x70>
 800729e:	e000      	b.n	80072a2 <Cut_Message_Into_Pieces+0x106>
				break;
 80072a0:	bf00      	nop
			}
		}

		if (0 == errorCode)
 80072a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d128      	bne.n	80072fc <Cut_Message_Into_Pieces+0x160>
		{
			for (iteratorInMessage = lastPosition; iteratorInMessage < messageLength; ++iteratorInMessage)
 80072aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80072ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80072ae:	e01b      	b.n	80072e8 <Cut_Message_Into_Pieces+0x14c>
			{
				tableWithMessagePieces[jteratorInseparatorIndexesTable][pieceIterator] = MESSAGE[iteratorInMessage];
 80072b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	18d1      	adds	r1, r2, r3
 80072b6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80072b8:	4613      	mov	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	461a      	mov	r2, r3
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	441a      	add	r2, r3
 80072c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80072c8:	7809      	ldrb	r1, [r1, #0]
 80072ca:	54d1      	strb	r1, [r2, r3]
				++pieceIterator;
 80072cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80072ce:	3301      	adds	r3, #1
 80072d0:	84fb      	strh	r3, [r7, #38]	; 0x26

				if (pieceIterator >= MAX_LENGTH_OF_A_PIECE-1)
 80072d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80072d4:	2b12      	cmp	r3, #18
 80072d6:	d904      	bls.n	80072e2 <Cut_Message_Into_Pieces+0x146>
				{
					errorCode = PIECE_TOO_LONG;
 80072d8:	2324      	movs	r3, #36	; 0x24
 80072da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 80072de:	bf00      	nop
		if (0 == errorCode)
 80072e0:	e00c      	b.n	80072fc <Cut_Message_Into_Pieces+0x160>
			for (iteratorInMessage = lastPosition; iteratorInMessage < messageLength; ++iteratorInMessage)
 80072e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80072e4:	3301      	adds	r3, #1
 80072e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80072e8:	4b08      	ldr	r3, [pc, #32]	; (800730c <Cut_Message_Into_Pieces+0x170>)
 80072ea:	881b      	ldrh	r3, [r3, #0]
 80072ec:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d3de      	bcc.n	80072b0 <Cut_Message_Into_Pieces+0x114>
		if (0 == errorCode)
 80072f2:	e003      	b.n	80072fc <Cut_Message_Into_Pieces+0x160>
			}
		}
	}
	else
	{
		strcpy(tableWithMessagePieces[0], MESSAGE);
 80072f4:	68f9      	ldr	r1, [r7, #12]
 80072f6:	68b8      	ldr	r0, [r7, #8]
 80072f8:	f001 fef8 	bl	80090ec <strcpy>
	}

	return errorCode;
 80072fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007300:	b29b      	uxth	r3, r3
}
 8007302:	4618      	mov	r0, r3
 8007304:	3730      	adds	r7, #48	; 0x30
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	200025b0 	.word	0x200025b0

08007310 <Recognize_Piece_Of_Message>:


static uint16_t Recognize_Piece_Of_Message(char *Piece, uint16_t *foundCommand)
{
 8007310:	b590      	push	{r4, r7, lr}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
	ERROR_CODE errorCode = 0x00;
 800731a:	2300      	movs	r3, #0
 800731c:	73fb      	strb	r3, [r7, #15]
	uint16_t i = 0;
 800731e:	2300      	movs	r3, #0
 8007320:	81bb      	strh	r3, [r7, #12]
	uint8_t FLAG_match = 0;
 8007322:	2300      	movs	r3, #0
 8007324:	72fb      	strb	r3, [r7, #11]
	uint8_t FLAG_isDigit = 0;
 8007326:	2300      	movs	r3, #0
 8007328:	72bb      	strb	r3, [r7, #10]

	if ('*' == Piece[0])
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	2b2a      	cmp	r3, #42	; 0x2a
 8007330:	d12b      	bne.n	800738a <Recognize_Piece_Of_Message+0x7a>
	{
		for (i = 0; i < MandatedCommands_LENGTH; ++i)
 8007332:	2300      	movs	r3, #0
 8007334:	81bb      	strh	r3, [r7, #12]
 8007336:	e023      	b.n	8007380 <Recognize_Piece_Of_Message+0x70>
		{
			FLAG_match = (strcmp(Piece, MandatedCommands[i].name) ? 0 : 1);
 8007338:	89ba      	ldrh	r2, [r7, #12]
 800733a:	4613      	mov	r3, r2
 800733c:	00db      	lsls	r3, r3, #3
 800733e:	1a9b      	subs	r3, r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4a92      	ldr	r2, [pc, #584]	; (800758c <Recognize_Piece_Of_Message+0x27c>)
 8007344:	4413      	add	r3, r2
 8007346:	4619      	mov	r1, r3
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7f8 ff41 	bl	80001d0 <strcmp>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	bf0c      	ite	eq
 8007354:	2301      	moveq	r3, #1
 8007356:	2300      	movne	r3, #0
 8007358:	b2db      	uxtb	r3, r3
 800735a:	72fb      	strb	r3, [r7, #11]

			if (1 == FLAG_match)
 800735c:	7afb      	ldrb	r3, [r7, #11]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d10b      	bne.n	800737a <Recognize_Piece_Of_Message+0x6a>
			{
				*foundCommand = MandatedCommands[i].commandNumber;
 8007362:	89ba      	ldrh	r2, [r7, #12]
 8007364:	4989      	ldr	r1, [pc, #548]	; (800758c <Recognize_Piece_Of_Message+0x27c>)
 8007366:	4613      	mov	r3, r2
 8007368:	00db      	lsls	r3, r3, #3
 800736a:	1a9b      	subs	r3, r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	440b      	add	r3, r1
 8007370:	331a      	adds	r3, #26
 8007372:	881a      	ldrh	r2, [r3, #0]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	801a      	strh	r2, [r3, #0]
				break;
 8007378:	e0fd      	b.n	8007576 <Recognize_Piece_Of_Message+0x266>
		for (i = 0; i < MandatedCommands_LENGTH; ++i)
 800737a:	89bb      	ldrh	r3, [r7, #12]
 800737c:	3301      	adds	r3, #1
 800737e:	81bb      	strh	r3, [r7, #12]
 8007380:	2212      	movs	r2, #18
 8007382:	89bb      	ldrh	r3, [r7, #12]
 8007384:	4293      	cmp	r3, r2
 8007386:	d3d7      	bcc.n	8007338 <Recognize_Piece_Of_Message+0x28>
 8007388:	e0f5      	b.n	8007576 <Recognize_Piece_Of_Message+0x266>
			}
		}
	}
	else
	{
		if (0 == FLAG_match)
 800738a:	7afb      	ldrb	r3, [r7, #11]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d12a      	bne.n	80073e6 <Recognize_Piece_Of_Message+0xd6>
		{
			for (i = 0; i < Commands_1_LENGTH; ++i)
 8007390:	2300      	movs	r3, #0
 8007392:	81bb      	strh	r3, [r7, #12]
 8007394:	e023      	b.n	80073de <Recognize_Piece_Of_Message+0xce>
			{
				FLAG_match = (strcmp(Piece, Commands_1[i].name) ? 0 : 1);
 8007396:	89ba      	ldrh	r2, [r7, #12]
 8007398:	4613      	mov	r3, r2
 800739a:	00db      	lsls	r3, r3, #3
 800739c:	1a9b      	subs	r3, r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4a7b      	ldr	r2, [pc, #492]	; (8007590 <Recognize_Piece_Of_Message+0x280>)
 80073a2:	4413      	add	r3, r2
 80073a4:	4619      	mov	r1, r3
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f7f8 ff12 	bl	80001d0 <strcmp>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	bf0c      	ite	eq
 80073b2:	2301      	moveq	r3, #1
 80073b4:	2300      	movne	r3, #0
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	72fb      	strb	r3, [r7, #11]

				if (1 == FLAG_match)
 80073ba:	7afb      	ldrb	r3, [r7, #11]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d10b      	bne.n	80073d8 <Recognize_Piece_Of_Message+0xc8>
				{
					*foundCommand = Commands_1[i].commandNumber;
 80073c0:	89ba      	ldrh	r2, [r7, #12]
 80073c2:	4973      	ldr	r1, [pc, #460]	; (8007590 <Recognize_Piece_Of_Message+0x280>)
 80073c4:	4613      	mov	r3, r2
 80073c6:	00db      	lsls	r3, r3, #3
 80073c8:	1a9b      	subs	r3, r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	440b      	add	r3, r1
 80073ce:	331a      	adds	r3, #26
 80073d0:	881a      	ldrh	r2, [r3, #0]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	801a      	strh	r2, [r3, #0]
					break;
 80073d6:	e006      	b.n	80073e6 <Recognize_Piece_Of_Message+0xd6>
			for (i = 0; i < Commands_1_LENGTH; ++i)
 80073d8:	89bb      	ldrh	r3, [r7, #12]
 80073da:	3301      	adds	r3, #1
 80073dc:	81bb      	strh	r3, [r7, #12]
 80073de:	2215      	movs	r2, #21
 80073e0:	89bb      	ldrh	r3, [r7, #12]
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d3d7      	bcc.n	8007396 <Recognize_Piece_Of_Message+0x86>
				}
			}
		}

		if (0 == FLAG_match)
 80073e6:	7afb      	ldrb	r3, [r7, #11]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d12a      	bne.n	8007442 <Recognize_Piece_Of_Message+0x132>
		{
			for (i = 0; i < Commands_2_LENGTH; ++i)
 80073ec:	2300      	movs	r3, #0
 80073ee:	81bb      	strh	r3, [r7, #12]
 80073f0:	e023      	b.n	800743a <Recognize_Piece_Of_Message+0x12a>
			{
				FLAG_match = (strcmp(Piece, Commands_2[i].name) ? 0 : 1);
 80073f2:	89ba      	ldrh	r2, [r7, #12]
 80073f4:	4613      	mov	r3, r2
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	1a9b      	subs	r3, r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4a65      	ldr	r2, [pc, #404]	; (8007594 <Recognize_Piece_Of_Message+0x284>)
 80073fe:	4413      	add	r3, r2
 8007400:	4619      	mov	r1, r3
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7f8 fee4 	bl	80001d0 <strcmp>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	bf0c      	ite	eq
 800740e:	2301      	moveq	r3, #1
 8007410:	2300      	movne	r3, #0
 8007412:	b2db      	uxtb	r3, r3
 8007414:	72fb      	strb	r3, [r7, #11]

				if (1 == FLAG_match)
 8007416:	7afb      	ldrb	r3, [r7, #11]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d10b      	bne.n	8007434 <Recognize_Piece_Of_Message+0x124>
				{
					*foundCommand = Commands_2[i].commandNumber;
 800741c:	89ba      	ldrh	r2, [r7, #12]
 800741e:	495d      	ldr	r1, [pc, #372]	; (8007594 <Recognize_Piece_Of_Message+0x284>)
 8007420:	4613      	mov	r3, r2
 8007422:	00db      	lsls	r3, r3, #3
 8007424:	1a9b      	subs	r3, r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	440b      	add	r3, r1
 800742a:	331a      	adds	r3, #26
 800742c:	881a      	ldrh	r2, [r3, #0]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	801a      	strh	r2, [r3, #0]
					break;
 8007432:	e006      	b.n	8007442 <Recognize_Piece_Of_Message+0x132>
			for (i = 0; i < Commands_2_LENGTH; ++i)
 8007434:	89bb      	ldrh	r3, [r7, #12]
 8007436:	3301      	adds	r3, #1
 8007438:	81bb      	strh	r3, [r7, #12]
 800743a:	2224      	movs	r2, #36	; 0x24
 800743c:	89bb      	ldrh	r3, [r7, #12]
 800743e:	4293      	cmp	r3, r2
 8007440:	d3d7      	bcc.n	80073f2 <Recognize_Piece_Of_Message+0xe2>
				}
			}
		}

		if (0 == FLAG_match)
 8007442:	7afb      	ldrb	r3, [r7, #11]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d12a      	bne.n	800749e <Recognize_Piece_Of_Message+0x18e>
		{
			for (i = 0; i < Commands_3_LENGTH; ++i)
 8007448:	2300      	movs	r3, #0
 800744a:	81bb      	strh	r3, [r7, #12]
 800744c:	e023      	b.n	8007496 <Recognize_Piece_Of_Message+0x186>
			{
				FLAG_match = (strcmp(Piece, Commands_3[i].name) ? 0 : 1);
 800744e:	89ba      	ldrh	r2, [r7, #12]
 8007450:	4613      	mov	r3, r2
 8007452:	00db      	lsls	r3, r3, #3
 8007454:	1a9b      	subs	r3, r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4a4f      	ldr	r2, [pc, #316]	; (8007598 <Recognize_Piece_Of_Message+0x288>)
 800745a:	4413      	add	r3, r2
 800745c:	4619      	mov	r1, r3
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7f8 feb6 	bl	80001d0 <strcmp>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	bf0c      	ite	eq
 800746a:	2301      	moveq	r3, #1
 800746c:	2300      	movne	r3, #0
 800746e:	b2db      	uxtb	r3, r3
 8007470:	72fb      	strb	r3, [r7, #11]

				if (1 == FLAG_match)
 8007472:	7afb      	ldrb	r3, [r7, #11]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d10b      	bne.n	8007490 <Recognize_Piece_Of_Message+0x180>
				{
					*foundCommand = Commands_3[i].commandNumber;
 8007478:	89ba      	ldrh	r2, [r7, #12]
 800747a:	4947      	ldr	r1, [pc, #284]	; (8007598 <Recognize_Piece_Of_Message+0x288>)
 800747c:	4613      	mov	r3, r2
 800747e:	00db      	lsls	r3, r3, #3
 8007480:	1a9b      	subs	r3, r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	440b      	add	r3, r1
 8007486:	331a      	adds	r3, #26
 8007488:	881a      	ldrh	r2, [r3, #0]
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	801a      	strh	r2, [r3, #0]
					break;
 800748e:	e006      	b.n	800749e <Recognize_Piece_Of_Message+0x18e>
			for (i = 0; i < Commands_3_LENGTH; ++i)
 8007490:	89bb      	ldrh	r3, [r7, #12]
 8007492:	3301      	adds	r3, #1
 8007494:	81bb      	strh	r3, [r7, #12]
 8007496:	2225      	movs	r2, #37	; 0x25
 8007498:	89bb      	ldrh	r3, [r7, #12]
 800749a:	4293      	cmp	r3, r2
 800749c:	d3d7      	bcc.n	800744e <Recognize_Piece_Of_Message+0x13e>
				}
			}
		}

		if (0 == FLAG_match)
 800749e:	7afb      	ldrb	r3, [r7, #11]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d12a      	bne.n	80074fa <Recognize_Piece_Of_Message+0x1ea>
		{
			for (i = 0; i < Ports_LENGTH; ++i)
 80074a4:	2300      	movs	r3, #0
 80074a6:	81bb      	strh	r3, [r7, #12]
 80074a8:	e023      	b.n	80074f2 <Recognize_Piece_Of_Message+0x1e2>
			{
				FLAG_match = (strcmp(Piece, Ports[i].name) ? 0 : 1);
 80074aa:	89ba      	ldrh	r2, [r7, #12]
 80074ac:	4613      	mov	r3, r2
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	1a9b      	subs	r3, r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	4a39      	ldr	r2, [pc, #228]	; (800759c <Recognize_Piece_Of_Message+0x28c>)
 80074b6:	4413      	add	r3, r2
 80074b8:	4619      	mov	r1, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7f8 fe88 	bl	80001d0 <strcmp>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	bf0c      	ite	eq
 80074c6:	2301      	moveq	r3, #1
 80074c8:	2300      	movne	r3, #0
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	72fb      	strb	r3, [r7, #11]

				if (1 == FLAG_match)
 80074ce:	7afb      	ldrb	r3, [r7, #11]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d10b      	bne.n	80074ec <Recognize_Piece_Of_Message+0x1dc>
				{
					*foundCommand = Ports[i].commandNumber;
 80074d4:	89ba      	ldrh	r2, [r7, #12]
 80074d6:	4931      	ldr	r1, [pc, #196]	; (800759c <Recognize_Piece_Of_Message+0x28c>)
 80074d8:	4613      	mov	r3, r2
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	1a9b      	subs	r3, r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	440b      	add	r3, r1
 80074e2:	331a      	adds	r3, #26
 80074e4:	881a      	ldrh	r2, [r3, #0]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	801a      	strh	r2, [r3, #0]
					break;
 80074ea:	e006      	b.n	80074fa <Recognize_Piece_Of_Message+0x1ea>
			for (i = 0; i < Ports_LENGTH; ++i)
 80074ec:	89bb      	ldrh	r3, [r7, #12]
 80074ee:	3301      	adds	r3, #1
 80074f0:	81bb      	strh	r3, [r7, #12]
 80074f2:	223b      	movs	r2, #59	; 0x3b
 80074f4:	89bb      	ldrh	r3, [r7, #12]
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d3d7      	bcc.n	80074aa <Recognize_Piece_Of_Message+0x19a>
				}
			}
		}

		if (0 == FLAG_match)
 80074fa:	7afb      	ldrb	r3, [r7, #11]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d13a      	bne.n	8007576 <Recognize_Piece_Of_Message+0x266>
		{
			for (i = 0; i < strlen(Piece); ++i)
 8007500:	2300      	movs	r3, #0
 8007502:	81bb      	strh	r3, [r7, #12]
 8007504:	e028      	b.n	8007558 <Recognize_Piece_Of_Message+0x248>
			{
				if ((isdigit(Piece[i])) || ('e' == Piece[i]) || ('E' == Piece[i]) || ('.' == Piece[i]))
 8007506:	f001 fd69 	bl	8008fdc <__locale_ctype_ptr>
 800750a:	4601      	mov	r1, r0
 800750c:	89bb      	ldrh	r3, [r7, #12]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	4413      	add	r3, r2
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	3301      	adds	r3, #1
 8007516:	440b      	add	r3, r1
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	f003 0304 	and.w	r3, r3, #4
 800751e:	2b00      	cmp	r3, #0
 8007520:	d111      	bne.n	8007546 <Recognize_Piece_Of_Message+0x236>
 8007522:	89bb      	ldrh	r3, [r7, #12]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	4413      	add	r3, r2
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	2b65      	cmp	r3, #101	; 0x65
 800752c:	d00b      	beq.n	8007546 <Recognize_Piece_Of_Message+0x236>
 800752e:	89bb      	ldrh	r3, [r7, #12]
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	4413      	add	r3, r2
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	2b45      	cmp	r3, #69	; 0x45
 8007538:	d005      	beq.n	8007546 <Recognize_Piece_Of_Message+0x236>
 800753a:	89bb      	ldrh	r3, [r7, #12]
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	4413      	add	r3, r2
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	2b2e      	cmp	r3, #46	; 0x2e
 8007544:	d105      	bne.n	8007552 <Recognize_Piece_Of_Message+0x242>
				{
					FLAG_isDigit = 1;
 8007546:	2301      	movs	r3, #1
 8007548:	72bb      	strb	r3, [r7, #10]
			for (i = 0; i < strlen(Piece); ++i)
 800754a:	89bb      	ldrh	r3, [r7, #12]
 800754c:	3301      	adds	r3, #1
 800754e:	81bb      	strh	r3, [r7, #12]
 8007550:	e002      	b.n	8007558 <Recognize_Piece_Of_Message+0x248>
				}
				else
				{
					FLAG_isDigit = 0;
 8007552:	2300      	movs	r3, #0
 8007554:	72bb      	strb	r3, [r7, #10]
					break;
 8007556:	e006      	b.n	8007566 <Recognize_Piece_Of_Message+0x256>
			for (i = 0; i < strlen(Piece); ++i)
 8007558:	89bc      	ldrh	r4, [r7, #12]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7f8 fe42 	bl	80001e4 <strlen>
 8007560:	4603      	mov	r3, r0
 8007562:	429c      	cmp	r4, r3
 8007564:	d3cf      	bcc.n	8007506 <Recognize_Piece_Of_Message+0x1f6>
				}
			}

			if (1 == FLAG_isDigit)
 8007566:	7abb      	ldrb	r3, [r7, #10]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d104      	bne.n	8007576 <Recognize_Piece_Of_Message+0x266>
			{
				FLAG_match = 1;
 800756c:	2301      	movs	r3, #1
 800756e:	72fb      	strb	r3, [r7, #11]
				*foundCommand = IS_A_NUMERIC_VALUE;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	2200      	movs	r2, #0
 8007574:	801a      	strh	r2, [r3, #0]
			}
		}
	}

	if (0 == FLAG_match)
 8007576:	7afb      	ldrb	r3, [r7, #11]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <Recognize_Piece_Of_Message+0x270>
		errorCode = COMMAND_NOT_RECOGNIZED;
 800757c:	2325      	movs	r3, #37	; 0x25
 800757e:	73fb      	strb	r3, [r7, #15]

	return errorCode;
 8007580:	7bfb      	ldrb	r3, [r7, #15]
 8007582:	b29b      	uxth	r3, r3
}
 8007584:	4618      	mov	r0, r3
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	bd90      	pop	{r4, r7, pc}
 800758c:	2000000c 	.word	0x2000000c
 8007590:	20000204 	.word	0x20000204
 8007594:	20000450 	.word	0x20000450
 8007598:	20000840 	.word	0x20000840
 800759c:	20000c4c 	.word	0x20000c4c

080075a0 <Recognize_Message>:


static uint16_t Recognize_Message(char tableWithMessagePieces[MAX_NUMBER_OF_PIECES][MAX_LENGTH_OF_A_PIECE], const uint8_t *numberOfPieces, uint16_t *CommandNumbers)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
	ERROR_CODE errorCode = 0x00;
 80075ac:	2300      	movs	r3, #0
 80075ae:	75fb      	strb	r3, [r7, #23]
	uint16_t i = 0;
 80075b0:	2300      	movs	r3, #0
 80075b2:	82bb      	strh	r3, [r7, #20]
	uint16_t command = 0;
 80075b4:	2300      	movs	r3, #0
 80075b6:	827b      	strh	r3, [r7, #18]

	for (i = 0; i < *numberOfPieces; ++i)
 80075b8:	2300      	movs	r3, #0
 80075ba:	82bb      	strh	r3, [r7, #20]
 80075bc:	e01b      	b.n	80075f6 <Recognize_Message+0x56>
	{
		errorCode = Recognize_Piece_Of_Message(tableWithMessagePieces[i], &command);
 80075be:	8aba      	ldrh	r2, [r7, #20]
 80075c0:	4613      	mov	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4413      	add	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	461a      	mov	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	4413      	add	r3, r2
 80075ce:	f107 0212 	add.w	r2, r7, #18
 80075d2:	4611      	mov	r1, r2
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7ff fe9b 	bl	8007310 <Recognize_Piece_Of_Message>
 80075da:	4603      	mov	r3, r0
 80075dc:	75fb      	strb	r3, [r7, #23]
		CommandNumbers[i] = command;
 80075de:	8abb      	ldrh	r3, [r7, #20]
 80075e0:	005b      	lsls	r3, r3, #1
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	4413      	add	r3, r2
 80075e6:	8a7a      	ldrh	r2, [r7, #18]
 80075e8:	801a      	strh	r2, [r3, #0]

		if (0 != errorCode)
 80075ea:	7dfb      	ldrb	r3, [r7, #23]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d109      	bne.n	8007604 <Recognize_Message+0x64>
	for (i = 0; i < *numberOfPieces; ++i)
 80075f0:	8abb      	ldrh	r3, [r7, #20]
 80075f2:	3301      	adds	r3, #1
 80075f4:	82bb      	strh	r3, [r7, #20]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	8aba      	ldrh	r2, [r7, #20]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d3dd      	bcc.n	80075be <Recognize_Message+0x1e>
 8007602:	e000      	b.n	8007606 <Recognize_Message+0x66>
			break;
 8007604:	bf00      	nop
	}

	return errorCode;
 8007606:	7dfb      	ldrb	r3, [r7, #23]
 8007608:	b29b      	uxth	r3, r3
}
 800760a:	4618      	mov	r0, r3
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
	...

08007614 <Do_The_Command>:


static uint16_t Do_The_Command(const char tableWithMessagePieces[MAX_NUMBER_OF_PIECES][MAX_LENGTH_OF_A_PIECE], const uint8_t *numberOfPieces, const uint16_t *CommandNumbers, char *SCPI_buffer)
{
 8007614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007616:	b087      	sub	sp, #28
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
 8007620:	603b      	str	r3, [r7, #0]
	ERROR_CODE errorCode = 0x00;
 8007622:	2300      	movs	r3, #0
 8007624:	75fb      	strb	r3, [r7, #23]
	uint8_t command_found_FLAG = 0;
 8007626:	2300      	movs	r3, #0
 8007628:	75bb      	strb	r3, [r7, #22]

	if (0 == errorCode)
 800762a:	7dfb      	ldrb	r3, [r7, #23]
 800762c:	2b00      	cmp	r3, #0
 800762e:	f040 82bd 	bne.w	8007bac <Do_The_Command+0x598>
	{
		if ((1 == *numberOfPieces) && (0 == command_found_FLAG))
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	2b01      	cmp	r3, #1
 8007638:	f040 81f2 	bne.w	8007a20 <Do_The_Command+0x40c>
 800763c:	7dbb      	ldrb	r3, [r7, #22]
 800763e:	2b00      	cmp	r3, #0
 8007640:	f040 81ee 	bne.w	8007a20 <Do_The_Command+0x40c>
		{
			switch(CommandNumbers[0])
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	881b      	ldrh	r3, [r3, #0]
 8007648:	3b01      	subs	r3, #1
 800764a:	2b11      	cmp	r3, #17
 800764c:	f200 81c2 	bhi.w	80079d4 <Do_The_Command+0x3c0>
 8007650:	a201      	add	r2, pc, #4	; (adr r2, 8007658 <Do_The_Command+0x44>)
 8007652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007656:	bf00      	nop
 8007658:	080076a1 	.word	0x080076a1
 800765c:	080076b9 	.word	0x080076b9
 8007660:	080076eb 	.word	0x080076eb
 8007664:	08007721 	.word	0x08007721
 8007668:	08007757 	.word	0x08007757
 800766c:	0800776f 	.word	0x0800776f
 8007670:	080077a1 	.word	0x080077a1
 8007674:	080077d7 	.word	0x080077d7
 8007678:	08007809 	.word	0x08007809
 800767c:	0800783f 	.word	0x0800783f
 8007680:	08007871 	.word	0x08007871
 8007684:	08007889 	.word	0x08007889
 8007688:	080078bb 	.word	0x080078bb
 800768c:	080078ed 	.word	0x080078ed
 8007690:	08007923 	.word	0x08007923
 8007694:	08007959 	.word	0x08007959
 8007698:	0800798b 	.word	0x0800798b
 800769c:	080079a3 	.word	0x080079a3
				case 0x01:		//*CLS
				{
					//TODO
		//			errorCode = Clear_Status_Data_Structures();
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "CLS Done!");
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	49ce      	ldr	r1, [pc, #824]	; (80079dc <Do_The_Command+0x3c8>)
 80076a4:	461a      	mov	r2, r3
 80076a6:	460b      	mov	r3, r1
 80076a8:	cb03      	ldmia	r3!, {r0, r1}
 80076aa:	6010      	str	r0, [r2, #0]
 80076ac:	6051      	str	r1, [r2, #4]
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	8113      	strh	r3, [r2, #8]
					command_found_FLAG = 1;
 80076b2:	2301      	movs	r3, #1
 80076b4:	75bb      	strb	r3, [r7, #22]
					break;
 80076b6:	e1b4      	b.n	8007a22 <Do_The_Command+0x40e>
				}
				case 0x02:		//*ESE
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*ESE\" is not applicable for this device!");
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	4ac9      	ldr	r2, [pc, #804]	; (80079e0 <Do_The_Command+0x3cc>)
 80076bc:	4614      	mov	r4, r2
 80076be:	469c      	mov	ip, r3
 80076c0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80076c4:	4665      	mov	r5, ip
 80076c6:	4626      	mov	r6, r4
 80076c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80076ca:	6028      	str	r0, [r5, #0]
 80076cc:	6069      	str	r1, [r5, #4]
 80076ce:	60aa      	str	r2, [r5, #8]
 80076d0:	60eb      	str	r3, [r5, #12]
 80076d2:	3410      	adds	r4, #16
 80076d4:	f10c 0c10 	add.w	ip, ip, #16
 80076d8:	4574      	cmp	r4, lr
 80076da:	d1f3      	bne.n	80076c4 <Do_The_Command+0xb0>
 80076dc:	4662      	mov	r2, ip
 80076de:	4623      	mov	r3, r4
 80076e0:	881b      	ldrh	r3, [r3, #0]
 80076e2:	8013      	strh	r3, [r2, #0]
					command_found_FLAG = 1;
 80076e4:	2301      	movs	r3, #1
 80076e6:	75bb      	strb	r3, [r7, #22]
					break;
 80076e8:	e19b      	b.n	8007a22 <Do_The_Command+0x40e>
				}
				case 0x03:		//*ESE?
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*ESE?\" is not applicable for this device!");
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	4abd      	ldr	r2, [pc, #756]	; (80079e4 <Do_The_Command+0x3d0>)
 80076ee:	4614      	mov	r4, r2
 80076f0:	469c      	mov	ip, r3
 80076f2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80076f6:	4665      	mov	r5, ip
 80076f8:	4626      	mov	r6, r4
 80076fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80076fc:	6028      	str	r0, [r5, #0]
 80076fe:	6069      	str	r1, [r5, #4]
 8007700:	60aa      	str	r2, [r5, #8]
 8007702:	60eb      	str	r3, [r5, #12]
 8007704:	3410      	adds	r4, #16
 8007706:	f10c 0c10 	add.w	ip, ip, #16
 800770a:	4574      	cmp	r4, lr
 800770c:	d1f3      	bne.n	80076f6 <Do_The_Command+0xe2>
 800770e:	4663      	mov	r3, ip
 8007710:	4622      	mov	r2, r4
 8007712:	8811      	ldrh	r1, [r2, #0]
 8007714:	7892      	ldrb	r2, [r2, #2]
 8007716:	8019      	strh	r1, [r3, #0]
 8007718:	709a      	strb	r2, [r3, #2]
					command_found_FLAG = 1;
 800771a:	2301      	movs	r3, #1
 800771c:	75bb      	strb	r3, [r7, #22]
					break;
 800771e:	e180      	b.n	8007a22 <Do_The_Command+0x40e>
				}
				case 0x04:		//*ESR?
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*ESR?\" is not applicable for this device!");
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	4ab1      	ldr	r2, [pc, #708]	; (80079e8 <Do_The_Command+0x3d4>)
 8007724:	4614      	mov	r4, r2
 8007726:	469c      	mov	ip, r3
 8007728:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800772c:	4665      	mov	r5, ip
 800772e:	4626      	mov	r6, r4
 8007730:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007732:	6028      	str	r0, [r5, #0]
 8007734:	6069      	str	r1, [r5, #4]
 8007736:	60aa      	str	r2, [r5, #8]
 8007738:	60eb      	str	r3, [r5, #12]
 800773a:	3410      	adds	r4, #16
 800773c:	f10c 0c10 	add.w	ip, ip, #16
 8007740:	4574      	cmp	r4, lr
 8007742:	d1f3      	bne.n	800772c <Do_The_Command+0x118>
 8007744:	4663      	mov	r3, ip
 8007746:	4622      	mov	r2, r4
 8007748:	8811      	ldrh	r1, [r2, #0]
 800774a:	7892      	ldrb	r2, [r2, #2]
 800774c:	8019      	strh	r1, [r3, #0]
 800774e:	709a      	strb	r2, [r3, #2]
					command_found_FLAG = 1;
 8007750:	2301      	movs	r3, #1
 8007752:	75bb      	strb	r3, [r7, #22]
					break;
 8007754:	e165      	b.n	8007a22 <Do_The_Command+0x40e>
				}
				case 0x05:		//*IDN?
				{
					sprintf(SCPI_buffer, "Manufacturer:	Bartosz Jasko\n\r"
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	4aa4      	ldr	r2, [pc, #656]	; (80079ec <Do_The_Command+0x3d8>)
 800775a:	4618      	mov	r0, r3
 800775c:	4611      	mov	r1, r2
 800775e:	f240 134f 	movw	r3, #335	; 0x14f
 8007762:	461a      	mov	r2, r3
 8007764:	f001 fc5a 	bl	800901c <memcpy>
							"E-mail: bjasko97@gmail.com\n\r"
							"Version: 1.1\n\r"
							"Date: 21.11.2019\n\r"
							"This device is mostly compatible with SCPI protocol. Due to limited functionality there was no need to implement all SCPI commands and queries.\n\r"
							"In case of any bugs and mistakes, please contact the author of this code and-or device via E-mail.\n\r");
					command_found_FLAG = 1;
 8007768:	2301      	movs	r3, #1
 800776a:	75bb      	strb	r3, [r7, #22]
					break;
 800776c:	e159      	b.n	8007a22 <Do_The_Command+0x40e>
				}
				case 0x06:		//*OPC
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*OPC\" is not applicable for this device!");
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	4a9f      	ldr	r2, [pc, #636]	; (80079f0 <Do_The_Command+0x3dc>)
 8007772:	4614      	mov	r4, r2
 8007774:	469c      	mov	ip, r3
 8007776:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800777a:	4665      	mov	r5, ip
 800777c:	4626      	mov	r6, r4
 800777e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007780:	6028      	str	r0, [r5, #0]
 8007782:	6069      	str	r1, [r5, #4]
 8007784:	60aa      	str	r2, [r5, #8]
 8007786:	60eb      	str	r3, [r5, #12]
 8007788:	3410      	adds	r4, #16
 800778a:	f10c 0c10 	add.w	ip, ip, #16
 800778e:	4574      	cmp	r4, lr
 8007790:	d1f3      	bne.n	800777a <Do_The_Command+0x166>
 8007792:	4662      	mov	r2, ip
 8007794:	4623      	mov	r3, r4
 8007796:	881b      	ldrh	r3, [r3, #0]
 8007798:	8013      	strh	r3, [r2, #0]
					command_found_FLAG = 1;
 800779a:	2301      	movs	r3, #1
 800779c:	75bb      	strb	r3, [r7, #22]
					break;
 800779e:	e140      	b.n	8007a22 <Do_The_Command+0x40e>
				}
				case 0x07:		//*OPC?
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*OPC?\" is not applicable for this device!");
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	4a94      	ldr	r2, [pc, #592]	; (80079f4 <Do_The_Command+0x3e0>)
 80077a4:	4614      	mov	r4, r2
 80077a6:	469c      	mov	ip, r3
 80077a8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80077ac:	4665      	mov	r5, ip
 80077ae:	4626      	mov	r6, r4
 80077b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80077b2:	6028      	str	r0, [r5, #0]
 80077b4:	6069      	str	r1, [r5, #4]
 80077b6:	60aa      	str	r2, [r5, #8]
 80077b8:	60eb      	str	r3, [r5, #12]
 80077ba:	3410      	adds	r4, #16
 80077bc:	f10c 0c10 	add.w	ip, ip, #16
 80077c0:	4574      	cmp	r4, lr
 80077c2:	d1f3      	bne.n	80077ac <Do_The_Command+0x198>
 80077c4:	4663      	mov	r3, ip
 80077c6:	4622      	mov	r2, r4
 80077c8:	8811      	ldrh	r1, [r2, #0]
 80077ca:	7892      	ldrb	r2, [r2, #2]
 80077cc:	8019      	strh	r1, [r3, #0]
 80077ce:	709a      	strb	r2, [r3, #2]
					command_found_FLAG = 1;
 80077d0:	2301      	movs	r3, #1
 80077d2:	75bb      	strb	r3, [r7, #22]
					break;
 80077d4:	e125      	b.n	8007a22 <Do_The_Command+0x40e>
				}
				case 0x08:		//*PSC
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*PSC\" is not applicable for this device!");
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	4a87      	ldr	r2, [pc, #540]	; (80079f8 <Do_The_Command+0x3e4>)
 80077da:	4614      	mov	r4, r2
 80077dc:	469c      	mov	ip, r3
 80077de:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80077e2:	4665      	mov	r5, ip
 80077e4:	4626      	mov	r6, r4
 80077e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80077e8:	6028      	str	r0, [r5, #0]
 80077ea:	6069      	str	r1, [r5, #4]
 80077ec:	60aa      	str	r2, [r5, #8]
 80077ee:	60eb      	str	r3, [r5, #12]
 80077f0:	3410      	adds	r4, #16
 80077f2:	f10c 0c10 	add.w	ip, ip, #16
 80077f6:	4574      	cmp	r4, lr
 80077f8:	d1f3      	bne.n	80077e2 <Do_The_Command+0x1ce>
 80077fa:	4662      	mov	r2, ip
 80077fc:	4623      	mov	r3, r4
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	8013      	strh	r3, [r2, #0]
					command_found_FLAG = 1;
 8007802:	2301      	movs	r3, #1
 8007804:	75bb      	strb	r3, [r7, #22]
					break;
 8007806:	e10c      	b.n	8007a22 <Do_The_Command+0x40e>
				}
				case 0x09:		//*PSC?
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*PSC?\" is not applicable for this device!");
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	4a7c      	ldr	r2, [pc, #496]	; (80079fc <Do_The_Command+0x3e8>)
 800780c:	4614      	mov	r4, r2
 800780e:	469c      	mov	ip, r3
 8007810:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8007814:	4665      	mov	r5, ip
 8007816:	4626      	mov	r6, r4
 8007818:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800781a:	6028      	str	r0, [r5, #0]
 800781c:	6069      	str	r1, [r5, #4]
 800781e:	60aa      	str	r2, [r5, #8]
 8007820:	60eb      	str	r3, [r5, #12]
 8007822:	3410      	adds	r4, #16
 8007824:	f10c 0c10 	add.w	ip, ip, #16
 8007828:	4574      	cmp	r4, lr
 800782a:	d1f3      	bne.n	8007814 <Do_The_Command+0x200>
 800782c:	4663      	mov	r3, ip
 800782e:	4622      	mov	r2, r4
 8007830:	8811      	ldrh	r1, [r2, #0]
 8007832:	7892      	ldrb	r2, [r2, #2]
 8007834:	8019      	strh	r1, [r3, #0]
 8007836:	709a      	strb	r2, [r3, #2]
					command_found_FLAG = 1;
 8007838:	2301      	movs	r3, #1
 800783a:	75bb      	strb	r3, [r7, #22]
					break;
 800783c:	e0f1      	b.n	8007a22 <Do_The_Command+0x40e>
				}
				case 0x0A:		//*RCL
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*RCL\" is not applicable for this device!");
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	4a6f      	ldr	r2, [pc, #444]	; (8007a00 <Do_The_Command+0x3ec>)
 8007842:	4614      	mov	r4, r2
 8007844:	469c      	mov	ip, r3
 8007846:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800784a:	4665      	mov	r5, ip
 800784c:	4626      	mov	r6, r4
 800784e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007850:	6028      	str	r0, [r5, #0]
 8007852:	6069      	str	r1, [r5, #4]
 8007854:	60aa      	str	r2, [r5, #8]
 8007856:	60eb      	str	r3, [r5, #12]
 8007858:	3410      	adds	r4, #16
 800785a:	f10c 0c10 	add.w	ip, ip, #16
 800785e:	4574      	cmp	r4, lr
 8007860:	d1f3      	bne.n	800784a <Do_The_Command+0x236>
 8007862:	4662      	mov	r2, ip
 8007864:	4623      	mov	r3, r4
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	8013      	strh	r3, [r2, #0]
					command_found_FLAG = 1;
 800786a:	2301      	movs	r3, #1
 800786c:	75bb      	strb	r3, [r7, #22]
					break;
 800786e:	e0d8      	b.n	8007a22 <Do_The_Command+0x40e>
				case 0x0B:		//*RST
				{
					//TODO
					//	errorCode = Reset_all_settings_to_default();
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "RST Done!");
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	4964      	ldr	r1, [pc, #400]	; (8007a04 <Do_The_Command+0x3f0>)
 8007874:	461a      	mov	r2, r3
 8007876:	460b      	mov	r3, r1
 8007878:	cb03      	ldmia	r3!, {r0, r1}
 800787a:	6010      	str	r0, [r2, #0]
 800787c:	6051      	str	r1, [r2, #4]
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	8113      	strh	r3, [r2, #8]
					command_found_FLAG = 1;
 8007882:	2301      	movs	r3, #1
 8007884:	75bb      	strb	r3, [r7, #22]
					break;
 8007886:	e0cc      	b.n	8007a22 <Do_The_Command+0x40e>
				}
				case 0x0C:		//*SAV
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*SAV\" is not applicable for this device!");
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	4a5f      	ldr	r2, [pc, #380]	; (8007a08 <Do_The_Command+0x3f4>)
 800788c:	4614      	mov	r4, r2
 800788e:	469c      	mov	ip, r3
 8007890:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8007894:	4665      	mov	r5, ip
 8007896:	4626      	mov	r6, r4
 8007898:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800789a:	6028      	str	r0, [r5, #0]
 800789c:	6069      	str	r1, [r5, #4]
 800789e:	60aa      	str	r2, [r5, #8]
 80078a0:	60eb      	str	r3, [r5, #12]
 80078a2:	3410      	adds	r4, #16
 80078a4:	f10c 0c10 	add.w	ip, ip, #16
 80078a8:	4574      	cmp	r4, lr
 80078aa:	d1f3      	bne.n	8007894 <Do_The_Command+0x280>
 80078ac:	4662      	mov	r2, ip
 80078ae:	4623      	mov	r3, r4
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	8013      	strh	r3, [r2, #0]
					command_found_FLAG = 1;
 80078b4:	2301      	movs	r3, #1
 80078b6:	75bb      	strb	r3, [r7, #22]
					break;
 80078b8:	e0b3      	b.n	8007a22 <Do_The_Command+0x40e>
				}
				case 0x0D:		//*SRE
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*SRE\" is not applicable for this device!");
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	4a53      	ldr	r2, [pc, #332]	; (8007a0c <Do_The_Command+0x3f8>)
 80078be:	4614      	mov	r4, r2
 80078c0:	469c      	mov	ip, r3
 80078c2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80078c6:	4665      	mov	r5, ip
 80078c8:	4626      	mov	r6, r4
 80078ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80078cc:	6028      	str	r0, [r5, #0]
 80078ce:	6069      	str	r1, [r5, #4]
 80078d0:	60aa      	str	r2, [r5, #8]
 80078d2:	60eb      	str	r3, [r5, #12]
 80078d4:	3410      	adds	r4, #16
 80078d6:	f10c 0c10 	add.w	ip, ip, #16
 80078da:	4574      	cmp	r4, lr
 80078dc:	d1f3      	bne.n	80078c6 <Do_The_Command+0x2b2>
 80078de:	4662      	mov	r2, ip
 80078e0:	4623      	mov	r3, r4
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	8013      	strh	r3, [r2, #0]
					command_found_FLAG = 1;
 80078e6:	2301      	movs	r3, #1
 80078e8:	75bb      	strb	r3, [r7, #22]
					break;
 80078ea:	e09a      	b.n	8007a22 <Do_The_Command+0x40e>
				}
				case 0x0E:		//*SRE?
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*SRE?\" is not applicable for this device!");
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	4a48      	ldr	r2, [pc, #288]	; (8007a10 <Do_The_Command+0x3fc>)
 80078f0:	4614      	mov	r4, r2
 80078f2:	469c      	mov	ip, r3
 80078f4:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80078f8:	4665      	mov	r5, ip
 80078fa:	4626      	mov	r6, r4
 80078fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80078fe:	6028      	str	r0, [r5, #0]
 8007900:	6069      	str	r1, [r5, #4]
 8007902:	60aa      	str	r2, [r5, #8]
 8007904:	60eb      	str	r3, [r5, #12]
 8007906:	3410      	adds	r4, #16
 8007908:	f10c 0c10 	add.w	ip, ip, #16
 800790c:	4574      	cmp	r4, lr
 800790e:	d1f3      	bne.n	80078f8 <Do_The_Command+0x2e4>
 8007910:	4663      	mov	r3, ip
 8007912:	4622      	mov	r2, r4
 8007914:	8811      	ldrh	r1, [r2, #0]
 8007916:	7892      	ldrb	r2, [r2, #2]
 8007918:	8019      	strh	r1, [r3, #0]
 800791a:	709a      	strb	r2, [r3, #2]
					command_found_FLAG = 1;
 800791c:	2301      	movs	r3, #1
 800791e:	75bb      	strb	r3, [r7, #22]
					break;
 8007920:	e07f      	b.n	8007a22 <Do_The_Command+0x40e>
				}
				case 0x0F:		//*STB?
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*STB?\" is not applicable for this device!");
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	4a3b      	ldr	r2, [pc, #236]	; (8007a14 <Do_The_Command+0x400>)
 8007926:	4614      	mov	r4, r2
 8007928:	469c      	mov	ip, r3
 800792a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800792e:	4665      	mov	r5, ip
 8007930:	4626      	mov	r6, r4
 8007932:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007934:	6028      	str	r0, [r5, #0]
 8007936:	6069      	str	r1, [r5, #4]
 8007938:	60aa      	str	r2, [r5, #8]
 800793a:	60eb      	str	r3, [r5, #12]
 800793c:	3410      	adds	r4, #16
 800793e:	f10c 0c10 	add.w	ip, ip, #16
 8007942:	4574      	cmp	r4, lr
 8007944:	d1f3      	bne.n	800792e <Do_The_Command+0x31a>
 8007946:	4663      	mov	r3, ip
 8007948:	4622      	mov	r2, r4
 800794a:	8811      	ldrh	r1, [r2, #0]
 800794c:	7892      	ldrb	r2, [r2, #2]
 800794e:	8019      	strh	r1, [r3, #0]
 8007950:	709a      	strb	r2, [r3, #2]
					command_found_FLAG = 1;
 8007952:	2301      	movs	r3, #1
 8007954:	75bb      	strb	r3, [r7, #22]
					break;
 8007956:	e064      	b.n	8007a22 <Do_The_Command+0x40e>
				}
				case 0x10:		//*TRG
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*TRG\" is not applicable for this device!");
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	4a2f      	ldr	r2, [pc, #188]	; (8007a18 <Do_The_Command+0x404>)
 800795c:	4614      	mov	r4, r2
 800795e:	469c      	mov	ip, r3
 8007960:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8007964:	4665      	mov	r5, ip
 8007966:	4626      	mov	r6, r4
 8007968:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800796a:	6028      	str	r0, [r5, #0]
 800796c:	6069      	str	r1, [r5, #4]
 800796e:	60aa      	str	r2, [r5, #8]
 8007970:	60eb      	str	r3, [r5, #12]
 8007972:	3410      	adds	r4, #16
 8007974:	f10c 0c10 	add.w	ip, ip, #16
 8007978:	4574      	cmp	r4, lr
 800797a:	d1f3      	bne.n	8007964 <Do_The_Command+0x350>
 800797c:	4662      	mov	r2, ip
 800797e:	4623      	mov	r3, r4
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	8013      	strh	r3, [r2, #0]
					command_found_FLAG = 1;
 8007984:	2301      	movs	r3, #1
 8007986:	75bb      	strb	r3, [r7, #22]
					break;
 8007988:	e04b      	b.n	8007a22 <Do_The_Command+0x40e>
				case 0x11:		//*TST
				{
					//TODO
					//	errorCode = Test_Device(SCPI_buffer);
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "RST Done!");
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	491d      	ldr	r1, [pc, #116]	; (8007a04 <Do_The_Command+0x3f0>)
 800798e:	461a      	mov	r2, r3
 8007990:	460b      	mov	r3, r1
 8007992:	cb03      	ldmia	r3!, {r0, r1}
 8007994:	6010      	str	r0, [r2, #0]
 8007996:	6051      	str	r1, [r2, #4]
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	8113      	strh	r3, [r2, #8]
					command_found_FLAG = 1;
 800799c:	2301      	movs	r3, #1
 800799e:	75bb      	strb	r3, [r7, #22]
					break;
 80079a0:	e03f      	b.n	8007a22 <Do_The_Command+0x40e>
				}
				case 0x12:		//*WAI
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Command \"*WAI\" is not applicable for this device!");
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	4a1d      	ldr	r2, [pc, #116]	; (8007a1c <Do_The_Command+0x408>)
 80079a6:	4614      	mov	r4, r2
 80079a8:	469c      	mov	ip, r3
 80079aa:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80079ae:	4665      	mov	r5, ip
 80079b0:	4626      	mov	r6, r4
 80079b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80079b4:	6028      	str	r0, [r5, #0]
 80079b6:	6069      	str	r1, [r5, #4]
 80079b8:	60aa      	str	r2, [r5, #8]
 80079ba:	60eb      	str	r3, [r5, #12]
 80079bc:	3410      	adds	r4, #16
 80079be:	f10c 0c10 	add.w	ip, ip, #16
 80079c2:	4574      	cmp	r4, lr
 80079c4:	d1f3      	bne.n	80079ae <Do_The_Command+0x39a>
 80079c6:	4662      	mov	r2, ip
 80079c8:	4623      	mov	r3, r4
 80079ca:	881b      	ldrh	r3, [r3, #0]
 80079cc:	8013      	strh	r3, [r2, #0]
					command_found_FLAG = 1;
 80079ce:	2301      	movs	r3, #1
 80079d0:	75bb      	strb	r3, [r7, #22]
					break;
 80079d2:	e026      	b.n	8007a22 <Do_The_Command+0x40e>
				}
				default:
				{
					command_found_FLAG = 0;
 80079d4:	2300      	movs	r3, #0
 80079d6:	75bb      	strb	r3, [r7, #22]
					break;
 80079d8:	e023      	b.n	8007a22 <Do_The_Command+0x40e>
 80079da:	bf00      	nop
 80079dc:	0800b460 	.word	0x0800b460
 80079e0:	0800b46c 	.word	0x0800b46c
 80079e4:	0800b4a0 	.word	0x0800b4a0
 80079e8:	0800b4d4 	.word	0x0800b4d4
 80079ec:	0800b508 	.word	0x0800b508
 80079f0:	0800b658 	.word	0x0800b658
 80079f4:	0800b68c 	.word	0x0800b68c
 80079f8:	0800b6c0 	.word	0x0800b6c0
 80079fc:	0800b6f4 	.word	0x0800b6f4
 8007a00:	0800b728 	.word	0x0800b728
 8007a04:	0800b75c 	.word	0x0800b75c
 8007a08:	0800b768 	.word	0x0800b768
 8007a0c:	0800b79c 	.word	0x0800b79c
 8007a10:	0800b7d0 	.word	0x0800b7d0
 8007a14:	0800b804 	.word	0x0800b804
 8007a18:	0800b838 	.word	0x0800b838
 8007a1c:	0800b86c 	.word	0x0800b86c
				}
			}
		}
 8007a20:	bf00      	nop

		if (0 == command_found_FLAG)
 8007a22:	7dbb      	ldrb	r3, [r7, #22]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f040 80c1 	bne.w	8007bac <Do_The_Command+0x598>
		{
			switch(CommandNumbers[0])
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	881b      	ldrh	r3, [r3, #0]
 8007a2e:	3b20      	subs	r3, #32
 8007a30:	2b0a      	cmp	r3, #10
 8007a32:	f200 80b6 	bhi.w	8007ba2 <Do_The_Command+0x58e>
 8007a36:	a201      	add	r2, pc, #4	; (adr r2, 8007a3c <Do_The_Command+0x428>)
 8007a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3c:	08007a69 	.word	0x08007a69
 8007a40:	08007a87 	.word	0x08007a87
 8007a44:	08007aa5 	.word	0x08007aa5
 8007a48:	08007abb 	.word	0x08007abb
 8007a4c:	08007ad9 	.word	0x08007ad9
 8007a50:	08007af7 	.word	0x08007af7
 8007a54:	08007b15 	.word	0x08007b15
 8007a58:	08007b33 	.word	0x08007b33
 8007a5c:	08007b51 	.word	0x08007b51
 8007a60:	08007b6f 	.word	0x08007b6f
 8007a64:	08007b8d 	.word	0x08007b8d
			{
				case 0x20:		//ABOR, ABORT
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Not applicable");
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	4a54      	ldr	r2, [pc, #336]	; (8007bbc <Do_The_Command+0x5a8>)
 8007a6c:	461c      	mov	r4, r3
 8007a6e:	4613      	mov	r3, r2
 8007a70:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007a72:	6020      	str	r0, [r4, #0]
 8007a74:	6061      	str	r1, [r4, #4]
 8007a76:	60a2      	str	r2, [r4, #8]
 8007a78:	881a      	ldrh	r2, [r3, #0]
 8007a7a:	789b      	ldrb	r3, [r3, #2]
 8007a7c:	81a2      	strh	r2, [r4, #12]
 8007a7e:	73a3      	strb	r3, [r4, #14]
					command_found_FLAG = 1;
 8007a80:	2301      	movs	r3, #1
 8007a82:	75bb      	strb	r3, [r7, #22]
					break;
 8007a84:	e093      	b.n	8007bae <Do_The_Command+0x59a>
				}
				case 0x21:		//CAL, CALIBRATION
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Not applicable");
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	4a4c      	ldr	r2, [pc, #304]	; (8007bbc <Do_The_Command+0x5a8>)
 8007a8a:	461c      	mov	r4, r3
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007a90:	6020      	str	r0, [r4, #0]
 8007a92:	6061      	str	r1, [r4, #4]
 8007a94:	60a2      	str	r2, [r4, #8]
 8007a96:	881a      	ldrh	r2, [r3, #0]
 8007a98:	789b      	ldrb	r3, [r3, #2]
 8007a9a:	81a2      	strh	r2, [r4, #12]
 8007a9c:	73a3      	strb	r3, [r4, #14]
					command_found_FLAG = 1;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	75bb      	strb	r3, [r7, #22]
					break;
 8007aa2:	e084      	b.n	8007bae <Do_The_Command+0x59a>
				}
				case 0x22:		//SOUR, SOURCE
				{
					errorCode = Source_Command(tableWithMessagePieces, numberOfPieces, CommandNumbers, SCPI_buffer);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	68b9      	ldr	r1, [r7, #8]
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f7ff f898 	bl	8006be0 <Source_Command>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	75fb      	strb	r3, [r7, #23]
					if (SEND_DEBUG_ANSWERS)
					command_found_FLAG = 1;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	75bb      	strb	r3, [r7, #22]
					break;
 8007ab8:	e079      	b.n	8007bae <Do_The_Command+0x59a>
				}
				case 0x23:		//DISP, DISPLAY
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Not applicable");
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	4a3f      	ldr	r2, [pc, #252]	; (8007bbc <Do_The_Command+0x5a8>)
 8007abe:	461c      	mov	r4, r3
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007ac4:	6020      	str	r0, [r4, #0]
 8007ac6:	6061      	str	r1, [r4, #4]
 8007ac8:	60a2      	str	r2, [r4, #8]
 8007aca:	881a      	ldrh	r2, [r3, #0]
 8007acc:	789b      	ldrb	r3, [r3, #2]
 8007ace:	81a2      	strh	r2, [r4, #12]
 8007ad0:	73a3      	strb	r3, [r4, #14]
					command_found_FLAG = 1;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	75bb      	strb	r3, [r7, #22]
					break;
 8007ad6:	e06a      	b.n	8007bae <Do_The_Command+0x59a>
				}
				case 0x24:		//INIT, INITIATE
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Not applicable");
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	4a38      	ldr	r2, [pc, #224]	; (8007bbc <Do_The_Command+0x5a8>)
 8007adc:	461c      	mov	r4, r3
 8007ade:	4613      	mov	r3, r2
 8007ae0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007ae2:	6020      	str	r0, [r4, #0]
 8007ae4:	6061      	str	r1, [r4, #4]
 8007ae6:	60a2      	str	r2, [r4, #8]
 8007ae8:	881a      	ldrh	r2, [r3, #0]
 8007aea:	789b      	ldrb	r3, [r3, #2]
 8007aec:	81a2      	strh	r2, [r4, #12]
 8007aee:	73a3      	strb	r3, [r4, #14]
					command_found_FLAG = 1;
 8007af0:	2301      	movs	r3, #1
 8007af2:	75bb      	strb	r3, [r7, #22]
					break;
 8007af4:	e05b      	b.n	8007bae <Do_The_Command+0x59a>
				}
				case 0x25:		//MEAS, MEASURE
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Not applicable");
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	4a30      	ldr	r2, [pc, #192]	; (8007bbc <Do_The_Command+0x5a8>)
 8007afa:	461c      	mov	r4, r3
 8007afc:	4613      	mov	r3, r2
 8007afe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007b00:	6020      	str	r0, [r4, #0]
 8007b02:	6061      	str	r1, [r4, #4]
 8007b04:	60a2      	str	r2, [r4, #8]
 8007b06:	881a      	ldrh	r2, [r3, #0]
 8007b08:	789b      	ldrb	r3, [r3, #2]
 8007b0a:	81a2      	strh	r2, [r4, #12]
 8007b0c:	73a3      	strb	r3, [r4, #14]
					command_found_FLAG = 1;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	75bb      	strb	r3, [r7, #22]
					break;
 8007b12:	e04c      	b.n	8007bae <Do_The_Command+0x59a>
				}
				case 0x26:		//OUTP, OUTPUT
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Not applicable");
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	4a29      	ldr	r2, [pc, #164]	; (8007bbc <Do_The_Command+0x5a8>)
 8007b18:	461c      	mov	r4, r3
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007b1e:	6020      	str	r0, [r4, #0]
 8007b20:	6061      	str	r1, [r4, #4]
 8007b22:	60a2      	str	r2, [r4, #8]
 8007b24:	881a      	ldrh	r2, [r3, #0]
 8007b26:	789b      	ldrb	r3, [r3, #2]
 8007b28:	81a2      	strh	r2, [r4, #12]
 8007b2a:	73a3      	strb	r3, [r4, #14]
					command_found_FLAG = 1;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	75bb      	strb	r3, [r7, #22]
					break;
 8007b30:	e03d      	b.n	8007bae <Do_The_Command+0x59a>
				}
				case 0x27:		//STAT, STATUS
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Not applicable");
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	4a21      	ldr	r2, [pc, #132]	; (8007bbc <Do_The_Command+0x5a8>)
 8007b36:	461c      	mov	r4, r3
 8007b38:	4613      	mov	r3, r2
 8007b3a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007b3c:	6020      	str	r0, [r4, #0]
 8007b3e:	6061      	str	r1, [r4, #4]
 8007b40:	60a2      	str	r2, [r4, #8]
 8007b42:	881a      	ldrh	r2, [r3, #0]
 8007b44:	789b      	ldrb	r3, [r3, #2]
 8007b46:	81a2      	strh	r2, [r4, #12]
 8007b48:	73a3      	strb	r3, [r4, #14]
					command_found_FLAG = 1;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	75bb      	strb	r3, [r7, #22]
					break;
 8007b4e:	e02e      	b.n	8007bae <Do_The_Command+0x59a>
				}
				case 0x28:		//SYST, SYSTEM
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Not applicable");
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	4a1a      	ldr	r2, [pc, #104]	; (8007bbc <Do_The_Command+0x5a8>)
 8007b54:	461c      	mov	r4, r3
 8007b56:	4613      	mov	r3, r2
 8007b58:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007b5a:	6020      	str	r0, [r4, #0]
 8007b5c:	6061      	str	r1, [r4, #4]
 8007b5e:	60a2      	str	r2, [r4, #8]
 8007b60:	881a      	ldrh	r2, [r3, #0]
 8007b62:	789b      	ldrb	r3, [r3, #2]
 8007b64:	81a2      	strh	r2, [r4, #12]
 8007b66:	73a3      	strb	r3, [r4, #14]
					command_found_FLAG = 1;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	75bb      	strb	r3, [r7, #22]
					break;
 8007b6c:	e01f      	b.n	8007bae <Do_The_Command+0x59a>
				}
				case 0x29:		//TRIG, TRIGGER
				{
					if (SEND_DEBUG_ANSWERS)
						sprintf(SCPI_buffer, "Not applicable");
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	4a12      	ldr	r2, [pc, #72]	; (8007bbc <Do_The_Command+0x5a8>)
 8007b72:	461c      	mov	r4, r3
 8007b74:	4613      	mov	r3, r2
 8007b76:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007b78:	6020      	str	r0, [r4, #0]
 8007b7a:	6061      	str	r1, [r4, #4]
 8007b7c:	60a2      	str	r2, [r4, #8]
 8007b7e:	881a      	ldrh	r2, [r3, #0]
 8007b80:	789b      	ldrb	r3, [r3, #2]
 8007b82:	81a2      	strh	r2, [r4, #12]
 8007b84:	73a3      	strb	r3, [r4, #14]
					command_found_FLAG = 1;
 8007b86:	2301      	movs	r3, #1
 8007b88:	75bb      	strb	r3, [r7, #22]
					break;
 8007b8a:	e010      	b.n	8007bae <Do_The_Command+0x59a>
				}
				case 0x2A:		//SET
				{
					errorCode = Set_Command(tableWithMessagePieces, numberOfPieces, CommandNumbers, SCPI_buffer);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	68b9      	ldr	r1, [r7, #8]
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f7ff f9b2 	bl	8006efc <Set_Command>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	75fb      	strb	r3, [r7, #23]
					command_found_FLAG = 1;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	75bb      	strb	r3, [r7, #22]
					break;
 8007ba0:	e005      	b.n	8007bae <Do_The_Command+0x59a>
				}
				default:
				{
					errorCode = COMMAND_NOT_RECOGNIZED;
 8007ba2:	2325      	movs	r3, #37	; 0x25
 8007ba4:	75fb      	strb	r3, [r7, #23]
					command_found_FLAG = 0;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	75bb      	strb	r3, [r7, #22]
					break;
 8007baa:	e000      	b.n	8007bae <Do_The_Command+0x59a>
				}
			}
		}
 8007bac:	bf00      	nop
	}

	return errorCode;
 8007bae:	7dfb      	ldrb	r3, [r7, #23]
 8007bb0:	b29b      	uxth	r3, r3
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	371c      	adds	r7, #28
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	0800b8a0 	.word	0x0800b8a0

08007bc0 <Process_SCPI_Message>:


uint16_t Process_SCPI_Message(const char *MESSAGE, char *SCPI_buffer)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b0e0      	sub	sp, #384	; 0x180
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	1d3b      	adds	r3, r7, #4
 8007bc8:	6018      	str	r0, [r3, #0]
 8007bca:	463b      	mov	r3, r7
 8007bcc:	6019      	str	r1, [r3, #0]
	ERROR_CODE errorCode = 0x00;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
	char messageCopy[MAX_MESSAGE_LENGTH] = "";
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007bda:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8007bde:	227c      	movs	r2, #124	; 0x7c
 8007be0:	2100      	movs	r1, #0
 8007be2:	4618      	mov	r0, r3
 8007be4:	f001 fa25 	bl	8009032 <memset>
	char tableWithMessagePieces[MAX_NUMBER_OF_PIECES][MAX_LENGTH_OF_A_PIECE] = {""};
 8007be8:	f107 0320 	add.w	r3, r7, #32
 8007bec:	4618      	mov	r0, r3
 8007bee:	23dc      	movs	r3, #220	; 0xdc
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	f001 fa1d 	bl	8009032 <memset>
	uint8_t numberOfPieces = 0;
 8007bf8:	f107 031f 	add.w	r3, r7, #31
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	701a      	strb	r2, [r3, #0]
	uint16_t CommandNumbers[MAX_NUMBER_OF_PIECES] = {};
 8007c00:	f107 0308 	add.w	r3, r7, #8
 8007c04:	2200      	movs	r2, #0
 8007c06:	601a      	str	r2, [r3, #0]
 8007c08:	605a      	str	r2, [r3, #4]
 8007c0a:	609a      	str	r2, [r3, #8]
 8007c0c:	60da      	str	r2, [r3, #12]
 8007c0e:	611a      	str	r2, [r3, #16]
 8007c10:	829a      	strh	r2, [r3, #20]

	strcpy(messageCopy, MESSAGE);
 8007c12:	1d3b      	adds	r3, r7, #4
 8007c14:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8007c18:	6819      	ldr	r1, [r3, #0]
 8007c1a:	4610      	mov	r0, r2
 8007c1c:	f001 fa66 	bl	80090ec <strcpy>

	if (0 == errorCode)
 8007c20:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d107      	bne.n	8007c38 <Process_SCPI_Message+0x78>
		/* Sets value of messageLength */
		errorCode = Get_Message_Length(messageCopy);
 8007c28:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7ff fa05 	bl	800703c <Get_Message_Length>
 8007c32:	4603      	mov	r3, r0
 8007c34:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f

	if (0 == errorCode)
 8007c38:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d107      	bne.n	8007c50 <Process_SCPI_Message+0x90>
		/* Makes whole message to upper letters (because SCPI standard says that we should be case insensitive!) */
		errorCode = Message_To_Upper_Letters(messageCopy);
 8007c40:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7ff fa15 	bl	8007074 <Message_To_Upper_Letters>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f

	if (0 == errorCode)
 8007c50:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d10b      	bne.n	8007c70 <Process_SCPI_Message+0xb0>
		/* We cut the received message into pieces (commands). */
		errorCode = Cut_Message_Into_Pieces(messageCopy, tableWithMessagePieces, &numberOfPieces);
 8007c58:	f107 021f 	add.w	r2, r7, #31
 8007c5c:	f107 0120 	add.w	r1, r7, #32
 8007c60:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7ff fa99 	bl	800719c <Cut_Message_Into_Pieces>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f

	if (0 == errorCode)
 8007c70:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10b      	bne.n	8007c90 <Process_SCPI_Message+0xd0>
		/* After we get message in pieces we can start recognizing the pieces. This function finds the pieces
		 * in the lists at the top and sets command numbers for them (as there are multiple combinations of
		 * names for the same command <<ex. "volt?" and "voltage?">> and there is just one number for them all.
		 * It allows then to easily operate with switch-case statements, as we can add more recognizable names
		 * with no hassle. */
		errorCode = Recognize_Message(tableWithMessagePieces, &numberOfPieces, CommandNumbers);
 8007c78:	f107 0208 	add.w	r2, r7, #8
 8007c7c:	f107 011f 	add.w	r1, r7, #31
 8007c80:	f107 0320 	add.w	r3, r7, #32
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7ff fc8b 	bl	80075a0 <Recognize_Message>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f

	if (0 == errorCode)
 8007c90:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10c      	bne.n	8007cb2 <Process_SCPI_Message+0xf2>
		/* This function is responsible for doing the recognized commands. They are implemented differently
		 * so please be careful while editing. Some of the functions are declared as extern and defined in
		 * Commands_Fun.c and main.c files. */
		errorCode = Do_The_Command(tableWithMessagePieces, &numberOfPieces, CommandNumbers, SCPI_buffer);
 8007c98:	463b      	mov	r3, r7
 8007c9a:	f107 0208 	add.w	r2, r7, #8
 8007c9e:	f107 011f 	add.w	r1, r7, #31
 8007ca2:	f107 0020 	add.w	r0, r7, #32
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f7ff fcb4 	bl	8007614 <Do_The_Command>
 8007cac:	4603      	mov	r3, r0
 8007cae:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f

	return errorCode;
 8007cb2:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8007cb6:	b29b      	uxth	r3, r3
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f507 77c0 	add.w	r7, r7, #384	; 0x180
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	af00      	add	r7, sp, #0

}
 8007cc6:	bf00      	nop
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	af00      	add	r7, sp, #0
return 0;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007ce0:	b5b0      	push	{r4, r5, r7, lr}
 8007ce2:	b09a      	sub	sp, #104	; 0x68
 8007ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	control_reg[0] = 0x2100;
 8007ce6:	4b54      	ldr	r3, [pc, #336]	; (8007e38 <main+0x158>)
 8007ce8:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 8007cec:	801a      	strh	r2, [r3, #0]
	phase0_reg[0] = 0xC000;
 8007cee:	4b53      	ldr	r3, [pc, #332]	; (8007e3c <main+0x15c>)
 8007cf0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8007cf4:	801a      	strh	r2, [r3, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007cf6:	f7f9 f907 	bl	8000f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007cfa:	f000 f8c9 	bl	8007e90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007cfe:	f000 fae3 	bl	80082c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8007d02:	f000 f97b 	bl	8007ffc <MX_SPI1_Init>
  MX_DAC1_Init();
 8007d06:	f000 f93b 	bl	8007f80 <MX_DAC1_Init>
  MX_TIM1_Init();
 8007d0a:	f000 f9b5 	bl	8008078 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8007d0e:	f000 faab 	bl	8008268 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8007d12:	f000 fa5d 	bl	80081d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, &receiveByte, 1);
 8007d16:	2201      	movs	r2, #1
 8007d18:	4949      	ldr	r1, [pc, #292]	; (8007e40 <main+0x160>)
 8007d1a:	484a      	ldr	r0, [pc, #296]	; (8007e44 <main+0x164>)
 8007d1c:	f7fc fdea 	bl	80048f4 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8007d20:	2108      	movs	r1, #8
 8007d22:	4849      	ldr	r0, [pc, #292]	; (8007e48 <main+0x168>)
 8007d24:	f7fb fca2 	bl	800366c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8007d28:	4848      	ldr	r0, [pc, #288]	; (8007e4c <main+0x16c>)
 8007d2a:	f7fb fc3f 	bl	80035ac <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8007d2e:	2100      	movs	r1, #0
 8007d30:	4847      	ldr	r0, [pc, #284]	; (8007e50 <main+0x170>)
 8007d32:	f7f9 faae 	bl	8001292 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8007d36:	2110      	movs	r1, #16
 8007d38:	4845      	ldr	r0, [pc, #276]	; (8007e50 <main+0x170>)
 8007d3a:	f7f9 faaa 	bl	8001292 <HAL_DAC_Start>

  PWM_Freq = 10000;
 8007d3e:	4b45      	ldr	r3, [pc, #276]	; (8007e54 <main+0x174>)
 8007d40:	f242 7210 	movw	r2, #10000	; 0x2710
 8007d44:	601a      	str	r2, [r3, #0]
  PWM_Duty = 25;
 8007d46:	4b44      	ldr	r3, [pc, #272]	; (8007e58 <main+0x178>)
 8007d48:	2219      	movs	r2, #25
 8007d4a:	701a      	strb	r2, [r3, #0]
  setSignalFreq = 5000;
 8007d4c:	4b43      	ldr	r3, [pc, #268]	; (8007e5c <main+0x17c>)
 8007d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d52:	601a      	str	r2, [r3, #0]

  gauss_mean = 2048;
 8007d54:	4b42      	ldr	r3, [pc, #264]	; (8007e60 <main+0x180>)
 8007d56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d5a:	801a      	strh	r2, [r3, #0]
  gauss_std_dev = 500;
 8007d5c:	4b41      	ldr	r3, [pc, #260]	; (8007e64 <main+0x184>)
 8007d5e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007d62:	801a      	strh	r2, [r3, #0]

  GeneratePWMSignal(PWM_Duty, PWM_Freq);
 8007d64:	4b3c      	ldr	r3, [pc, #240]	; (8007e58 <main+0x178>)
 8007d66:	781a      	ldrb	r2, [r3, #0]
 8007d68:	4b3a      	ldr	r3, [pc, #232]	; (8007e54 <main+0x174>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	4610      	mov	r0, r2
 8007d70:	f000 fcb8 	bl	80086e4 <GeneratePWMSignal>
  GenerateAD9833Signal(SIN, setSignalFreq);
 8007d74:	4b39      	ldr	r3, [pc, #228]	; (8007e5c <main+0x17c>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4619      	mov	r1, r3
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	f000 fb8c 	bl	8008498 <GenerateAD9833Signal>
  MultiplexerChannelSelect(AD9833);
 8007d80:	2000      	movs	r0, #0
 8007d82:	f000 fccf 	bl	8008724 <MultiplexerChannelSelect>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8007d86:	4b38      	ldr	r3, [pc, #224]	; (8007e68 <main+0x188>)
 8007d88:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8007d8c:	461d      	mov	r5, r3
 8007d8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d92:	682b      	ldr	r3, [r5, #0]
 8007d94:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8007d96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7fd fda0 	bl	80058e2 <osThreadCreate>
 8007da2:	4602      	mov	r2, r0
 8007da4:	4b31      	ldr	r3, [pc, #196]	; (8007e6c <main+0x18c>)
 8007da6:	601a      	str	r2, [r3, #0]

  /* definition and creation of FreeRTOS_1ms */
  osThreadDef(FreeRTOS_1ms, RTOS_1ms, osPriorityNormal, 0, 128);
 8007da8:	4b31      	ldr	r3, [pc, #196]	; (8007e70 <main+0x190>)
 8007daa:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8007dae:	461d      	mov	r5, r3
 8007db0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007db4:	682b      	ldr	r3, [r5, #0]
 8007db6:	6023      	str	r3, [r4, #0]
  FreeRTOS_1msHandle = osThreadCreate(osThread(FreeRTOS_1ms), NULL);
 8007db8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fd fd8f 	bl	80058e2 <osThreadCreate>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	4b2b      	ldr	r3, [pc, #172]	; (8007e74 <main+0x194>)
 8007dc8:	601a      	str	r2, [r3, #0]

  /* definition and creation of FreeRTOS_10ms */
  osThreadDef(FreeRTOS_10ms, RTOS_10ms, osPriorityNormal, 0, 128);
 8007dca:	4b2b      	ldr	r3, [pc, #172]	; (8007e78 <main+0x198>)
 8007dcc:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8007dd0:	461d      	mov	r5, r3
 8007dd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007dd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007dd6:	682b      	ldr	r3, [r5, #0]
 8007dd8:	6023      	str	r3, [r4, #0]
  FreeRTOS_10msHandle = osThreadCreate(osThread(FreeRTOS_10ms), NULL);
 8007dda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007dde:	2100      	movs	r1, #0
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fd fd7e 	bl	80058e2 <osThreadCreate>
 8007de6:	4602      	mov	r2, r0
 8007de8:	4b24      	ldr	r3, [pc, #144]	; (8007e7c <main+0x19c>)
 8007dea:	601a      	str	r2, [r3, #0]

  /* definition and creation of FreeRTOS_100ms */
  osThreadDef(FreeRTOS_100ms, RTOS_100ms, osPriorityNormal, 0, 128);
 8007dec:	4b24      	ldr	r3, [pc, #144]	; (8007e80 <main+0x1a0>)
 8007dee:	f107 0418 	add.w	r4, r7, #24
 8007df2:	461d      	mov	r5, r3
 8007df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007df8:	682b      	ldr	r3, [r5, #0]
 8007dfa:	6023      	str	r3, [r4, #0]
  FreeRTOS_100msHandle = osThreadCreate(osThread(FreeRTOS_100ms), NULL);
 8007dfc:	f107 0318 	add.w	r3, r7, #24
 8007e00:	2100      	movs	r1, #0
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fd fd6d 	bl	80058e2 <osThreadCreate>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	4b1e      	ldr	r3, [pc, #120]	; (8007e84 <main+0x1a4>)
 8007e0c:	601a      	str	r2, [r3, #0]

  /* definition and creation of FreeRTOS_1000ms */
  osThreadDef(FreeRTOS_1000ms, RTOS_1000ms, osPriorityNormal, 0, 128);
 8007e0e:	4b1e      	ldr	r3, [pc, #120]	; (8007e88 <main+0x1a8>)
 8007e10:	1d3c      	adds	r4, r7, #4
 8007e12:	461d      	mov	r5, r3
 8007e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e18:	682b      	ldr	r3, [r5, #0]
 8007e1a:	6023      	str	r3, [r4, #0]
  FreeRTOS_1000msHandle = osThreadCreate(osThread(FreeRTOS_1000ms), NULL);
 8007e1c:	1d3b      	adds	r3, r7, #4
 8007e1e:	2100      	movs	r1, #0
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7fd fd5e 	bl	80058e2 <osThreadCreate>
 8007e26:	4602      	mov	r2, r0
 8007e28:	4b18      	ldr	r3, [pc, #96]	; (8007e8c <main+0x1ac>)
 8007e2a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8007e2c:	f7fd fd52 	bl	80058d4 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1);
 8007e30:	2001      	movs	r0, #1
 8007e32:	f7f9 f8d9 	bl	8000fe8 <HAL_Delay>
 8007e36:	e7fb      	b.n	8007e30 <main+0x150>
 8007e38:	20002a68 	.word	0x20002a68
 8007e3c:	20002c18 	.word	0x20002c18
 8007e40:	20002a34 	.word	0x20002a34
 8007e44:	20002a8c 	.word	0x20002a8c
 8007e48:	20002b2c 	.word	0x20002b2c
 8007e4c:	20002bd4 	.word	0x20002bd4
 8007e50:	20002a78 	.word	0x20002a78
 8007e54:	20002b24 	.word	0x20002b24
 8007e58:	20002c24 	.word	0x20002c24
 8007e5c:	20002c20 	.word	0x20002c20
 8007e60:	20002b28 	.word	0x20002b28
 8007e64:	20002b20 	.word	0x20002b20
 8007e68:	0800b8bc 	.word	0x0800b8bc
 8007e6c:	20002a70 	.word	0x20002a70
 8007e70:	0800b8e0 	.word	0x0800b8e0
 8007e74:	20002b14 	.word	0x20002b14
 8007e78:	0800b904 	.word	0x0800b904
 8007e7c:	20002b6c 	.word	0x20002b6c
 8007e80:	0800b928 	.word	0x0800b928
 8007e84:	20002c1c 	.word	0x20002c1c
 8007e88:	0800b94c 	.word	0x0800b94c
 8007e8c:	20002c14 	.word	0x20002c14

08007e90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b0b8      	sub	sp, #224	; 0xe0
 8007e94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007e96:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007e9a:	2244      	movs	r2, #68	; 0x44
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f001 f8c7 	bl	8009032 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007ea4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	601a      	str	r2, [r3, #0]
 8007eac:	605a      	str	r2, [r3, #4]
 8007eae:	609a      	str	r2, [r3, #8]
 8007eb0:	60da      	str	r2, [r3, #12]
 8007eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007eb4:	463b      	mov	r3, r7
 8007eb6:	2288      	movs	r2, #136	; 0x88
 8007eb8:	2100      	movs	r1, #0
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f001 f8b9 	bl	8009032 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8007ec0:	2310      	movs	r3, #16
 8007ec2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8007ed2:	2360      	movs	r3, #96	; 0x60
 8007ed4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007ed8:	2302      	movs	r3, #2
 8007eda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 32;
 8007eea:	2320      	movs	r3, #32
 8007eec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8007ef0:	2307      	movs	r3, #7
 8007ef2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007ef6:	2302      	movs	r3, #2
 8007ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007efc:	2302      	movs	r3, #2
 8007efe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007f02:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7f9 fdb4 	bl	8001a74 <HAL_RCC_OscConfig>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8007f12:	f000 fde0 	bl	8008ad6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007f16:	230f      	movs	r3, #15
 8007f18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007f22:	2300      	movs	r3, #0
 8007f24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8007f34:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007f38:	2103      	movs	r1, #3
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fa f94a 	bl	80021d4 <HAL_RCC_ClockConfig>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8007f46:	f000 fdc6 	bl	8008ad6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8007f4a:	2304      	movs	r3, #4
 8007f4c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007f52:	463b      	mov	r3, r7
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7fa fb41 	bl	80025dc <HAL_RCCEx_PeriphCLKConfig>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d001      	beq.n	8007f64 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8007f60:	f000 fdb9 	bl	8008ad6 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8007f64:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007f68:	f7f9 fd2e 	bl	80019c8 <HAL_PWREx_ControlVoltageScaling>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d001      	beq.n	8007f76 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8007f72:	f000 fdb0 	bl	8008ad6 <Error_Handler>
  }
}
 8007f76:	bf00      	nop
 8007f78:	37e0      	adds	r7, #224	; 0xe0
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
	...

08007f80 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b08a      	sub	sp, #40	; 0x28
 8007f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8007f86:	1d3b      	adds	r3, r7, #4
 8007f88:	2224      	movs	r2, #36	; 0x24
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f001 f850 	bl	8009032 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8007f92:	4b18      	ldr	r3, [pc, #96]	; (8007ff4 <MX_DAC1_Init+0x74>)
 8007f94:	4a18      	ldr	r2, [pc, #96]	; (8007ff8 <MX_DAC1_Init+0x78>)
 8007f96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8007f98:	4816      	ldr	r0, [pc, #88]	; (8007ff4 <MX_DAC1_Init+0x74>)
 8007f9a:	f7f9 f958 	bl	800124e <HAL_DAC_Init>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d001      	beq.n	8007fa8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8007fa4:	f000 fd97 	bl	8008ad6 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8007fac:	2300      	movs	r3, #0
 8007fae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8007fbc:	1d3b      	adds	r3, r7, #4
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	480c      	ldr	r0, [pc, #48]	; (8007ff4 <MX_DAC1_Init+0x74>)
 8007fc4:	f7f9 f9d7 	bl	8001376 <HAL_DAC_ConfigChannel>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8007fce:	f000 fd82 	bl	8008ad6 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	613b      	str	r3, [r7, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8007fd6:	1d3b      	adds	r3, r7, #4
 8007fd8:	2210      	movs	r2, #16
 8007fda:	4619      	mov	r1, r3
 8007fdc:	4805      	ldr	r0, [pc, #20]	; (8007ff4 <MX_DAC1_Init+0x74>)
 8007fde:	f7f9 f9ca 	bl	8001376 <HAL_DAC_ConfigChannel>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d001      	beq.n	8007fec <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8007fe8:	f000 fd75 	bl	8008ad6 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8007fec:	bf00      	nop
 8007fee:	3728      	adds	r7, #40	; 0x28
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	20002a78 	.word	0x20002a78
 8007ff8:	40007400 	.word	0x40007400

08007ffc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008000:	4b1b      	ldr	r3, [pc, #108]	; (8008070 <MX_SPI1_Init+0x74>)
 8008002:	4a1c      	ldr	r2, [pc, #112]	; (8008074 <MX_SPI1_Init+0x78>)
 8008004:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008006:	4b1a      	ldr	r3, [pc, #104]	; (8008070 <MX_SPI1_Init+0x74>)
 8008008:	f44f 7282 	mov.w	r2, #260	; 0x104
 800800c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800800e:	4b18      	ldr	r3, [pc, #96]	; (8008070 <MX_SPI1_Init+0x74>)
 8008010:	2200      	movs	r2, #0
 8008012:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8008014:	4b16      	ldr	r3, [pc, #88]	; (8008070 <MX_SPI1_Init+0x74>)
 8008016:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800801a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800801c:	4b14      	ldr	r3, [pc, #80]	; (8008070 <MX_SPI1_Init+0x74>)
 800801e:	2202      	movs	r2, #2
 8008020:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008022:	4b13      	ldr	r3, [pc, #76]	; (8008070 <MX_SPI1_Init+0x74>)
 8008024:	2200      	movs	r2, #0
 8008026:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008028:	4b11      	ldr	r3, [pc, #68]	; (8008070 <MX_SPI1_Init+0x74>)
 800802a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800802e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8008030:	4b0f      	ldr	r3, [pc, #60]	; (8008070 <MX_SPI1_Init+0x74>)
 8008032:	2238      	movs	r2, #56	; 0x38
 8008034:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008036:	4b0e      	ldr	r3, [pc, #56]	; (8008070 <MX_SPI1_Init+0x74>)
 8008038:	2200      	movs	r2, #0
 800803a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800803c:	4b0c      	ldr	r3, [pc, #48]	; (8008070 <MX_SPI1_Init+0x74>)
 800803e:	2200      	movs	r2, #0
 8008040:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008042:	4b0b      	ldr	r3, [pc, #44]	; (8008070 <MX_SPI1_Init+0x74>)
 8008044:	2200      	movs	r2, #0
 8008046:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8008048:	4b09      	ldr	r3, [pc, #36]	; (8008070 <MX_SPI1_Init+0x74>)
 800804a:	2207      	movs	r2, #7
 800804c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800804e:	4b08      	ldr	r3, [pc, #32]	; (8008070 <MX_SPI1_Init+0x74>)
 8008050:	2200      	movs	r2, #0
 8008052:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8008054:	4b06      	ldr	r3, [pc, #24]	; (8008070 <MX_SPI1_Init+0x74>)
 8008056:	2200      	movs	r2, #0
 8008058:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800805a:	4805      	ldr	r0, [pc, #20]	; (8008070 <MX_SPI1_Init+0x74>)
 800805c:	f7fa ff6e 	bl	8002f3c <HAL_SPI_Init>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8008066:	f000 fd36 	bl	8008ad6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800806a:	bf00      	nop
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20002b70 	.word	0x20002b70
 8008074:	40013000 	.word	0x40013000

08008078 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b09a      	sub	sp, #104	; 0x68
 800807c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800807e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008082:	2200      	movs	r2, #0
 8008084:	601a      	str	r2, [r3, #0]
 8008086:	605a      	str	r2, [r3, #4]
 8008088:	609a      	str	r2, [r3, #8]
 800808a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800808c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008090:	2200      	movs	r2, #0
 8008092:	601a      	str	r2, [r3, #0]
 8008094:	605a      	str	r2, [r3, #4]
 8008096:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008098:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800809c:	2200      	movs	r2, #0
 800809e:	601a      	str	r2, [r3, #0]
 80080a0:	605a      	str	r2, [r3, #4]
 80080a2:	609a      	str	r2, [r3, #8]
 80080a4:	60da      	str	r2, [r3, #12]
 80080a6:	611a      	str	r2, [r3, #16]
 80080a8:	615a      	str	r2, [r3, #20]
 80080aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80080ac:	1d3b      	adds	r3, r7, #4
 80080ae:	222c      	movs	r2, #44	; 0x2c
 80080b0:	2100      	movs	r1, #0
 80080b2:	4618      	mov	r0, r3
 80080b4:	f000 ffbd 	bl	8009032 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80080b8:	4b43      	ldr	r3, [pc, #268]	; (80081c8 <MX_TIM1_Init+0x150>)
 80080ba:	4a44      	ldr	r2, [pc, #272]	; (80081cc <MX_TIM1_Init+0x154>)
 80080bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80080be:	4b42      	ldr	r3, [pc, #264]	; (80081c8 <MX_TIM1_Init+0x150>)
 80080c0:	2200      	movs	r2, #0
 80080c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080c4:	4b40      	ldr	r3, [pc, #256]	; (80081c8 <MX_TIM1_Init+0x150>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80080ca:	4b3f      	ldr	r3, [pc, #252]	; (80081c8 <MX_TIM1_Init+0x150>)
 80080cc:	2263      	movs	r2, #99	; 0x63
 80080ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080d0:	4b3d      	ldr	r3, [pc, #244]	; (80081c8 <MX_TIM1_Init+0x150>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80080d6:	4b3c      	ldr	r3, [pc, #240]	; (80081c8 <MX_TIM1_Init+0x150>)
 80080d8:	2200      	movs	r2, #0
 80080da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80080dc:	4b3a      	ldr	r3, [pc, #232]	; (80081c8 <MX_TIM1_Init+0x150>)
 80080de:	2200      	movs	r2, #0
 80080e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80080e2:	4839      	ldr	r0, [pc, #228]	; (80081c8 <MX_TIM1_Init+0x150>)
 80080e4:	f7fb fa37 	bl	8003556 <HAL_TIM_Base_Init>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80080ee:	f000 fcf2 	bl	8008ad6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80080f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080f6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80080f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80080fc:	4619      	mov	r1, r3
 80080fe:	4832      	ldr	r0, [pc, #200]	; (80081c8 <MX_TIM1_Init+0x150>)
 8008100:	f7fb fd44 	bl	8003b8c <HAL_TIM_ConfigClockSource>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d001      	beq.n	800810e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800810a:	f000 fce4 	bl	8008ad6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800810e:	482e      	ldr	r0, [pc, #184]	; (80081c8 <MX_TIM1_Init+0x150>)
 8008110:	f7fb fa76 	bl	8003600 <HAL_TIM_PWM_Init>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d001      	beq.n	800811e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800811a:	f000 fcdc 	bl	8008ad6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800811e:	2300      	movs	r3, #0
 8008120:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008122:	2300      	movs	r3, #0
 8008124:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008126:	2300      	movs	r3, #0
 8008128:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800812a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800812e:	4619      	mov	r1, r3
 8008130:	4825      	ldr	r0, [pc, #148]	; (80081c8 <MX_TIM1_Init+0x150>)
 8008132:	f7fc fa3d 	bl	80045b0 <HAL_TIMEx_MasterConfigSynchronization>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d001      	beq.n	8008140 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800813c:	f000 fccb 	bl	8008ad6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008140:	2360      	movs	r3, #96	; 0x60
 8008142:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8008144:	2300      	movs	r3, #0
 8008146:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008148:	2300      	movs	r3, #0
 800814a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800814c:	2300      	movs	r3, #0
 800814e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008150:	2300      	movs	r3, #0
 8008152:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008154:	2300      	movs	r3, #0
 8008156:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008158:	2300      	movs	r3, #0
 800815a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800815c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008160:	2208      	movs	r2, #8
 8008162:	4619      	mov	r1, r3
 8008164:	4818      	ldr	r0, [pc, #96]	; (80081c8 <MX_TIM1_Init+0x150>)
 8008166:	f7fb fbf9 	bl	800395c <HAL_TIM_PWM_ConfigChannel>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d001      	beq.n	8008174 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8008170:	f000 fcb1 	bl	8008ad6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008174:	2300      	movs	r3, #0
 8008176:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008178:	2300      	movs	r3, #0
 800817a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800817c:	2300      	movs	r3, #0
 800817e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008180:	2300      	movs	r3, #0
 8008182:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008184:	2300      	movs	r3, #0
 8008186:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008188:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800818c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800818e:	2300      	movs	r3, #0
 8008190:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008192:	2300      	movs	r3, #0
 8008194:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008196:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800819a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800819c:	2300      	movs	r3, #0
 800819e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80081a0:	2300      	movs	r3, #0
 80081a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80081a4:	1d3b      	adds	r3, r7, #4
 80081a6:	4619      	mov	r1, r3
 80081a8:	4807      	ldr	r0, [pc, #28]	; (80081c8 <MX_TIM1_Init+0x150>)
 80081aa:	f7fc fa5d 	bl	8004668 <HAL_TIMEx_ConfigBreakDeadTime>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d001      	beq.n	80081b8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80081b4:	f000 fc8f 	bl	8008ad6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80081b8:	4803      	ldr	r0, [pc, #12]	; (80081c8 <MX_TIM1_Init+0x150>)
 80081ba:	f000 fd91 	bl	8008ce0 <HAL_TIM_MspPostInit>

}
 80081be:	bf00      	nop
 80081c0:	3768      	adds	r7, #104	; 0x68
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	20002b2c 	.word	0x20002b2c
 80081cc:	40012c00 	.word	0x40012c00

080081d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b088      	sub	sp, #32
 80081d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80081d6:	f107 0310 	add.w	r3, r7, #16
 80081da:	2200      	movs	r2, #0
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	605a      	str	r2, [r3, #4]
 80081e0:	609a      	str	r2, [r3, #8]
 80081e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80081e4:	1d3b      	adds	r3, r7, #4
 80081e6:	2200      	movs	r2, #0
 80081e8:	601a      	str	r2, [r3, #0]
 80081ea:	605a      	str	r2, [r3, #4]
 80081ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80081ee:	4b1d      	ldr	r3, [pc, #116]	; (8008264 <MX_TIM2_Init+0x94>)
 80081f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80081f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80081f6:	4b1b      	ldr	r3, [pc, #108]	; (8008264 <MX_TIM2_Init+0x94>)
 80081f8:	223f      	movs	r2, #63	; 0x3f
 80081fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80081fc:	4b19      	ldr	r3, [pc, #100]	; (8008264 <MX_TIM2_Init+0x94>)
 80081fe:	2200      	movs	r2, #0
 8008200:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8008202:	4b18      	ldr	r3, [pc, #96]	; (8008264 <MX_TIM2_Init+0x94>)
 8008204:	2209      	movs	r2, #9
 8008206:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008208:	4b16      	ldr	r3, [pc, #88]	; (8008264 <MX_TIM2_Init+0x94>)
 800820a:	2200      	movs	r2, #0
 800820c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800820e:	4b15      	ldr	r3, [pc, #84]	; (8008264 <MX_TIM2_Init+0x94>)
 8008210:	2200      	movs	r2, #0
 8008212:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008214:	4813      	ldr	r0, [pc, #76]	; (8008264 <MX_TIM2_Init+0x94>)
 8008216:	f7fb f99e 	bl	8003556 <HAL_TIM_Base_Init>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d001      	beq.n	8008224 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8008220:	f000 fc59 	bl	8008ad6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008228:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800822a:	f107 0310 	add.w	r3, r7, #16
 800822e:	4619      	mov	r1, r3
 8008230:	480c      	ldr	r0, [pc, #48]	; (8008264 <MX_TIM2_Init+0x94>)
 8008232:	f7fb fcab 	bl	8003b8c <HAL_TIM_ConfigClockSource>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800823c:	f000 fc4b 	bl	8008ad6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008240:	2300      	movs	r3, #0
 8008242:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008244:	2300      	movs	r3, #0
 8008246:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008248:	1d3b      	adds	r3, r7, #4
 800824a:	4619      	mov	r1, r3
 800824c:	4805      	ldr	r0, [pc, #20]	; (8008264 <MX_TIM2_Init+0x94>)
 800824e:	f7fc f9af 	bl	80045b0 <HAL_TIMEx_MasterConfigSynchronization>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d001      	beq.n	800825c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8008258:	f000 fc3d 	bl	8008ad6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800825c:	bf00      	nop
 800825e:	3720      	adds	r7, #32
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	20002bd4 	.word	0x20002bd4

08008268 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800826c:	4b14      	ldr	r3, [pc, #80]	; (80082c0 <MX_USART3_UART_Init+0x58>)
 800826e:	4a15      	ldr	r2, [pc, #84]	; (80082c4 <MX_USART3_UART_Init+0x5c>)
 8008270:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8008272:	4b13      	ldr	r3, [pc, #76]	; (80082c0 <MX_USART3_UART_Init+0x58>)
 8008274:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008278:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800827a:	4b11      	ldr	r3, [pc, #68]	; (80082c0 <MX_USART3_UART_Init+0x58>)
 800827c:	2200      	movs	r2, #0
 800827e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008280:	4b0f      	ldr	r3, [pc, #60]	; (80082c0 <MX_USART3_UART_Init+0x58>)
 8008282:	2200      	movs	r2, #0
 8008284:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008286:	4b0e      	ldr	r3, [pc, #56]	; (80082c0 <MX_USART3_UART_Init+0x58>)
 8008288:	2200      	movs	r2, #0
 800828a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800828c:	4b0c      	ldr	r3, [pc, #48]	; (80082c0 <MX_USART3_UART_Init+0x58>)
 800828e:	220c      	movs	r2, #12
 8008290:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008292:	4b0b      	ldr	r3, [pc, #44]	; (80082c0 <MX_USART3_UART_Init+0x58>)
 8008294:	2200      	movs	r2, #0
 8008296:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008298:	4b09      	ldr	r3, [pc, #36]	; (80082c0 <MX_USART3_UART_Init+0x58>)
 800829a:	2200      	movs	r2, #0
 800829c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800829e:	4b08      	ldr	r3, [pc, #32]	; (80082c0 <MX_USART3_UART_Init+0x58>)
 80082a0:	2200      	movs	r2, #0
 80082a2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80082a4:	4b06      	ldr	r3, [pc, #24]	; (80082c0 <MX_USART3_UART_Init+0x58>)
 80082a6:	2200      	movs	r2, #0
 80082a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80082aa:	4805      	ldr	r0, [pc, #20]	; (80082c0 <MX_USART3_UART_Init+0x58>)
 80082ac:	f7fc fa78 	bl	80047a0 <HAL_UART_Init>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d001      	beq.n	80082ba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80082b6:	f000 fc0e 	bl	8008ad6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80082ba:	bf00      	nop
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	20002a8c 	.word	0x20002a8c
 80082c4:	40004800 	.word	0x40004800

080082c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b08a      	sub	sp, #40	; 0x28
 80082cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082ce:	f107 0314 	add.w	r3, r7, #20
 80082d2:	2200      	movs	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]
 80082d6:	605a      	str	r2, [r3, #4]
 80082d8:	609a      	str	r2, [r3, #8]
 80082da:	60da      	str	r2, [r3, #12]
 80082dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80082de:	4b24      	ldr	r3, [pc, #144]	; (8008370 <MX_GPIO_Init+0xa8>)
 80082e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082e2:	4a23      	ldr	r2, [pc, #140]	; (8008370 <MX_GPIO_Init+0xa8>)
 80082e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80082ea:	4b21      	ldr	r3, [pc, #132]	; (8008370 <MX_GPIO_Init+0xa8>)
 80082ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082f2:	613b      	str	r3, [r7, #16]
 80082f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80082f6:	4b1e      	ldr	r3, [pc, #120]	; (8008370 <MX_GPIO_Init+0xa8>)
 80082f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082fa:	4a1d      	ldr	r2, [pc, #116]	; (8008370 <MX_GPIO_Init+0xa8>)
 80082fc:	f043 0301 	orr.w	r3, r3, #1
 8008300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008302:	4b1b      	ldr	r3, [pc, #108]	; (8008370 <MX_GPIO_Init+0xa8>)
 8008304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008306:	f003 0301 	and.w	r3, r3, #1
 800830a:	60fb      	str	r3, [r7, #12]
 800830c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800830e:	4b18      	ldr	r3, [pc, #96]	; (8008370 <MX_GPIO_Init+0xa8>)
 8008310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008312:	4a17      	ldr	r2, [pc, #92]	; (8008370 <MX_GPIO_Init+0xa8>)
 8008314:	f043 0304 	orr.w	r3, r3, #4
 8008318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800831a:	4b15      	ldr	r3, [pc, #84]	; (8008370 <MX_GPIO_Init+0xa8>)
 800831c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800831e:	f003 0304 	and.w	r3, r3, #4
 8008322:	60bb      	str	r3, [r7, #8]
 8008324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008326:	4b12      	ldr	r3, [pc, #72]	; (8008370 <MX_GPIO_Init+0xa8>)
 8008328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800832a:	4a11      	ldr	r2, [pc, #68]	; (8008370 <MX_GPIO_Init+0xa8>)
 800832c:	f043 0302 	orr.w	r3, r3, #2
 8008330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008332:	4b0f      	ldr	r3, [pc, #60]	; (8008370 <MX_GPIO_Init+0xa8>)
 8008334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008336:	f003 0302 	and.w	r3, r3, #2
 800833a:	607b      	str	r3, [r7, #4]
 800833c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MULTIPLEXER_S0_Pin|MULTIPLEXER_S1_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 800833e:	2200      	movs	r2, #0
 8008340:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008344:	480b      	ldr	r0, [pc, #44]	; (8008374 <MX_GPIO_Init+0xac>)
 8008346:	f7f9 fb19 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MULTIPLEXER_S0_Pin MULTIPLEXER_S1_Pin PB8 */
  GPIO_InitStruct.Pin = MULTIPLEXER_S0_Pin|MULTIPLEXER_S1_Pin|GPIO_PIN_8;
 800834a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800834e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008350:	2301      	movs	r3, #1
 8008352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008354:	2300      	movs	r3, #0
 8008356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008358:	2300      	movs	r3, #0
 800835a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800835c:	f107 0314 	add.w	r3, r7, #20
 8008360:	4619      	mov	r1, r3
 8008362:	4804      	ldr	r0, [pc, #16]	; (8008374 <MX_GPIO_Init+0xac>)
 8008364:	f7f9 f962 	bl	800162c <HAL_GPIO_Init>

}
 8008368:	bf00      	nop
 800836a:	3728      	adds	r7, #40	; 0x28
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	40021000 	.word	0x40021000
 8008374:	48000400 	.word	0x48000400

08008378 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8008378:	b590      	push	{r4, r7, lr}
 800837a:	b089      	sub	sp, #36	; 0x24
 800837c:	af02      	add	r7, sp, #8
 800837e:	6078      	str	r0, [r7, #4]
		ERROR_CODE errorCode = 0x00;
 8008380:	2300      	movs	r3, #0
 8008382:	757b      	strb	r3, [r7, #21]
		static uint16_t counter = 0;
		static uint8_t FLAG_needsCleaning = 0;
		uint16_t size = 0;
 8008384:	2300      	movs	r3, #0
 8008386:	82fb      	strh	r3, [r7, #22]
		char sin[] = "SIN";
 8008388:	4b38      	ldr	r3, [pc, #224]	; (800846c <HAL_UART_RxCpltCallback+0xf4>)
 800838a:	613b      	str	r3, [r7, #16]
		char tri[] = "TRI";
 800838c:	4b38      	ldr	r3, [pc, #224]	; (8008470 <HAL_UART_RxCpltCallback+0xf8>)
 800838e:	60fb      	str	r3, [r7, #12]

		if (1 == FLAG_needsCleaning)
 8008390:	4b38      	ldr	r3, [pc, #224]	; (8008474 <HAL_UART_RxCpltCallback+0xfc>)
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d113      	bne.n	80083c0 <HAL_UART_RxCpltCallback+0x48>
		{
			memset(receive_buffer,'\0',(MAX_RECEIVE_BUFFER_SIZE*sizeof(receive_buffer[0])));
 8008398:	2280      	movs	r2, #128	; 0x80
 800839a:	2100      	movs	r1, #0
 800839c:	4836      	ldr	r0, [pc, #216]	; (8008478 <HAL_UART_RxCpltCallback+0x100>)
 800839e:	f000 fe48 	bl	8009032 <memset>
			memset(send_buffer,'\0',(MAX_SEND_BUFFER_SIZE*sizeof(send_buffer[0])));
 80083a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083a6:	2100      	movs	r1, #0
 80083a8:	4834      	ldr	r0, [pc, #208]	; (800847c <HAL_UART_RxCpltCallback+0x104>)
 80083aa:	f000 fe42 	bl	8009032 <memset>
			memset(SCPI_buffer,'\0',(MAX_SCPI_ANSWER_BUFFER_SIZE*sizeof(SCPI_buffer[0])));
 80083ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083b2:	2100      	movs	r1, #0
 80083b4:	4832      	ldr	r0, [pc, #200]	; (8008480 <HAL_UART_RxCpltCallback+0x108>)
 80083b6:	f000 fe3c 	bl	8009032 <memset>
			FLAG_needsCleaning = 0;
 80083ba:	4b2e      	ldr	r3, [pc, #184]	; (8008474 <HAL_UART_RxCpltCallback+0xfc>)
 80083bc:	2200      	movs	r2, #0
 80083be:	701a      	strb	r2, [r3, #0]
		}

		if ('\r' != receiveByte && '\n' != receiveByte)
 80083c0:	4b30      	ldr	r3, [pc, #192]	; (8008484 <HAL_UART_RxCpltCallback+0x10c>)
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	2b0d      	cmp	r3, #13
 80083c8:	d017      	beq.n	80083fa <HAL_UART_RxCpltCallback+0x82>
 80083ca:	4b2e      	ldr	r3, [pc, #184]	; (8008484 <HAL_UART_RxCpltCallback+0x10c>)
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b0a      	cmp	r3, #10
 80083d2:	d012      	beq.n	80083fa <HAL_UART_RxCpltCallback+0x82>
		{
			if (counter <= MAX_RECEIVE_BUFFER_SIZE)
 80083d4:	4b2c      	ldr	r3, [pc, #176]	; (8008488 <HAL_UART_RxCpltCallback+0x110>)
 80083d6:	881b      	ldrh	r3, [r3, #0]
 80083d8:	2b80      	cmp	r3, #128	; 0x80
 80083da:	d807      	bhi.n	80083ec <HAL_UART_RxCpltCallback+0x74>
			{
				receive_buffer[counter] = receiveByte;
 80083dc:	4b2a      	ldr	r3, [pc, #168]	; (8008488 <HAL_UART_RxCpltCallback+0x110>)
 80083de:	881b      	ldrh	r3, [r3, #0]
 80083e0:	461a      	mov	r2, r3
 80083e2:	4b28      	ldr	r3, [pc, #160]	; (8008484 <HAL_UART_RxCpltCallback+0x10c>)
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	b2d9      	uxtb	r1, r3
 80083e8:	4b23      	ldr	r3, [pc, #140]	; (8008478 <HAL_UART_RxCpltCallback+0x100>)
 80083ea:	5499      	strb	r1, [r3, r2]
			}
			++counter;
 80083ec:	4b26      	ldr	r3, [pc, #152]	; (8008488 <HAL_UART_RxCpltCallback+0x110>)
 80083ee:	881b      	ldrh	r3, [r3, #0]
 80083f0:	3301      	adds	r3, #1
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	4b24      	ldr	r3, [pc, #144]	; (8008488 <HAL_UART_RxCpltCallback+0x110>)
 80083f6:	801a      	strh	r2, [r3, #0]
 80083f8:	e02e      	b.n	8008458 <HAL_UART_RxCpltCallback+0xe0>
		}

		else
		{
			errorCode = Process_SCPI_Message(receive_buffer, SCPI_buffer);
 80083fa:	4921      	ldr	r1, [pc, #132]	; (8008480 <HAL_UART_RxCpltCallback+0x108>)
 80083fc:	481e      	ldr	r0, [pc, #120]	; (8008478 <HAL_UART_RxCpltCallback+0x100>)
 80083fe:	f7ff fbdf 	bl	8007bc0 <Process_SCPI_Message>
 8008402:	4603      	mov	r3, r0
 8008404:	757b      	strb	r3, [r7, #21]
			if(0 == errorCode)
 8008406:	7d7b      	ldrb	r3, [r7, #21]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d108      	bne.n	800841e <HAL_UART_RxCpltCallback+0xa6>
				size = sprintf(send_buffer, "Message correct!: \"%s\".\n\r%s\n\r", receive_buffer,SCPI_buffer);
 800840c:	4b1c      	ldr	r3, [pc, #112]	; (8008480 <HAL_UART_RxCpltCallback+0x108>)
 800840e:	4a1a      	ldr	r2, [pc, #104]	; (8008478 <HAL_UART_RxCpltCallback+0x100>)
 8008410:	491e      	ldr	r1, [pc, #120]	; (800848c <HAL_UART_RxCpltCallback+0x114>)
 8008412:	481a      	ldr	r0, [pc, #104]	; (800847c <HAL_UART_RxCpltCallback+0x104>)
 8008414:	f000 fe4a 	bl	80090ac <siprintf>
 8008418:	4603      	mov	r3, r0
 800841a:	82fb      	strh	r3, [r7, #22]
 800841c:	e010      	b.n	8008440 <HAL_UART_RxCpltCallback+0xc8>
			else
				size = sprintf(send_buffer, "!!Message incorrect!! \n\rError Code: (%d) %s \n\rReceived message: \"%s\"\n\r", errorCode, Return_Error_Description(errorCode), receive_buffer);
 800841e:	7d7c      	ldrb	r4, [r7, #21]
 8008420:	7d7b      	ldrb	r3, [r7, #21]
 8008422:	b29b      	uxth	r3, r3
 8008424:	4618      	mov	r0, r3
 8008426:	f7fe fd77 	bl	8006f18 <Return_Error_Description>
 800842a:	4602      	mov	r2, r0
 800842c:	4b12      	ldr	r3, [pc, #72]	; (8008478 <HAL_UART_RxCpltCallback+0x100>)
 800842e:	9300      	str	r3, [sp, #0]
 8008430:	4613      	mov	r3, r2
 8008432:	4622      	mov	r2, r4
 8008434:	4916      	ldr	r1, [pc, #88]	; (8008490 <HAL_UART_RxCpltCallback+0x118>)
 8008436:	4811      	ldr	r0, [pc, #68]	; (800847c <HAL_UART_RxCpltCallback+0x104>)
 8008438:	f000 fe38 	bl	80090ac <siprintf>
 800843c:	4603      	mov	r3, r0
 800843e:	82fb      	strh	r3, [r7, #22]

			HAL_UART_Transmit_IT(&huart3, send_buffer, size);
 8008440:	8afb      	ldrh	r3, [r7, #22]
 8008442:	461a      	mov	r2, r3
 8008444:	490d      	ldr	r1, [pc, #52]	; (800847c <HAL_UART_RxCpltCallback+0x104>)
 8008446:	4813      	ldr	r0, [pc, #76]	; (8008494 <HAL_UART_RxCpltCallback+0x11c>)
 8008448:	f7fc f9f8 	bl	800483c <HAL_UART_Transmit_IT>
			counter = 0;
 800844c:	4b0e      	ldr	r3, [pc, #56]	; (8008488 <HAL_UART_RxCpltCallback+0x110>)
 800844e:	2200      	movs	r2, #0
 8008450:	801a      	strh	r2, [r3, #0]
			FLAG_needsCleaning = 1;
 8008452:	4b08      	ldr	r3, [pc, #32]	; (8008474 <HAL_UART_RxCpltCallback+0xfc>)
 8008454:	2201      	movs	r2, #1
 8008456:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart3, &receiveByte, 1);
 8008458:	2201      	movs	r2, #1
 800845a:	490a      	ldr	r1, [pc, #40]	; (8008484 <HAL_UART_RxCpltCallback+0x10c>)
 800845c:	480d      	ldr	r0, [pc, #52]	; (8008494 <HAL_UART_RxCpltCallback+0x11c>)
 800845e:	f7fc fa49 	bl	80048f4 <HAL_UART_Receive_IT>
}
 8008462:	bf00      	nop
 8008464:	371c      	adds	r7, #28
 8008466:	46bd      	mov	sp, r7
 8008468:	bd90      	pop	{r4, r7, pc}
 800846a:	bf00      	nop
 800846c:	004e4953 	.word	0x004e4953
 8008470:	00495254 	.word	0x00495254
 8008474:	20002a3c 	.word	0x20002a3c
 8008478:	200025b4 	.word	0x200025b4
 800847c:	20002634 	.word	0x20002634
 8008480:	20002834 	.word	0x20002834
 8008484:	20002a34 	.word	0x20002a34
 8008488:	20002a3e 	.word	0x20002a3e
 800848c:	0800b960 	.word	0x0800b960
 8008490:	0800b980 	.word	0x0800b980
 8008494:	20002a8c 	.word	0x20002a8c

08008498 <GenerateAD9833Signal>:

void GenerateAD9833Signal(signal_type_T signal_type, uint32_t freq)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	4603      	mov	r3, r0
 80084a0:	6039      	str	r1, [r7, #0]
 80084a2:	71fb      	strb	r3, [r7, #7]
	SetSignalType(signal_type);
 80084a4:	79fb      	ldrb	r3, [r7, #7]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f000 f88c 	bl	80085c4 <SetSignalType>
	CalculateFrequency(freq);
 80084ac:	6838      	ldr	r0, [r7, #0]
 80084ae:	f000 f8c7 	bl	8008640 <CalculateFrequency>

    exit_reg[0] = control_reg[0] & 0xEFF;
 80084b2:	4b3d      	ldr	r3, [pc, #244]	; (80085a8 <GenerateAD9833Signal+0x110>)
 80084b4:	881a      	ldrh	r2, [r3, #0]
 80084b6:	f640 63ff 	movw	r3, #3839	; 0xeff
 80084ba:	4013      	ands	r3, r2
 80084bc:	b29a      	uxth	r2, r3
 80084be:	4b3b      	ldr	r3, [pc, #236]	; (80085ac <GenerateAD9833Signal+0x114>)
 80084c0:	801a      	strh	r2, [r3, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80084c2:	2200      	movs	r2, #0
 80084c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80084c8:	4839      	ldr	r0, [pc, #228]	; (80085b0 <GenerateAD9833Signal+0x118>)
 80084ca:	f7f9 fa57 	bl	800197c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)control_reg, 1, HAL_MAX_DELAY);
 80084ce:	f04f 33ff 	mov.w	r3, #4294967295
 80084d2:	2201      	movs	r2, #1
 80084d4:	4934      	ldr	r1, [pc, #208]	; (80085a8 <GenerateAD9833Signal+0x110>)
 80084d6:	4837      	ldr	r0, [pc, #220]	; (80085b4 <GenerateAD9833Signal+0x11c>)
 80084d8:	f7fa fdba 	bl	8003050 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80084dc:	2201      	movs	r2, #1
 80084de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80084e2:	4833      	ldr	r0, [pc, #204]	; (80085b0 <GenerateAD9833Signal+0x118>)
 80084e4:	f7f9 fa4a 	bl	800197c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80084e8:	200a      	movs	r0, #10
 80084ea:	f7f8 fd7d 	bl	8000fe8 <HAL_Delay>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80084ee:	2200      	movs	r2, #0
 80084f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80084f4:	482e      	ldr	r0, [pc, #184]	; (80085b0 <GenerateAD9833Signal+0x118>)
 80084f6:	f7f9 fa41 	bl	800197c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)freq0_reg_lsb, 1, HAL_MAX_DELAY);
 80084fa:	f04f 33ff 	mov.w	r3, #4294967295
 80084fe:	2201      	movs	r2, #1
 8008500:	492d      	ldr	r1, [pc, #180]	; (80085b8 <GenerateAD9833Signal+0x120>)
 8008502:	482c      	ldr	r0, [pc, #176]	; (80085b4 <GenerateAD9833Signal+0x11c>)
 8008504:	f7fa fda4 	bl	8003050 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8008508:	2201      	movs	r2, #1
 800850a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800850e:	4828      	ldr	r0, [pc, #160]	; (80085b0 <GenerateAD9833Signal+0x118>)
 8008510:	f7f9 fa34 	bl	800197c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8008514:	200a      	movs	r0, #10
 8008516:	f7f8 fd67 	bl	8000fe8 <HAL_Delay>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800851a:	2200      	movs	r2, #0
 800851c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008520:	4823      	ldr	r0, [pc, #140]	; (80085b0 <GenerateAD9833Signal+0x118>)
 8008522:	f7f9 fa2b 	bl	800197c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)freq0_reg_msb, 1, HAL_MAX_DELAY);
 8008526:	f04f 33ff 	mov.w	r3, #4294967295
 800852a:	2201      	movs	r2, #1
 800852c:	4923      	ldr	r1, [pc, #140]	; (80085bc <GenerateAD9833Signal+0x124>)
 800852e:	4821      	ldr	r0, [pc, #132]	; (80085b4 <GenerateAD9833Signal+0x11c>)
 8008530:	f7fa fd8e 	bl	8003050 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8008534:	2201      	movs	r2, #1
 8008536:	f44f 7180 	mov.w	r1, #256	; 0x100
 800853a:	481d      	ldr	r0, [pc, #116]	; (80085b0 <GenerateAD9833Signal+0x118>)
 800853c:	f7f9 fa1e 	bl	800197c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8008540:	200a      	movs	r0, #10
 8008542:	f7f8 fd51 	bl	8000fe8 <HAL_Delay>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8008546:	2200      	movs	r2, #0
 8008548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800854c:	4818      	ldr	r0, [pc, #96]	; (80085b0 <GenerateAD9833Signal+0x118>)
 800854e:	f7f9 fa15 	bl	800197c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)phase0_reg, 1, HAL_MAX_DELAY);
 8008552:	f04f 33ff 	mov.w	r3, #4294967295
 8008556:	2201      	movs	r2, #1
 8008558:	4919      	ldr	r1, [pc, #100]	; (80085c0 <GenerateAD9833Signal+0x128>)
 800855a:	4816      	ldr	r0, [pc, #88]	; (80085b4 <GenerateAD9833Signal+0x11c>)
 800855c:	f7fa fd78 	bl	8003050 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8008560:	2201      	movs	r2, #1
 8008562:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008566:	4812      	ldr	r0, [pc, #72]	; (80085b0 <GenerateAD9833Signal+0x118>)
 8008568:	f7f9 fa08 	bl	800197c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800856c:	200a      	movs	r0, #10
 800856e:	f7f8 fd3b 	bl	8000fe8 <HAL_Delay>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8008572:	2200      	movs	r2, #0
 8008574:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008578:	480d      	ldr	r0, [pc, #52]	; (80085b0 <GenerateAD9833Signal+0x118>)
 800857a:	f7f9 f9ff 	bl	800197c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)exit_reg, 1, HAL_MAX_DELAY);
 800857e:	f04f 33ff 	mov.w	r3, #4294967295
 8008582:	2201      	movs	r2, #1
 8008584:	4909      	ldr	r1, [pc, #36]	; (80085ac <GenerateAD9833Signal+0x114>)
 8008586:	480b      	ldr	r0, [pc, #44]	; (80085b4 <GenerateAD9833Signal+0x11c>)
 8008588:	f7fa fd62 	bl	8003050 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800858c:	2201      	movs	r2, #1
 800858e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008592:	4807      	ldr	r0, [pc, #28]	; (80085b0 <GenerateAD9833Signal+0x118>)
 8008594:	f7f9 f9f2 	bl	800197c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8008598:	200a      	movs	r0, #10
 800859a:	f7f8 fd25 	bl	8000fe8 <HAL_Delay>
}
 800859e:	bf00      	nop
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	20002a68 	.word	0x20002a68
 80085ac:	20002b10 	.word	0x20002b10
 80085b0:	48000400 	.word	0x48000400
 80085b4:	20002b70 	.word	0x20002b70
 80085b8:	200012c0 	.word	0x200012c0
 80085bc:	200012c4 	.word	0x200012c4
 80085c0:	20002c18 	.word	0x20002c18

080085c4 <SetSignalType>:

void SetSignalType(signal_type_T signal_type)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	4603      	mov	r3, r0
 80085cc:	71fb      	strb	r3, [r7, #7]
  if (signal_type == SIN)
 80085ce:	79fb      	ldrb	r3, [r7, #7]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d107      	bne.n	80085e4 <SetSignalType+0x20>
  {
    control_reg[0] &= ~(0b100010);
 80085d4:	4b18      	ldr	r3, [pc, #96]	; (8008638 <SetSignalType+0x74>)
 80085d6:	881b      	ldrh	r3, [r3, #0]
 80085d8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80085dc:	b29a      	uxth	r2, r3
 80085de:	4b16      	ldr	r3, [pc, #88]	; (8008638 <SetSignalType+0x74>)
 80085e0:	801a      	strh	r2, [r3, #0]
  else if (signal_type == SQUARE)
  {
    control_reg[0] &= ~(0b10);
    control_reg[0] |= 0b101000;
  }
}
 80085e2:	e022      	b.n	800862a <SetSignalType+0x66>
  else if (signal_type == TRIANGLE)
 80085e4:	79fb      	ldrb	r3, [r7, #7]
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d10e      	bne.n	8008608 <SetSignalType+0x44>
    control_reg[0] &= ~(0b100000);
 80085ea:	4b13      	ldr	r3, [pc, #76]	; (8008638 <SetSignalType+0x74>)
 80085ec:	881b      	ldrh	r3, [r3, #0]
 80085ee:	f023 0320 	bic.w	r3, r3, #32
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	4b10      	ldr	r3, [pc, #64]	; (8008638 <SetSignalType+0x74>)
 80085f6:	801a      	strh	r2, [r3, #0]
    control_reg[0] |= 0b10;
 80085f8:	4b0f      	ldr	r3, [pc, #60]	; (8008638 <SetSignalType+0x74>)
 80085fa:	881b      	ldrh	r3, [r3, #0]
 80085fc:	f043 0302 	orr.w	r3, r3, #2
 8008600:	b29a      	uxth	r2, r3
 8008602:	4b0d      	ldr	r3, [pc, #52]	; (8008638 <SetSignalType+0x74>)
 8008604:	801a      	strh	r2, [r3, #0]
}
 8008606:	e010      	b.n	800862a <SetSignalType+0x66>
  else if (signal_type == SQUARE)
 8008608:	79fb      	ldrb	r3, [r7, #7]
 800860a:	2b02      	cmp	r3, #2
 800860c:	d10d      	bne.n	800862a <SetSignalType+0x66>
    control_reg[0] &= ~(0b10);
 800860e:	4b0a      	ldr	r3, [pc, #40]	; (8008638 <SetSignalType+0x74>)
 8008610:	881b      	ldrh	r3, [r3, #0]
 8008612:	f023 0302 	bic.w	r3, r3, #2
 8008616:	b29a      	uxth	r2, r3
 8008618:	4b07      	ldr	r3, [pc, #28]	; (8008638 <SetSignalType+0x74>)
 800861a:	801a      	strh	r2, [r3, #0]
    control_reg[0] |= 0b101000;
 800861c:	4b06      	ldr	r3, [pc, #24]	; (8008638 <SetSignalType+0x74>)
 800861e:	881b      	ldrh	r3, [r3, #0]
 8008620:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8008624:	b29a      	uxth	r2, r3
 8008626:	4b04      	ldr	r3, [pc, #16]	; (8008638 <SetSignalType+0x74>)
 8008628:	801a      	strh	r2, [r3, #0]
}
 800862a:	bf00      	nop
 800862c:	370c      	adds	r7, #12
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	20002a68 	.word	0x20002a68
 800863c:	00000000 	.word	0x00000000

08008640 <CalculateFrequency>:

void CalculateFrequency(uint32_t freq)
{
 8008640:	b590      	push	{r4, r7, lr}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
	freq_reg_value = (uint32_t)freq * 10.737;
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f7f7 ff6b 	bl	8000524 <__aeabi_ui2d>
 800864e:	a323      	add	r3, pc, #140	; (adr r3, 80086dc <CalculateFrequency+0x9c>)
 8008650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008654:	f7f7 ffe0 	bl	8000618 <__aeabi_dmul>
 8008658:	4603      	mov	r3, r0
 800865a:	460c      	mov	r4, r1
 800865c:	4618      	mov	r0, r3
 800865e:	4621      	mov	r1, r4
 8008660:	f7f8 fab2 	bl	8000bc8 <__aeabi_d2uiz>
 8008664:	4602      	mov	r2, r0
 8008666:	4b1a      	ldr	r3, [pc, #104]	; (80086d0 <CalculateFrequency+0x90>)
 8008668:	601a      	str	r2, [r3, #0]
	freq0_reg_lsb[0] = (freq_reg_value & ~(0xFFFC000));
 800866a:	4b19      	ldr	r3, [pc, #100]	; (80086d0 <CalculateFrequency+0x90>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	b29b      	uxth	r3, r3
 8008670:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008674:	b29a      	uxth	r2, r3
 8008676:	4b17      	ldr	r3, [pc, #92]	; (80086d4 <CalculateFrequency+0x94>)
 8008678:	801a      	strh	r2, [r3, #0]
	freq0_reg_lsb[0] |= 0x4000;
 800867a:	4b16      	ldr	r3, [pc, #88]	; (80086d4 <CalculateFrequency+0x94>)
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008682:	b29a      	uxth	r2, r3
 8008684:	4b13      	ldr	r3, [pc, #76]	; (80086d4 <CalculateFrequency+0x94>)
 8008686:	801a      	strh	r2, [r3, #0]
	freq0_reg_lsb[0] &= ~(0x8000);
 8008688:	4b12      	ldr	r3, [pc, #72]	; (80086d4 <CalculateFrequency+0x94>)
 800868a:	881b      	ldrh	r3, [r3, #0]
 800868c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008690:	b29a      	uxth	r2, r3
 8008692:	4b10      	ldr	r3, [pc, #64]	; (80086d4 <CalculateFrequency+0x94>)
 8008694:	801a      	strh	r2, [r3, #0]
	freq0_reg_msb[0] = (freq_reg_value & 0xFFFC000) >> 14;
 8008696:	4b0e      	ldr	r3, [pc, #56]	; (80086d0 <CalculateFrequency+0x90>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	0b9b      	lsrs	r3, r3, #14
 800869c:	b29b      	uxth	r3, r3
 800869e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	4b0c      	ldr	r3, [pc, #48]	; (80086d8 <CalculateFrequency+0x98>)
 80086a6:	801a      	strh	r2, [r3, #0]
	freq0_reg_msb[0] |= 0x4000;
 80086a8:	4b0b      	ldr	r3, [pc, #44]	; (80086d8 <CalculateFrequency+0x98>)
 80086aa:	881b      	ldrh	r3, [r3, #0]
 80086ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	4b09      	ldr	r3, [pc, #36]	; (80086d8 <CalculateFrequency+0x98>)
 80086b4:	801a      	strh	r2, [r3, #0]
	freq0_reg_msb[0] &= ~(0x8000);
 80086b6:	4b08      	ldr	r3, [pc, #32]	; (80086d8 <CalculateFrequency+0x98>)
 80086b8:	881b      	ldrh	r3, [r3, #0]
 80086ba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80086be:	b29a      	uxth	r2, r3
 80086c0:	4b05      	ldr	r3, [pc, #20]	; (80086d8 <CalculateFrequency+0x98>)
 80086c2:	801a      	strh	r2, [r3, #0]
}
 80086c4:	bf00      	nop
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd90      	pop	{r4, r7, pc}
 80086cc:	f3af 8000 	nop.w
 80086d0:	20002b1c 	.word	0x20002b1c
 80086d4:	200012c0 	.word	0x200012c0
 80086d8:	200012c4 	.word	0x200012c4
 80086dc:	10624dd3 	.word	0x10624dd3
 80086e0:	40257958 	.word	0x40257958

080086e4 <GeneratePWMSignal>:

void GeneratePWMSignal(uint8_t duty, uint32_t freq)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	4603      	mov	r3, r0
 80086ec:	6039      	str	r1, [r7, #0]
 80086ee:	71fb      	strb	r3, [r7, #7]
	PWM_Prescaler = (640000/freq) - 1;
 80086f0:	4a09      	ldr	r2, [pc, #36]	; (8008718 <GeneratePWMSignal+0x34>)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086f8:	3b01      	subs	r3, #1
 80086fa:	4a08      	ldr	r2, [pc, #32]	; (800871c <GeneratePWMSignal+0x38>)
 80086fc:	6013      	str	r3, [r2, #0]
	TIM1->PSC = PWM_Prescaler;
 80086fe:	4a08      	ldr	r2, [pc, #32]	; (8008720 <GeneratePWMSignal+0x3c>)
 8008700:	4b06      	ldr	r3, [pc, #24]	; (800871c <GeneratePWMSignal+0x38>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	6293      	str	r3, [r2, #40]	; 0x28
	TIM1->CCR3 = duty;
 8008706:	4a06      	ldr	r2, [pc, #24]	; (8008720 <GeneratePWMSignal+0x3c>)
 8008708:	79fb      	ldrb	r3, [r7, #7]
 800870a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr
 8008718:	0009c400 	.word	0x0009c400
 800871c:	20002a6c 	.word	0x20002a6c
 8008720:	40012c00 	.word	0x40012c00

08008724 <MultiplexerChannelSelect>:

void MultiplexerChannelSelect(multiplexer_select_T channel)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	4603      	mov	r3, r0
 800872c:	71fb      	strb	r3, [r7, #7]
	switch(channel)
 800872e:	79fb      	ldrb	r3, [r7, #7]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d00f      	beq.n	8008754 <MultiplexerChannelSelect+0x30>
 8008734:	2b02      	cmp	r3, #2
 8008736:	d018      	beq.n	800876a <MultiplexerChannelSelect+0x46>
 8008738:	2b00      	cmp	r3, #0
 800873a:	d000      	beq.n	800873e <MultiplexerChannelSelect+0x1a>
			HAL_GPIO_WritePin(MULTIPLEXER_S0_GPIO_Port, MULTIPLEXER_S0_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(MULTIPLEXER_S1_GPIO_Port, MULTIPLEXER_S1_Pin, GPIO_PIN_SET);
			break;
		}
	}
}
 800873c:	e020      	b.n	8008780 <MultiplexerChannelSelect+0x5c>
			HAL_GPIO_WritePin(MULTIPLEXER_S0_GPIO_Port, MULTIPLEXER_S0_Pin, GPIO_PIN_RESET);
 800873e:	2200      	movs	r2, #0
 8008740:	2102      	movs	r1, #2
 8008742:	4811      	ldr	r0, [pc, #68]	; (8008788 <MultiplexerChannelSelect+0x64>)
 8008744:	f7f9 f91a 	bl	800197c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MULTIPLEXER_S1_GPIO_Port, MULTIPLEXER_S1_Pin, GPIO_PIN_RESET);
 8008748:	2200      	movs	r2, #0
 800874a:	2104      	movs	r1, #4
 800874c:	480e      	ldr	r0, [pc, #56]	; (8008788 <MultiplexerChannelSelect+0x64>)
 800874e:	f7f9 f915 	bl	800197c <HAL_GPIO_WritePin>
			break;
 8008752:	e015      	b.n	8008780 <MultiplexerChannelSelect+0x5c>
			HAL_GPIO_WritePin(MULTIPLEXER_S0_GPIO_Port, MULTIPLEXER_S0_Pin, GPIO_PIN_SET);
 8008754:	2201      	movs	r2, #1
 8008756:	2102      	movs	r1, #2
 8008758:	480b      	ldr	r0, [pc, #44]	; (8008788 <MultiplexerChannelSelect+0x64>)
 800875a:	f7f9 f90f 	bl	800197c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MULTIPLEXER_S1_GPIO_Port, MULTIPLEXER_S1_Pin, GPIO_PIN_RESET);
 800875e:	2200      	movs	r2, #0
 8008760:	2104      	movs	r1, #4
 8008762:	4809      	ldr	r0, [pc, #36]	; (8008788 <MultiplexerChannelSelect+0x64>)
 8008764:	f7f9 f90a 	bl	800197c <HAL_GPIO_WritePin>
			break;
 8008768:	e00a      	b.n	8008780 <MultiplexerChannelSelect+0x5c>
			HAL_GPIO_WritePin(MULTIPLEXER_S0_GPIO_Port, MULTIPLEXER_S0_Pin, GPIO_PIN_RESET);
 800876a:	2200      	movs	r2, #0
 800876c:	2102      	movs	r1, #2
 800876e:	4806      	ldr	r0, [pc, #24]	; (8008788 <MultiplexerChannelSelect+0x64>)
 8008770:	f7f9 f904 	bl	800197c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MULTIPLEXER_S1_GPIO_Port, MULTIPLEXER_S1_Pin, GPIO_PIN_SET);
 8008774:	2201      	movs	r2, #1
 8008776:	2104      	movs	r1, #4
 8008778:	4803      	ldr	r0, [pc, #12]	; (8008788 <MultiplexerChannelSelect+0x64>)
 800877a:	f7f9 f8ff 	bl	800197c <HAL_GPIO_WritePin>
			break;
 800877e:	bf00      	nop
}
 8008780:	bf00      	nop
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	48000400 	.word	0x48000400
 800878c:	00000000 	.word	0x00000000

08008790 <gaussrand>:

double gaussrand()
{
 8008790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
    static double U, V;
    static int phase = 0;
    double Z;

    if(phase == 0) {
 8008796:	4b5c      	ldr	r3, [pc, #368]	; (8008908 <gaussrand+0x178>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d164      	bne.n	8008868 <gaussrand+0xd8>
        U = (rand() + 1.) / (RAND_MAX + 2.);
 800879e:	f000 fc51 	bl	8009044 <rand>
 80087a2:	4603      	mov	r3, r0
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7f7 fecd 	bl	8000544 <__aeabi_i2d>
 80087aa:	f04f 0200 	mov.w	r2, #0
 80087ae:	4b57      	ldr	r3, [pc, #348]	; (800890c <gaussrand+0x17c>)
 80087b0:	f7f7 fd7c 	bl	80002ac <__adddf3>
 80087b4:	4603      	mov	r3, r0
 80087b6:	460c      	mov	r4, r1
 80087b8:	4618      	mov	r0, r3
 80087ba:	4621      	mov	r1, r4
 80087bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80087c0:	4b53      	ldr	r3, [pc, #332]	; (8008910 <gaussrand+0x180>)
 80087c2:	f7f8 f853 	bl	800086c <__aeabi_ddiv>
 80087c6:	4603      	mov	r3, r0
 80087c8:	460c      	mov	r4, r1
 80087ca:	4a52      	ldr	r2, [pc, #328]	; (8008914 <gaussrand+0x184>)
 80087cc:	e9c2 3400 	strd	r3, r4, [r2]
        V = rand() / (RAND_MAX + 1.);
 80087d0:	f000 fc38 	bl	8009044 <rand>
 80087d4:	4603      	mov	r3, r0
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7f7 feb4 	bl	8000544 <__aeabi_i2d>
 80087dc:	f04f 0200 	mov.w	r2, #0
 80087e0:	4b4b      	ldr	r3, [pc, #300]	; (8008910 <gaussrand+0x180>)
 80087e2:	f7f8 f843 	bl	800086c <__aeabi_ddiv>
 80087e6:	4603      	mov	r3, r0
 80087e8:	460c      	mov	r4, r1
 80087ea:	4a4b      	ldr	r2, [pc, #300]	; (8008918 <gaussrand+0x188>)
 80087ec:	e9c2 3400 	strd	r3, r4, [r2]
        Z = sqrt(-2 * log(U)) * sin(2 * PI * V);
 80087f0:	4b48      	ldr	r3, [pc, #288]	; (8008914 <gaussrand+0x184>)
 80087f2:	ed93 7b00 	vldr	d7, [r3]
 80087f6:	eeb0 0a47 	vmov.f32	s0, s14
 80087fa:	eef0 0a67 	vmov.f32	s1, s15
 80087fe:	f001 f98f 	bl	8009b20 <log>
 8008802:	ec51 0b10 	vmov	r0, r1, d0
 8008806:	f04f 0200 	mov.w	r2, #0
 800880a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800880e:	f7f7 ff03 	bl	8000618 <__aeabi_dmul>
 8008812:	4603      	mov	r3, r0
 8008814:	460c      	mov	r4, r1
 8008816:	ec44 3b17 	vmov	d7, r3, r4
 800881a:	eeb0 0a47 	vmov.f32	s0, s14
 800881e:	eef0 0a67 	vmov.f32	s1, s15
 8008822:	f001 f9fd 	bl	8009c20 <sqrt>
 8008826:	ec56 5b10 	vmov	r5, r6, d0
 800882a:	4b3b      	ldr	r3, [pc, #236]	; (8008918 <gaussrand+0x188>)
 800882c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008830:	a333      	add	r3, pc, #204	; (adr r3, 8008900 <gaussrand+0x170>)
 8008832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008836:	f7f7 feef 	bl	8000618 <__aeabi_dmul>
 800883a:	4603      	mov	r3, r0
 800883c:	460c      	mov	r4, r1
 800883e:	ec44 3b17 	vmov	d7, r3, r4
 8008842:	eeb0 0a47 	vmov.f32	s0, s14
 8008846:	eef0 0a67 	vmov.f32	s1, s15
 800884a:	f001 f921 	bl	8009a90 <sin>
 800884e:	ec54 3b10 	vmov	r3, r4, d0
 8008852:	461a      	mov	r2, r3
 8008854:	4623      	mov	r3, r4
 8008856:	4628      	mov	r0, r5
 8008858:	4631      	mov	r1, r6
 800885a:	f7f7 fedd 	bl	8000618 <__aeabi_dmul>
 800885e:	4603      	mov	r3, r0
 8008860:	460c      	mov	r4, r1
 8008862:	e9c7 3400 	strd	r3, r4, [r7]
 8008866:	e03a      	b.n	80088de <gaussrand+0x14e>
    } else
        Z = sqrt(-2 * log(U)) * cos(2 * PI * V);
 8008868:	4b2a      	ldr	r3, [pc, #168]	; (8008914 <gaussrand+0x184>)
 800886a:	ed93 7b00 	vldr	d7, [r3]
 800886e:	eeb0 0a47 	vmov.f32	s0, s14
 8008872:	eef0 0a67 	vmov.f32	s1, s15
 8008876:	f001 f953 	bl	8009b20 <log>
 800887a:	ec51 0b10 	vmov	r0, r1, d0
 800887e:	f04f 0200 	mov.w	r2, #0
 8008882:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8008886:	f7f7 fec7 	bl	8000618 <__aeabi_dmul>
 800888a:	4603      	mov	r3, r0
 800888c:	460c      	mov	r4, r1
 800888e:	ec44 3b17 	vmov	d7, r3, r4
 8008892:	eeb0 0a47 	vmov.f32	s0, s14
 8008896:	eef0 0a67 	vmov.f32	s1, s15
 800889a:	f001 f9c1 	bl	8009c20 <sqrt>
 800889e:	ec56 5b10 	vmov	r5, r6, d0
 80088a2:	4b1d      	ldr	r3, [pc, #116]	; (8008918 <gaussrand+0x188>)
 80088a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80088a8:	a315      	add	r3, pc, #84	; (adr r3, 8008900 <gaussrand+0x170>)
 80088aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ae:	f7f7 feb3 	bl	8000618 <__aeabi_dmul>
 80088b2:	4603      	mov	r3, r0
 80088b4:	460c      	mov	r4, r1
 80088b6:	ec44 3b17 	vmov	d7, r3, r4
 80088ba:	eeb0 0a47 	vmov.f32	s0, s14
 80088be:	eef0 0a67 	vmov.f32	s1, s15
 80088c2:	f001 f8a1 	bl	8009a08 <cos>
 80088c6:	ec54 3b10 	vmov	r3, r4, d0
 80088ca:	461a      	mov	r2, r3
 80088cc:	4623      	mov	r3, r4
 80088ce:	4628      	mov	r0, r5
 80088d0:	4631      	mov	r1, r6
 80088d2:	f7f7 fea1 	bl	8000618 <__aeabi_dmul>
 80088d6:	4603      	mov	r3, r0
 80088d8:	460c      	mov	r4, r1
 80088da:	e9c7 3400 	strd	r3, r4, [r7]

    phase = 1 - phase;
 80088de:	4b0a      	ldr	r3, [pc, #40]	; (8008908 <gaussrand+0x178>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f1c3 0301 	rsb	r3, r3, #1
 80088e6:	4a08      	ldr	r2, [pc, #32]	; (8008908 <gaussrand+0x178>)
 80088e8:	6013      	str	r3, [r2, #0]

    return Z;
 80088ea:	e9d7 3400 	ldrd	r3, r4, [r7]
 80088ee:	ec44 3b17 	vmov	d7, r3, r4
}
 80088f2:	eeb0 0a47 	vmov.f32	s0, s14
 80088f6:	eef0 0a67 	vmov.f32	s1, s15
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008900:	54524550 	.word	0x54524550
 8008904:	401921fb 	.word	0x401921fb
 8008908:	20002a40 	.word	0x20002a40
 800890c:	3ff00000 	.word	0x3ff00000
 8008910:	41e00000 	.word	0x41e00000
 8008914:	20002a48 	.word	0x20002a48
 8008918:	20002a50 	.word	0x20002a50

0800891c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800892c:	d11b      	bne.n	8008966 <HAL_TIM_PeriodElapsedCallback+0x4a>
	{
		if(SAWTOOTH == dacSignalSelect)
 800892e:	4b10      	ldr	r3, [pc, #64]	; (8008970 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d117      	bne.n	8008966 <HAL_TIM_PeriodElapsedCallback+0x4a>
		{
			  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, i);
 8008936:	4b0f      	ldr	r3, [pc, #60]	; (8008974 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2200      	movs	r2, #0
 800893c:	2100      	movs	r1, #0
 800893e:	480e      	ldr	r0, [pc, #56]	; (8008978 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8008940:	f7f8 fcf4 	bl	800132c <HAL_DAC_SetValue>
			  i = i + dacStep;
 8008944:	4b0d      	ldr	r3, [pc, #52]	; (800897c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8008946:	881b      	ldrh	r3, [r3, #0]
 8008948:	461a      	mov	r2, r3
 800894a:	4b0a      	ldr	r3, [pc, #40]	; (8008974 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4413      	add	r3, r2
 8008950:	4a08      	ldr	r2, [pc, #32]	; (8008974 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8008952:	6013      	str	r3, [r2, #0]
			  if (i >= 4095)
 8008954:	4b07      	ldr	r3, [pc, #28]	; (8008974 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f640 72fe 	movw	r2, #4094	; 0xffe
 800895c:	4293      	cmp	r3, r2
 800895e:	d902      	bls.n	8008966 <HAL_TIM_PeriodElapsedCallback+0x4a>
			  {
				  i = 0;
 8008960:	4b04      	ldr	r3, [pc, #16]	; (8008974 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8008962:	2200      	movs	r2, #0
 8008964:	601a      	str	r2, [r3, #0]
			  }
		}
	}
}
 8008966:	bf00      	nop
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	20002b22 	.word	0x20002b22
 8008974:	20002a38 	.word	0x20002a38
 8008978:	20002a78 	.word	0x20002a78
 800897c:	20002a74 	.word	0x20002a74

08008980 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8008980:	b5b0      	push	{r4, r5, r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (setSignalFlag == 1) {
 8008988:	4b33      	ldr	r3, [pc, #204]	; (8008a58 <StartDefaultTask+0xd8>)
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d12f      	bne.n	80089f0 <StartDefaultTask+0x70>
	  		  if (multiplexerChannelSelect == AD9833)
 8008990:	4b32      	ldr	r3, [pc, #200]	; (8008a5c <StartDefaultTask+0xdc>)
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10d      	bne.n	80089b4 <StartDefaultTask+0x34>
	  		  {
	  			  GenerateAD9833Signal(setSignalType, setSignalFreq);
 8008998:	4b31      	ldr	r3, [pc, #196]	; (8008a60 <StartDefaultTask+0xe0>)
 800899a:	781a      	ldrb	r2, [r3, #0]
 800899c:	4b31      	ldr	r3, [pc, #196]	; (8008a64 <StartDefaultTask+0xe4>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4619      	mov	r1, r3
 80089a2:	4610      	mov	r0, r2
 80089a4:	f7ff fd78 	bl	8008498 <GenerateAD9833Signal>
	  			  MultiplexerChannelSelect(multiplexerChannelSelect);
 80089a8:	4b2c      	ldr	r3, [pc, #176]	; (8008a5c <StartDefaultTask+0xdc>)
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7ff feb9 	bl	8008724 <MultiplexerChannelSelect>
 80089b2:	e01a      	b.n	80089ea <StartDefaultTask+0x6a>
	  		  }
	  		  else if (multiplexerChannelSelect == CA_CH1)
 80089b4:	4b29      	ldr	r3, [pc, #164]	; (8008a5c <StartDefaultTask+0xdc>)
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d105      	bne.n	80089c8 <StartDefaultTask+0x48>
	  		  {
	  			  MultiplexerChannelSelect(multiplexerChannelSelect);
 80089bc:	4b27      	ldr	r3, [pc, #156]	; (8008a5c <StartDefaultTask+0xdc>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7ff feaf 	bl	8008724 <MultiplexerChannelSelect>
 80089c6:	e010      	b.n	80089ea <StartDefaultTask+0x6a>
	  		  }
	  		  else if (multiplexerChannelSelect == PWM)
 80089c8:	4b24      	ldr	r3, [pc, #144]	; (8008a5c <StartDefaultTask+0xdc>)
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d10c      	bne.n	80089ea <StartDefaultTask+0x6a>
	  		  {
	  			  GeneratePWMSignal(PWM_Duty, PWM_Freq);
 80089d0:	4b25      	ldr	r3, [pc, #148]	; (8008a68 <StartDefaultTask+0xe8>)
 80089d2:	781a      	ldrb	r2, [r3, #0]
 80089d4:	4b25      	ldr	r3, [pc, #148]	; (8008a6c <StartDefaultTask+0xec>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4619      	mov	r1, r3
 80089da:	4610      	mov	r0, r2
 80089dc:	f7ff fe82 	bl	80086e4 <GeneratePWMSignal>
	  			  MultiplexerChannelSelect(multiplexerChannelSelect);
 80089e0:	4b1e      	ldr	r3, [pc, #120]	; (8008a5c <StartDefaultTask+0xdc>)
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7ff fe9d 	bl	8008724 <MultiplexerChannelSelect>
	  		  }
	  		  setSignalFlag = 0;
 80089ea:	4b1b      	ldr	r3, [pc, #108]	; (8008a58 <StartDefaultTask+0xd8>)
 80089ec:	2200      	movs	r2, #0
 80089ee:	701a      	strb	r2, [r3, #0]
	  		}

	  	  if (GAUSSIAN == dacSignalSelect)
 80089f0:	4b1f      	ldr	r3, [pc, #124]	; (8008a70 <StartDefaultTask+0xf0>)
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d1c7      	bne.n	8008988 <StartDefaultTask+0x8>
	  	  {
	  		  gauss_value = gauss_std_dev * gaussrand() + gauss_mean;
 80089f8:	4b1e      	ldr	r3, [pc, #120]	; (8008a74 <StartDefaultTask+0xf4>)
 80089fa:	881b      	ldrh	r3, [r3, #0]
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7f7 fda1 	bl	8000544 <__aeabi_i2d>
 8008a02:	4604      	mov	r4, r0
 8008a04:	460d      	mov	r5, r1
 8008a06:	f7ff fec3 	bl	8008790 <gaussrand>
 8008a0a:	ec53 2b10 	vmov	r2, r3, d0
 8008a0e:	4620      	mov	r0, r4
 8008a10:	4629      	mov	r1, r5
 8008a12:	f7f7 fe01 	bl	8000618 <__aeabi_dmul>
 8008a16:	4603      	mov	r3, r0
 8008a18:	460c      	mov	r4, r1
 8008a1a:	4625      	mov	r5, r4
 8008a1c:	461c      	mov	r4, r3
 8008a1e:	4b16      	ldr	r3, [pc, #88]	; (8008a78 <StartDefaultTask+0xf8>)
 8008a20:	881b      	ldrh	r3, [r3, #0]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7f7 fd8e 	bl	8000544 <__aeabi_i2d>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	4629      	mov	r1, r5
 8008a30:	f7f7 fc3c 	bl	80002ac <__adddf3>
 8008a34:	4603      	mov	r3, r0
 8008a36:	460c      	mov	r4, r1
 8008a38:	4618      	mov	r0, r3
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	f7f8 f8c4 	bl	8000bc8 <__aeabi_d2uiz>
 8008a40:	4603      	mov	r3, r0
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	4b0d      	ldr	r3, [pc, #52]	; (8008a7c <StartDefaultTask+0xfc>)
 8008a46:	801a      	strh	r2, [r3, #0]
	  		  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, gauss_value);
 8008a48:	4b0c      	ldr	r3, [pc, #48]	; (8008a7c <StartDefaultTask+0xfc>)
 8008a4a:	881b      	ldrh	r3, [r3, #0]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	2100      	movs	r1, #0
 8008a50:	480b      	ldr	r0, [pc, #44]	; (8008a80 <StartDefaultTask+0x100>)
 8008a52:	f7f8 fc6b 	bl	800132c <HAL_DAC_SetValue>
	  if (setSignalFlag == 1) {
 8008a56:	e797      	b.n	8008988 <StartDefaultTask+0x8>
 8008a58:	200025b2 	.word	0x200025b2
 8008a5c:	20002b18 	.word	0x20002b18
 8008a60:	20002a6a 	.word	0x20002a6a
 8008a64:	20002c20 	.word	0x20002c20
 8008a68:	20002c24 	.word	0x20002c24
 8008a6c:	20002b24 	.word	0x20002b24
 8008a70:	20002b22 	.word	0x20002b22
 8008a74:	20002b20 	.word	0x20002b20
 8008a78:	20002b28 	.word	0x20002b28
 8008a7c:	20002b12 	.word	0x20002b12
 8008a80:	20002a78 	.word	0x20002a78

08008a84 <RTOS_1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_1ms */
void RTOS_1ms(void const * argument)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_1ms */

	const TickType_t xFrequency = 1;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay( xFrequency / portTICK_RATE_MS );
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f7fd f939 	bl	8005d08 <vTaskDelay>
 8008a96:	e7fb      	b.n	8008a90 <RTOS_1ms+0xc>

08008a98 <RTOS_10ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_10ms */
void RTOS_10ms(void const * argument)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_10ms */

	const TickType_t xFrequency = 10;
 8008aa0:	230a      	movs	r3, #10
 8008aa2:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay( xFrequency / portTICK_RATE_MS );
 8008aa4:	68f8      	ldr	r0, [r7, #12]
 8008aa6:	f7fd f92f 	bl	8005d08 <vTaskDelay>
 8008aaa:	e7fb      	b.n	8008aa4 <RTOS_10ms+0xc>

08008aac <RTOS_100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_100ms */
void RTOS_100ms(void const * argument)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_100ms */

	const TickType_t xFrequency = 100;
 8008ab4:	2364      	movs	r3, #100	; 0x64
 8008ab6:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay( xFrequency / portTICK_RATE_MS );
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f7fd f925 	bl	8005d08 <vTaskDelay>
 8008abe:	e7fb      	b.n	8008ab8 <RTOS_100ms+0xc>

08008ac0 <RTOS_1000ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_1000ms */
void RTOS_1000ms(void const * argument)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_1000ms */

	const TickType_t xFrequency = 1000;
 8008ac8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008acc:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay( xFrequency / portTICK_RATE_MS );
 8008ace:	68f8      	ldr	r0, [r7, #12]
 8008ad0:	f7fd f91a 	bl	8005d08 <vTaskDelay>
 8008ad4:	e7fb      	b.n	8008ace <RTOS_1000ms+0xe>

08008ad6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008ada:	bf00      	nop
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008aea:	4b11      	ldr	r3, [pc, #68]	; (8008b30 <HAL_MspInit+0x4c>)
 8008aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aee:	4a10      	ldr	r2, [pc, #64]	; (8008b30 <HAL_MspInit+0x4c>)
 8008af0:	f043 0301 	orr.w	r3, r3, #1
 8008af4:	6613      	str	r3, [r2, #96]	; 0x60
 8008af6:	4b0e      	ldr	r3, [pc, #56]	; (8008b30 <HAL_MspInit+0x4c>)
 8008af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008afa:	f003 0301 	and.w	r3, r3, #1
 8008afe:	607b      	str	r3, [r7, #4]
 8008b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008b02:	4b0b      	ldr	r3, [pc, #44]	; (8008b30 <HAL_MspInit+0x4c>)
 8008b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b06:	4a0a      	ldr	r2, [pc, #40]	; (8008b30 <HAL_MspInit+0x4c>)
 8008b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8008b0e:	4b08      	ldr	r3, [pc, #32]	; (8008b30 <HAL_MspInit+0x4c>)
 8008b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b16:	603b      	str	r3, [r7, #0]
 8008b18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	210f      	movs	r1, #15
 8008b1e:	f06f 0001 	mvn.w	r0, #1
 8008b22:	f7f8 fb5e 	bl	80011e2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008b26:	bf00      	nop
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	40021000 	.word	0x40021000

08008b34 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b08a      	sub	sp, #40	; 0x28
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b3c:	f107 0314 	add.w	r3, r7, #20
 8008b40:	2200      	movs	r2, #0
 8008b42:	601a      	str	r2, [r3, #0]
 8008b44:	605a      	str	r2, [r3, #4]
 8008b46:	609a      	str	r2, [r3, #8]
 8008b48:	60da      	str	r2, [r3, #12]
 8008b4a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a15      	ldr	r2, [pc, #84]	; (8008ba8 <HAL_DAC_MspInit+0x74>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d124      	bne.n	8008ba0 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8008b56:	4b15      	ldr	r3, [pc, #84]	; (8008bac <HAL_DAC_MspInit+0x78>)
 8008b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b5a:	4a14      	ldr	r2, [pc, #80]	; (8008bac <HAL_DAC_MspInit+0x78>)
 8008b5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b60:	6593      	str	r3, [r2, #88]	; 0x58
 8008b62:	4b12      	ldr	r3, [pc, #72]	; (8008bac <HAL_DAC_MspInit+0x78>)
 8008b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b6a:	613b      	str	r3, [r7, #16]
 8008b6c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b6e:	4b0f      	ldr	r3, [pc, #60]	; (8008bac <HAL_DAC_MspInit+0x78>)
 8008b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b72:	4a0e      	ldr	r2, [pc, #56]	; (8008bac <HAL_DAC_MspInit+0x78>)
 8008b74:	f043 0301 	orr.w	r3, r3, #1
 8008b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b7a:	4b0c      	ldr	r3, [pc, #48]	; (8008bac <HAL_DAC_MspInit+0x78>)
 8008b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b7e:	f003 0301 	and.w	r3, r3, #1
 8008b82:	60fb      	str	r3, [r7, #12]
 8008b84:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8008b86:	2330      	movs	r3, #48	; 0x30
 8008b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b92:	f107 0314 	add.w	r3, r7, #20
 8008b96:	4619      	mov	r1, r3
 8008b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008b9c:	f7f8 fd46 	bl	800162c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8008ba0:	bf00      	nop
 8008ba2:	3728      	adds	r7, #40	; 0x28
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	40007400 	.word	0x40007400
 8008bac:	40021000 	.word	0x40021000

08008bb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b08a      	sub	sp, #40	; 0x28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bb8:	f107 0314 	add.w	r3, r7, #20
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	601a      	str	r2, [r3, #0]
 8008bc0:	605a      	str	r2, [r3, #4]
 8008bc2:	609a      	str	r2, [r3, #8]
 8008bc4:	60da      	str	r2, [r3, #12]
 8008bc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a25      	ldr	r2, [pc, #148]	; (8008c64 <HAL_SPI_MspInit+0xb4>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d144      	bne.n	8008c5c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008bd2:	4b25      	ldr	r3, [pc, #148]	; (8008c68 <HAL_SPI_MspInit+0xb8>)
 8008bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bd6:	4a24      	ldr	r2, [pc, #144]	; (8008c68 <HAL_SPI_MspInit+0xb8>)
 8008bd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008bdc:	6613      	str	r3, [r2, #96]	; 0x60
 8008bde:	4b22      	ldr	r3, [pc, #136]	; (8008c68 <HAL_SPI_MspInit+0xb8>)
 8008be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008be2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008be6:	613b      	str	r3, [r7, #16]
 8008be8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bea:	4b1f      	ldr	r3, [pc, #124]	; (8008c68 <HAL_SPI_MspInit+0xb8>)
 8008bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bee:	4a1e      	ldr	r2, [pc, #120]	; (8008c68 <HAL_SPI_MspInit+0xb8>)
 8008bf0:	f043 0301 	orr.w	r3, r3, #1
 8008bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008bf6:	4b1c      	ldr	r3, [pc, #112]	; (8008c68 <HAL_SPI_MspInit+0xb8>)
 8008bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bfa:	f003 0301 	and.w	r3, r3, #1
 8008bfe:	60fb      	str	r3, [r7, #12]
 8008c00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008c02:	4b19      	ldr	r3, [pc, #100]	; (8008c68 <HAL_SPI_MspInit+0xb8>)
 8008c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c06:	4a18      	ldr	r2, [pc, #96]	; (8008c68 <HAL_SPI_MspInit+0xb8>)
 8008c08:	f043 0302 	orr.w	r3, r3, #2
 8008c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008c0e:	4b16      	ldr	r3, [pc, #88]	; (8008c68 <HAL_SPI_MspInit+0xb8>)
 8008c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c12:	f003 0302 	and.w	r3, r3, #2
 8008c16:	60bb      	str	r3, [r7, #8]
 8008c18:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = SDATA_Pin;
 8008c1a:	2380      	movs	r3, #128	; 0x80
 8008c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c1e:	2302      	movs	r3, #2
 8008c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c22:	2300      	movs	r3, #0
 8008c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c26:	2303      	movs	r3, #3
 8008c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008c2a:	2305      	movs	r3, #5
 8008c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDATA_GPIO_Port, &GPIO_InitStruct);
 8008c2e:	f107 0314 	add.w	r3, r7, #20
 8008c32:	4619      	mov	r1, r3
 8008c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008c38:	f7f8 fcf8 	bl	800162c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCLK_Pin;
 8008c3c:	2308      	movs	r3, #8
 8008c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c40:	2302      	movs	r3, #2
 8008c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c44:	2300      	movs	r3, #0
 8008c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008c4c:	2305      	movs	r3, #5
 8008c4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SCLK_GPIO_Port, &GPIO_InitStruct);
 8008c50:	f107 0314 	add.w	r3, r7, #20
 8008c54:	4619      	mov	r1, r3
 8008c56:	4805      	ldr	r0, [pc, #20]	; (8008c6c <HAL_SPI_MspInit+0xbc>)
 8008c58:	f7f8 fce8 	bl	800162c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008c5c:	bf00      	nop
 8008c5e:	3728      	adds	r7, #40	; 0x28
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	40013000 	.word	0x40013000
 8008c68:	40021000 	.word	0x40021000
 8008c6c:	48000400 	.word	0x48000400

08008c70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a16      	ldr	r2, [pc, #88]	; (8008cd8 <HAL_TIM_Base_MspInit+0x68>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d10c      	bne.n	8008c9c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008c82:	4b16      	ldr	r3, [pc, #88]	; (8008cdc <HAL_TIM_Base_MspInit+0x6c>)
 8008c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c86:	4a15      	ldr	r2, [pc, #84]	; (8008cdc <HAL_TIM_Base_MspInit+0x6c>)
 8008c88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008c8c:	6613      	str	r3, [r2, #96]	; 0x60
 8008c8e:	4b13      	ldr	r3, [pc, #76]	; (8008cdc <HAL_TIM_Base_MspInit+0x6c>)
 8008c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c96:	60fb      	str	r3, [r7, #12]
 8008c98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8008c9a:	e018      	b.n	8008cce <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ca4:	d113      	bne.n	8008cce <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008ca6:	4b0d      	ldr	r3, [pc, #52]	; (8008cdc <HAL_TIM_Base_MspInit+0x6c>)
 8008ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008caa:	4a0c      	ldr	r2, [pc, #48]	; (8008cdc <HAL_TIM_Base_MspInit+0x6c>)
 8008cac:	f043 0301 	orr.w	r3, r3, #1
 8008cb0:	6593      	str	r3, [r2, #88]	; 0x58
 8008cb2:	4b0a      	ldr	r3, [pc, #40]	; (8008cdc <HAL_TIM_Base_MspInit+0x6c>)
 8008cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cb6:	f003 0301 	and.w	r3, r3, #1
 8008cba:	60bb      	str	r3, [r7, #8]
 8008cbc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	2105      	movs	r1, #5
 8008cc2:	201c      	movs	r0, #28
 8008cc4:	f7f8 fa8d 	bl	80011e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008cc8:	201c      	movs	r0, #28
 8008cca:	f7f8 faa6 	bl	800121a <HAL_NVIC_EnableIRQ>
}
 8008cce:	bf00      	nop
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	40012c00 	.word	0x40012c00
 8008cdc:	40021000 	.word	0x40021000

08008ce0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b088      	sub	sp, #32
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ce8:	f107 030c 	add.w	r3, r7, #12
 8008cec:	2200      	movs	r2, #0
 8008cee:	601a      	str	r2, [r3, #0]
 8008cf0:	605a      	str	r2, [r3, #4]
 8008cf2:	609a      	str	r2, [r3, #8]
 8008cf4:	60da      	str	r2, [r3, #12]
 8008cf6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a12      	ldr	r2, [pc, #72]	; (8008d48 <HAL_TIM_MspPostInit+0x68>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d11d      	bne.n	8008d3e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d02:	4b12      	ldr	r3, [pc, #72]	; (8008d4c <HAL_TIM_MspPostInit+0x6c>)
 8008d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d06:	4a11      	ldr	r2, [pc, #68]	; (8008d4c <HAL_TIM_MspPostInit+0x6c>)
 8008d08:	f043 0301 	orr.w	r3, r3, #1
 8008d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d0e:	4b0f      	ldr	r3, [pc, #60]	; (8008d4c <HAL_TIM_MspPostInit+0x6c>)
 8008d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d12:	f003 0301 	and.w	r3, r3, #1
 8008d16:	60bb      	str	r3, [r7, #8]
 8008d18:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d20:	2302      	movs	r3, #2
 8008d22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d24:	2300      	movs	r3, #0
 8008d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d30:	f107 030c 	add.w	r3, r7, #12
 8008d34:	4619      	mov	r1, r3
 8008d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d3a:	f7f8 fc77 	bl	800162c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8008d3e:	bf00      	nop
 8008d40:	3720      	adds	r7, #32
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	40012c00 	.word	0x40012c00
 8008d4c:	40021000 	.word	0x40021000

08008d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b08a      	sub	sp, #40	; 0x28
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d58:	f107 0314 	add.w	r3, r7, #20
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	601a      	str	r2, [r3, #0]
 8008d60:	605a      	str	r2, [r3, #4]
 8008d62:	609a      	str	r2, [r3, #8]
 8008d64:	60da      	str	r2, [r3, #12]
 8008d66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a1b      	ldr	r2, [pc, #108]	; (8008ddc <HAL_UART_MspInit+0x8c>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d12f      	bne.n	8008dd2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8008d72:	4b1b      	ldr	r3, [pc, #108]	; (8008de0 <HAL_UART_MspInit+0x90>)
 8008d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d76:	4a1a      	ldr	r2, [pc, #104]	; (8008de0 <HAL_UART_MspInit+0x90>)
 8008d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8008d7e:	4b18      	ldr	r3, [pc, #96]	; (8008de0 <HAL_UART_MspInit+0x90>)
 8008d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d86:	613b      	str	r3, [r7, #16]
 8008d88:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008d8a:	4b15      	ldr	r3, [pc, #84]	; (8008de0 <HAL_UART_MspInit+0x90>)
 8008d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d8e:	4a14      	ldr	r2, [pc, #80]	; (8008de0 <HAL_UART_MspInit+0x90>)
 8008d90:	f043 0304 	orr.w	r3, r3, #4
 8008d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d96:	4b12      	ldr	r3, [pc, #72]	; (8008de0 <HAL_UART_MspInit+0x90>)
 8008d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d9a:	f003 0304 	and.w	r3, r3, #4
 8008d9e:	60fb      	str	r3, [r7, #12]
 8008da0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8008da2:	2330      	movs	r3, #48	; 0x30
 8008da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008da6:	2302      	movs	r3, #2
 8008da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008daa:	2300      	movs	r3, #0
 8008dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008dae:	2303      	movs	r3, #3
 8008db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008db2:	2307      	movs	r3, #7
 8008db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008db6:	f107 0314 	add.w	r3, r7, #20
 8008dba:	4619      	mov	r1, r3
 8008dbc:	4809      	ldr	r0, [pc, #36]	; (8008de4 <HAL_UART_MspInit+0x94>)
 8008dbe:	f7f8 fc35 	bl	800162c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	2105      	movs	r1, #5
 8008dc6:	2027      	movs	r0, #39	; 0x27
 8008dc8:	f7f8 fa0b 	bl	80011e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8008dcc:	2027      	movs	r0, #39	; 0x27
 8008dce:	f7f8 fa24 	bl	800121a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008dd2:	bf00      	nop
 8008dd4:	3728      	adds	r7, #40	; 0x28
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	40004800 	.word	0x40004800
 8008de0:	40021000 	.word	0x40021000
 8008de4:	48000800 	.word	0x48000800

08008de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008de8:	b480      	push	{r7}
 8008dea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008dec:	bf00      	nop
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr

08008df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008df6:	b480      	push	{r7}
 8008df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008dfa:	e7fe      	b.n	8008dfa <HardFault_Handler+0x4>

08008dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008e00:	e7fe      	b.n	8008e00 <MemManage_Handler+0x4>

08008e02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008e02:	b480      	push	{r7}
 8008e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008e06:	e7fe      	b.n	8008e06 <BusFault_Handler+0x4>

08008e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008e0c:	e7fe      	b.n	8008e0c <UsageFault_Handler+0x4>

08008e0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008e12:	bf00      	nop
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008e20:	f7f8 f8c4 	bl	8000fac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8008e24:	f7fd fa82 	bl	800632c <xTaskGetSchedulerState>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d001      	beq.n	8008e32 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8008e2e:	f7fd fcb3 	bl	8006798 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008e32:	bf00      	nop
 8008e34:	bd80      	pop	{r7, pc}
	...

08008e38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008e3c:	4802      	ldr	r0, [pc, #8]	; (8008e48 <TIM2_IRQHandler+0x10>)
 8008e3e:	f7fa fc6d 	bl	800371c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008e42:	bf00      	nop
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	20002bd4 	.word	0x20002bd4

08008e4c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008e50:	4802      	ldr	r0, [pc, #8]	; (8008e5c <USART3_IRQHandler+0x10>)
 8008e52:	f7fb fdf1 	bl	8004a38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8008e56:	bf00      	nop
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	20002a8c 	.word	0x20002a8c

08008e60 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008e68:	4b11      	ldr	r3, [pc, #68]	; (8008eb0 <_sbrk+0x50>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d102      	bne.n	8008e76 <_sbrk+0x16>
		heap_end = &end;
 8008e70:	4b0f      	ldr	r3, [pc, #60]	; (8008eb0 <_sbrk+0x50>)
 8008e72:	4a10      	ldr	r2, [pc, #64]	; (8008eb4 <_sbrk+0x54>)
 8008e74:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008e76:	4b0e      	ldr	r3, [pc, #56]	; (8008eb0 <_sbrk+0x50>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008e7c:	4b0c      	ldr	r3, [pc, #48]	; (8008eb0 <_sbrk+0x50>)
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4413      	add	r3, r2
 8008e84:	466a      	mov	r2, sp
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d907      	bls.n	8008e9a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008e8a:	f000 f879 	bl	8008f80 <__errno>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	230c      	movs	r3, #12
 8008e92:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008e94:	f04f 33ff 	mov.w	r3, #4294967295
 8008e98:	e006      	b.n	8008ea8 <_sbrk+0x48>
	}

	heap_end += incr;
 8008e9a:	4b05      	ldr	r3, [pc, #20]	; (8008eb0 <_sbrk+0x50>)
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	4a03      	ldr	r2, [pc, #12]	; (8008eb0 <_sbrk+0x50>)
 8008ea4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	20002a58 	.word	0x20002a58
 8008eb4:	20002c30 	.word	0x20002c30

08008eb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008ebc:	4b17      	ldr	r3, [pc, #92]	; (8008f1c <SystemInit+0x64>)
 8008ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ec2:	4a16      	ldr	r2, [pc, #88]	; (8008f1c <SystemInit+0x64>)
 8008ec4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ec8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8008ecc:	4b14      	ldr	r3, [pc, #80]	; (8008f20 <SystemInit+0x68>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a13      	ldr	r2, [pc, #76]	; (8008f20 <SystemInit+0x68>)
 8008ed2:	f043 0301 	orr.w	r3, r3, #1
 8008ed6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8008ed8:	4b11      	ldr	r3, [pc, #68]	; (8008f20 <SystemInit+0x68>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8008ede:	4b10      	ldr	r3, [pc, #64]	; (8008f20 <SystemInit+0x68>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a0f      	ldr	r2, [pc, #60]	; (8008f20 <SystemInit+0x68>)
 8008ee4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8008ee8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8008eec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8008eee:	4b0c      	ldr	r3, [pc, #48]	; (8008f20 <SystemInit+0x68>)
 8008ef0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008ef4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008ef6:	4b0a      	ldr	r3, [pc, #40]	; (8008f20 <SystemInit+0x68>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a09      	ldr	r2, [pc, #36]	; (8008f20 <SystemInit+0x68>)
 8008efc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f00:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8008f02:	4b07      	ldr	r3, [pc, #28]	; (8008f20 <SystemInit+0x68>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008f08:	4b04      	ldr	r3, [pc, #16]	; (8008f1c <SystemInit+0x64>)
 8008f0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008f0e:	609a      	str	r2, [r3, #8]
#endif
}
 8008f10:	bf00      	nop
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	e000ed00 	.word	0xe000ed00
 8008f20:	40021000 	.word	0x40021000

08008f24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008f5c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8008f28:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8008f2a:	e003      	b.n	8008f34 <LoopCopyDataInit>

08008f2c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8008f2c:	4b0c      	ldr	r3, [pc, #48]	; (8008f60 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8008f2e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8008f30:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8008f32:	3104      	adds	r1, #4

08008f34 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8008f34:	480b      	ldr	r0, [pc, #44]	; (8008f64 <LoopForever+0xa>)
	ldr	r3, =_edata
 8008f36:	4b0c      	ldr	r3, [pc, #48]	; (8008f68 <LoopForever+0xe>)
	adds	r2, r0, r1
 8008f38:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8008f3a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8008f3c:	d3f6      	bcc.n	8008f2c <CopyDataInit>
	ldr	r2, =_sbss
 8008f3e:	4a0b      	ldr	r2, [pc, #44]	; (8008f6c <LoopForever+0x12>)
	b	LoopFillZerobss
 8008f40:	e002      	b.n	8008f48 <LoopFillZerobss>

08008f42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8008f42:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8008f44:	f842 3b04 	str.w	r3, [r2], #4

08008f48 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008f48:	4b09      	ldr	r3, [pc, #36]	; (8008f70 <LoopForever+0x16>)
	cmp	r2, r3
 8008f4a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8008f4c:	d3f9      	bcc.n	8008f42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008f4e:	f7ff ffb3 	bl	8008eb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008f52:	f000 f81b 	bl	8008f8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008f56:	f7fe fec3 	bl	8007ce0 <main>

08008f5a <LoopForever>:

LoopForever:
    b LoopForever
 8008f5a:	e7fe      	b.n	8008f5a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008f5c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8008f60:	0800bd40 	.word	0x0800bd40
	ldr	r0, =_sdata
 8008f64:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008f68:	200014a0 	.word	0x200014a0
	ldr	r2, =_sbss
 8008f6c:	200014a0 	.word	0x200014a0
	ldr	r3, = _ebss
 8008f70:	20002c2c 	.word	0x20002c2c

08008f74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008f74:	e7fe      	b.n	8008f74 <ADC1_2_IRQHandler>

08008f76 <atoi>:
 8008f76:	220a      	movs	r2, #10
 8008f78:	2100      	movs	r1, #0
 8008f7a:	f000 b93b 	b.w	80091f4 <strtol>
	...

08008f80 <__errno>:
 8008f80:	4b01      	ldr	r3, [pc, #4]	; (8008f88 <__errno+0x8>)
 8008f82:	6818      	ldr	r0, [r3, #0]
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	200012cc 	.word	0x200012cc

08008f8c <__libc_init_array>:
 8008f8c:	b570      	push	{r4, r5, r6, lr}
 8008f8e:	4e0d      	ldr	r6, [pc, #52]	; (8008fc4 <__libc_init_array+0x38>)
 8008f90:	4c0d      	ldr	r4, [pc, #52]	; (8008fc8 <__libc_init_array+0x3c>)
 8008f92:	1ba4      	subs	r4, r4, r6
 8008f94:	10a4      	asrs	r4, r4, #2
 8008f96:	2500      	movs	r5, #0
 8008f98:	42a5      	cmp	r5, r4
 8008f9a:	d109      	bne.n	8008fb0 <__libc_init_array+0x24>
 8008f9c:	4e0b      	ldr	r6, [pc, #44]	; (8008fcc <__libc_init_array+0x40>)
 8008f9e:	4c0c      	ldr	r4, [pc, #48]	; (8008fd0 <__libc_init_array+0x44>)
 8008fa0:	f002 f8d4 	bl	800b14c <_init>
 8008fa4:	1ba4      	subs	r4, r4, r6
 8008fa6:	10a4      	asrs	r4, r4, #2
 8008fa8:	2500      	movs	r5, #0
 8008faa:	42a5      	cmp	r5, r4
 8008fac:	d105      	bne.n	8008fba <__libc_init_array+0x2e>
 8008fae:	bd70      	pop	{r4, r5, r6, pc}
 8008fb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008fb4:	4798      	blx	r3
 8008fb6:	3501      	adds	r5, #1
 8008fb8:	e7ee      	b.n	8008f98 <__libc_init_array+0xc>
 8008fba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008fbe:	4798      	blx	r3
 8008fc0:	3501      	adds	r5, #1
 8008fc2:	e7f2      	b.n	8008faa <__libc_init_array+0x1e>
 8008fc4:	0800bd38 	.word	0x0800bd38
 8008fc8:	0800bd38 	.word	0x0800bd38
 8008fcc:	0800bd38 	.word	0x0800bd38
 8008fd0:	0800bd3c 	.word	0x0800bd3c

08008fd4 <__locale_ctype_ptr_l>:
 8008fd4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008fd8:	4770      	bx	lr
	...

08008fdc <__locale_ctype_ptr>:
 8008fdc:	4b04      	ldr	r3, [pc, #16]	; (8008ff0 <__locale_ctype_ptr+0x14>)
 8008fde:	4a05      	ldr	r2, [pc, #20]	; (8008ff4 <__locale_ctype_ptr+0x18>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	6a1b      	ldr	r3, [r3, #32]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	bf08      	it	eq
 8008fe8:	4613      	moveq	r3, r2
 8008fea:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8008fee:	4770      	bx	lr
 8008ff0:	200012cc 	.word	0x200012cc
 8008ff4:	20001330 	.word	0x20001330

08008ff8 <__ascii_mbtowc>:
 8008ff8:	b082      	sub	sp, #8
 8008ffa:	b901      	cbnz	r1, 8008ffe <__ascii_mbtowc+0x6>
 8008ffc:	a901      	add	r1, sp, #4
 8008ffe:	b142      	cbz	r2, 8009012 <__ascii_mbtowc+0x1a>
 8009000:	b14b      	cbz	r3, 8009016 <__ascii_mbtowc+0x1e>
 8009002:	7813      	ldrb	r3, [r2, #0]
 8009004:	600b      	str	r3, [r1, #0]
 8009006:	7812      	ldrb	r2, [r2, #0]
 8009008:	1c10      	adds	r0, r2, #0
 800900a:	bf18      	it	ne
 800900c:	2001      	movne	r0, #1
 800900e:	b002      	add	sp, #8
 8009010:	4770      	bx	lr
 8009012:	4610      	mov	r0, r2
 8009014:	e7fb      	b.n	800900e <__ascii_mbtowc+0x16>
 8009016:	f06f 0001 	mvn.w	r0, #1
 800901a:	e7f8      	b.n	800900e <__ascii_mbtowc+0x16>

0800901c <memcpy>:
 800901c:	b510      	push	{r4, lr}
 800901e:	1e43      	subs	r3, r0, #1
 8009020:	440a      	add	r2, r1
 8009022:	4291      	cmp	r1, r2
 8009024:	d100      	bne.n	8009028 <memcpy+0xc>
 8009026:	bd10      	pop	{r4, pc}
 8009028:	f811 4b01 	ldrb.w	r4, [r1], #1
 800902c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009030:	e7f7      	b.n	8009022 <memcpy+0x6>

08009032 <memset>:
 8009032:	4402      	add	r2, r0
 8009034:	4603      	mov	r3, r0
 8009036:	4293      	cmp	r3, r2
 8009038:	d100      	bne.n	800903c <memset+0xa>
 800903a:	4770      	bx	lr
 800903c:	f803 1b01 	strb.w	r1, [r3], #1
 8009040:	e7f9      	b.n	8009036 <memset+0x4>
	...

08009044 <rand>:
 8009044:	b538      	push	{r3, r4, r5, lr}
 8009046:	4b13      	ldr	r3, [pc, #76]	; (8009094 <rand+0x50>)
 8009048:	681c      	ldr	r4, [r3, #0]
 800904a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800904c:	b97b      	cbnz	r3, 800906e <rand+0x2a>
 800904e:	2018      	movs	r0, #24
 8009050:	f000 f8f4 	bl	800923c <malloc>
 8009054:	4a10      	ldr	r2, [pc, #64]	; (8009098 <rand+0x54>)
 8009056:	4b11      	ldr	r3, [pc, #68]	; (800909c <rand+0x58>)
 8009058:	63a0      	str	r0, [r4, #56]	; 0x38
 800905a:	e9c0 2300 	strd	r2, r3, [r0]
 800905e:	4b10      	ldr	r3, [pc, #64]	; (80090a0 <rand+0x5c>)
 8009060:	6083      	str	r3, [r0, #8]
 8009062:	230b      	movs	r3, #11
 8009064:	8183      	strh	r3, [r0, #12]
 8009066:	2201      	movs	r2, #1
 8009068:	2300      	movs	r3, #0
 800906a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800906e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009070:	480c      	ldr	r0, [pc, #48]	; (80090a4 <rand+0x60>)
 8009072:	690a      	ldr	r2, [r1, #16]
 8009074:	694b      	ldr	r3, [r1, #20]
 8009076:	4c0c      	ldr	r4, [pc, #48]	; (80090a8 <rand+0x64>)
 8009078:	4350      	muls	r0, r2
 800907a:	fb04 0003 	mla	r0, r4, r3, r0
 800907e:	fba2 2304 	umull	r2, r3, r2, r4
 8009082:	4403      	add	r3, r0
 8009084:	1c54      	adds	r4, r2, #1
 8009086:	f143 0500 	adc.w	r5, r3, #0
 800908a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800908e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8009092:	bd38      	pop	{r3, r4, r5, pc}
 8009094:	200012cc 	.word	0x200012cc
 8009098:	abcd330e 	.word	0xabcd330e
 800909c:	e66d1234 	.word	0xe66d1234
 80090a0:	0005deec 	.word	0x0005deec
 80090a4:	5851f42d 	.word	0x5851f42d
 80090a8:	4c957f2d 	.word	0x4c957f2d

080090ac <siprintf>:
 80090ac:	b40e      	push	{r1, r2, r3}
 80090ae:	b500      	push	{lr}
 80090b0:	b09c      	sub	sp, #112	; 0x70
 80090b2:	ab1d      	add	r3, sp, #116	; 0x74
 80090b4:	9002      	str	r0, [sp, #8]
 80090b6:	9006      	str	r0, [sp, #24]
 80090b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090bc:	4809      	ldr	r0, [pc, #36]	; (80090e4 <siprintf+0x38>)
 80090be:	9107      	str	r1, [sp, #28]
 80090c0:	9104      	str	r1, [sp, #16]
 80090c2:	4909      	ldr	r1, [pc, #36]	; (80090e8 <siprintf+0x3c>)
 80090c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80090c8:	9105      	str	r1, [sp, #20]
 80090ca:	6800      	ldr	r0, [r0, #0]
 80090cc:	9301      	str	r3, [sp, #4]
 80090ce:	a902      	add	r1, sp, #8
 80090d0:	f000 f9be 	bl	8009450 <_svfiprintf_r>
 80090d4:	9b02      	ldr	r3, [sp, #8]
 80090d6:	2200      	movs	r2, #0
 80090d8:	701a      	strb	r2, [r3, #0]
 80090da:	b01c      	add	sp, #112	; 0x70
 80090dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80090e0:	b003      	add	sp, #12
 80090e2:	4770      	bx	lr
 80090e4:	200012cc 	.word	0x200012cc
 80090e8:	ffff0208 	.word	0xffff0208

080090ec <strcpy>:
 80090ec:	4603      	mov	r3, r0
 80090ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090f2:	f803 2b01 	strb.w	r2, [r3], #1
 80090f6:	2a00      	cmp	r2, #0
 80090f8:	d1f9      	bne.n	80090ee <strcpy+0x2>
 80090fa:	4770      	bx	lr

080090fc <_strtol_l.isra.0>:
 80090fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009100:	4680      	mov	r8, r0
 8009102:	4689      	mov	r9, r1
 8009104:	4692      	mov	sl, r2
 8009106:	461e      	mov	r6, r3
 8009108:	460f      	mov	r7, r1
 800910a:	463d      	mov	r5, r7
 800910c:	9808      	ldr	r0, [sp, #32]
 800910e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009112:	f7ff ff5f 	bl	8008fd4 <__locale_ctype_ptr_l>
 8009116:	4420      	add	r0, r4
 8009118:	7843      	ldrb	r3, [r0, #1]
 800911a:	f013 0308 	ands.w	r3, r3, #8
 800911e:	d132      	bne.n	8009186 <_strtol_l.isra.0+0x8a>
 8009120:	2c2d      	cmp	r4, #45	; 0x2d
 8009122:	d132      	bne.n	800918a <_strtol_l.isra.0+0x8e>
 8009124:	787c      	ldrb	r4, [r7, #1]
 8009126:	1cbd      	adds	r5, r7, #2
 8009128:	2201      	movs	r2, #1
 800912a:	2e00      	cmp	r6, #0
 800912c:	d05d      	beq.n	80091ea <_strtol_l.isra.0+0xee>
 800912e:	2e10      	cmp	r6, #16
 8009130:	d109      	bne.n	8009146 <_strtol_l.isra.0+0x4a>
 8009132:	2c30      	cmp	r4, #48	; 0x30
 8009134:	d107      	bne.n	8009146 <_strtol_l.isra.0+0x4a>
 8009136:	782b      	ldrb	r3, [r5, #0]
 8009138:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800913c:	2b58      	cmp	r3, #88	; 0x58
 800913e:	d14f      	bne.n	80091e0 <_strtol_l.isra.0+0xe4>
 8009140:	786c      	ldrb	r4, [r5, #1]
 8009142:	2610      	movs	r6, #16
 8009144:	3502      	adds	r5, #2
 8009146:	2a00      	cmp	r2, #0
 8009148:	bf14      	ite	ne
 800914a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800914e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009152:	2700      	movs	r7, #0
 8009154:	fbb1 fcf6 	udiv	ip, r1, r6
 8009158:	4638      	mov	r0, r7
 800915a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800915e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009162:	2b09      	cmp	r3, #9
 8009164:	d817      	bhi.n	8009196 <_strtol_l.isra.0+0x9a>
 8009166:	461c      	mov	r4, r3
 8009168:	42a6      	cmp	r6, r4
 800916a:	dd23      	ble.n	80091b4 <_strtol_l.isra.0+0xb8>
 800916c:	1c7b      	adds	r3, r7, #1
 800916e:	d007      	beq.n	8009180 <_strtol_l.isra.0+0x84>
 8009170:	4584      	cmp	ip, r0
 8009172:	d31c      	bcc.n	80091ae <_strtol_l.isra.0+0xb2>
 8009174:	d101      	bne.n	800917a <_strtol_l.isra.0+0x7e>
 8009176:	45a6      	cmp	lr, r4
 8009178:	db19      	blt.n	80091ae <_strtol_l.isra.0+0xb2>
 800917a:	fb00 4006 	mla	r0, r0, r6, r4
 800917e:	2701      	movs	r7, #1
 8009180:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009184:	e7eb      	b.n	800915e <_strtol_l.isra.0+0x62>
 8009186:	462f      	mov	r7, r5
 8009188:	e7bf      	b.n	800910a <_strtol_l.isra.0+0xe>
 800918a:	2c2b      	cmp	r4, #43	; 0x2b
 800918c:	bf04      	itt	eq
 800918e:	1cbd      	addeq	r5, r7, #2
 8009190:	787c      	ldrbeq	r4, [r7, #1]
 8009192:	461a      	mov	r2, r3
 8009194:	e7c9      	b.n	800912a <_strtol_l.isra.0+0x2e>
 8009196:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800919a:	2b19      	cmp	r3, #25
 800919c:	d801      	bhi.n	80091a2 <_strtol_l.isra.0+0xa6>
 800919e:	3c37      	subs	r4, #55	; 0x37
 80091a0:	e7e2      	b.n	8009168 <_strtol_l.isra.0+0x6c>
 80091a2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80091a6:	2b19      	cmp	r3, #25
 80091a8:	d804      	bhi.n	80091b4 <_strtol_l.isra.0+0xb8>
 80091aa:	3c57      	subs	r4, #87	; 0x57
 80091ac:	e7dc      	b.n	8009168 <_strtol_l.isra.0+0x6c>
 80091ae:	f04f 37ff 	mov.w	r7, #4294967295
 80091b2:	e7e5      	b.n	8009180 <_strtol_l.isra.0+0x84>
 80091b4:	1c7b      	adds	r3, r7, #1
 80091b6:	d108      	bne.n	80091ca <_strtol_l.isra.0+0xce>
 80091b8:	2322      	movs	r3, #34	; 0x22
 80091ba:	f8c8 3000 	str.w	r3, [r8]
 80091be:	4608      	mov	r0, r1
 80091c0:	f1ba 0f00 	cmp.w	sl, #0
 80091c4:	d107      	bne.n	80091d6 <_strtol_l.isra.0+0xda>
 80091c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ca:	b102      	cbz	r2, 80091ce <_strtol_l.isra.0+0xd2>
 80091cc:	4240      	negs	r0, r0
 80091ce:	f1ba 0f00 	cmp.w	sl, #0
 80091d2:	d0f8      	beq.n	80091c6 <_strtol_l.isra.0+0xca>
 80091d4:	b10f      	cbz	r7, 80091da <_strtol_l.isra.0+0xde>
 80091d6:	f105 39ff 	add.w	r9, r5, #4294967295
 80091da:	f8ca 9000 	str.w	r9, [sl]
 80091de:	e7f2      	b.n	80091c6 <_strtol_l.isra.0+0xca>
 80091e0:	2430      	movs	r4, #48	; 0x30
 80091e2:	2e00      	cmp	r6, #0
 80091e4:	d1af      	bne.n	8009146 <_strtol_l.isra.0+0x4a>
 80091e6:	2608      	movs	r6, #8
 80091e8:	e7ad      	b.n	8009146 <_strtol_l.isra.0+0x4a>
 80091ea:	2c30      	cmp	r4, #48	; 0x30
 80091ec:	d0a3      	beq.n	8009136 <_strtol_l.isra.0+0x3a>
 80091ee:	260a      	movs	r6, #10
 80091f0:	e7a9      	b.n	8009146 <_strtol_l.isra.0+0x4a>
	...

080091f4 <strtol>:
 80091f4:	4b08      	ldr	r3, [pc, #32]	; (8009218 <strtol+0x24>)
 80091f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091f8:	681c      	ldr	r4, [r3, #0]
 80091fa:	4d08      	ldr	r5, [pc, #32]	; (800921c <strtol+0x28>)
 80091fc:	6a23      	ldr	r3, [r4, #32]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	bf08      	it	eq
 8009202:	462b      	moveq	r3, r5
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	4613      	mov	r3, r2
 8009208:	460a      	mov	r2, r1
 800920a:	4601      	mov	r1, r0
 800920c:	4620      	mov	r0, r4
 800920e:	f7ff ff75 	bl	80090fc <_strtol_l.isra.0>
 8009212:	b003      	add	sp, #12
 8009214:	bd30      	pop	{r4, r5, pc}
 8009216:	bf00      	nop
 8009218:	200012cc 	.word	0x200012cc
 800921c:	20001330 	.word	0x20001330

08009220 <__ascii_wctomb>:
 8009220:	b149      	cbz	r1, 8009236 <__ascii_wctomb+0x16>
 8009222:	2aff      	cmp	r2, #255	; 0xff
 8009224:	bf85      	ittet	hi
 8009226:	238a      	movhi	r3, #138	; 0x8a
 8009228:	6003      	strhi	r3, [r0, #0]
 800922a:	700a      	strbls	r2, [r1, #0]
 800922c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009230:	bf98      	it	ls
 8009232:	2001      	movls	r0, #1
 8009234:	4770      	bx	lr
 8009236:	4608      	mov	r0, r1
 8009238:	4770      	bx	lr
	...

0800923c <malloc>:
 800923c:	4b02      	ldr	r3, [pc, #8]	; (8009248 <malloc+0xc>)
 800923e:	4601      	mov	r1, r0
 8009240:	6818      	ldr	r0, [r3, #0]
 8009242:	f000 b851 	b.w	80092e8 <_malloc_r>
 8009246:	bf00      	nop
 8009248:	200012cc 	.word	0x200012cc

0800924c <_free_r>:
 800924c:	b538      	push	{r3, r4, r5, lr}
 800924e:	4605      	mov	r5, r0
 8009250:	2900      	cmp	r1, #0
 8009252:	d045      	beq.n	80092e0 <_free_r+0x94>
 8009254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009258:	1f0c      	subs	r4, r1, #4
 800925a:	2b00      	cmp	r3, #0
 800925c:	bfb8      	it	lt
 800925e:	18e4      	addlt	r4, r4, r3
 8009260:	f000 fb9f 	bl	80099a2 <__malloc_lock>
 8009264:	4a1f      	ldr	r2, [pc, #124]	; (80092e4 <_free_r+0x98>)
 8009266:	6813      	ldr	r3, [r2, #0]
 8009268:	4610      	mov	r0, r2
 800926a:	b933      	cbnz	r3, 800927a <_free_r+0x2e>
 800926c:	6063      	str	r3, [r4, #4]
 800926e:	6014      	str	r4, [r2, #0]
 8009270:	4628      	mov	r0, r5
 8009272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009276:	f000 bb95 	b.w	80099a4 <__malloc_unlock>
 800927a:	42a3      	cmp	r3, r4
 800927c:	d90c      	bls.n	8009298 <_free_r+0x4c>
 800927e:	6821      	ldr	r1, [r4, #0]
 8009280:	1862      	adds	r2, r4, r1
 8009282:	4293      	cmp	r3, r2
 8009284:	bf04      	itt	eq
 8009286:	681a      	ldreq	r2, [r3, #0]
 8009288:	685b      	ldreq	r3, [r3, #4]
 800928a:	6063      	str	r3, [r4, #4]
 800928c:	bf04      	itt	eq
 800928e:	1852      	addeq	r2, r2, r1
 8009290:	6022      	streq	r2, [r4, #0]
 8009292:	6004      	str	r4, [r0, #0]
 8009294:	e7ec      	b.n	8009270 <_free_r+0x24>
 8009296:	4613      	mov	r3, r2
 8009298:	685a      	ldr	r2, [r3, #4]
 800929a:	b10a      	cbz	r2, 80092a0 <_free_r+0x54>
 800929c:	42a2      	cmp	r2, r4
 800929e:	d9fa      	bls.n	8009296 <_free_r+0x4a>
 80092a0:	6819      	ldr	r1, [r3, #0]
 80092a2:	1858      	adds	r0, r3, r1
 80092a4:	42a0      	cmp	r0, r4
 80092a6:	d10b      	bne.n	80092c0 <_free_r+0x74>
 80092a8:	6820      	ldr	r0, [r4, #0]
 80092aa:	4401      	add	r1, r0
 80092ac:	1858      	adds	r0, r3, r1
 80092ae:	4282      	cmp	r2, r0
 80092b0:	6019      	str	r1, [r3, #0]
 80092b2:	d1dd      	bne.n	8009270 <_free_r+0x24>
 80092b4:	6810      	ldr	r0, [r2, #0]
 80092b6:	6852      	ldr	r2, [r2, #4]
 80092b8:	605a      	str	r2, [r3, #4]
 80092ba:	4401      	add	r1, r0
 80092bc:	6019      	str	r1, [r3, #0]
 80092be:	e7d7      	b.n	8009270 <_free_r+0x24>
 80092c0:	d902      	bls.n	80092c8 <_free_r+0x7c>
 80092c2:	230c      	movs	r3, #12
 80092c4:	602b      	str	r3, [r5, #0]
 80092c6:	e7d3      	b.n	8009270 <_free_r+0x24>
 80092c8:	6820      	ldr	r0, [r4, #0]
 80092ca:	1821      	adds	r1, r4, r0
 80092cc:	428a      	cmp	r2, r1
 80092ce:	bf04      	itt	eq
 80092d0:	6811      	ldreq	r1, [r2, #0]
 80092d2:	6852      	ldreq	r2, [r2, #4]
 80092d4:	6062      	str	r2, [r4, #4]
 80092d6:	bf04      	itt	eq
 80092d8:	1809      	addeq	r1, r1, r0
 80092da:	6021      	streq	r1, [r4, #0]
 80092dc:	605c      	str	r4, [r3, #4]
 80092de:	e7c7      	b.n	8009270 <_free_r+0x24>
 80092e0:	bd38      	pop	{r3, r4, r5, pc}
 80092e2:	bf00      	nop
 80092e4:	20002a5c 	.word	0x20002a5c

080092e8 <_malloc_r>:
 80092e8:	b570      	push	{r4, r5, r6, lr}
 80092ea:	1ccd      	adds	r5, r1, #3
 80092ec:	f025 0503 	bic.w	r5, r5, #3
 80092f0:	3508      	adds	r5, #8
 80092f2:	2d0c      	cmp	r5, #12
 80092f4:	bf38      	it	cc
 80092f6:	250c      	movcc	r5, #12
 80092f8:	2d00      	cmp	r5, #0
 80092fa:	4606      	mov	r6, r0
 80092fc:	db01      	blt.n	8009302 <_malloc_r+0x1a>
 80092fe:	42a9      	cmp	r1, r5
 8009300:	d903      	bls.n	800930a <_malloc_r+0x22>
 8009302:	230c      	movs	r3, #12
 8009304:	6033      	str	r3, [r6, #0]
 8009306:	2000      	movs	r0, #0
 8009308:	bd70      	pop	{r4, r5, r6, pc}
 800930a:	f000 fb4a 	bl	80099a2 <__malloc_lock>
 800930e:	4a21      	ldr	r2, [pc, #132]	; (8009394 <_malloc_r+0xac>)
 8009310:	6814      	ldr	r4, [r2, #0]
 8009312:	4621      	mov	r1, r4
 8009314:	b991      	cbnz	r1, 800933c <_malloc_r+0x54>
 8009316:	4c20      	ldr	r4, [pc, #128]	; (8009398 <_malloc_r+0xb0>)
 8009318:	6823      	ldr	r3, [r4, #0]
 800931a:	b91b      	cbnz	r3, 8009324 <_malloc_r+0x3c>
 800931c:	4630      	mov	r0, r6
 800931e:	f000 fb17 	bl	8009950 <_sbrk_r>
 8009322:	6020      	str	r0, [r4, #0]
 8009324:	4629      	mov	r1, r5
 8009326:	4630      	mov	r0, r6
 8009328:	f000 fb12 	bl	8009950 <_sbrk_r>
 800932c:	1c43      	adds	r3, r0, #1
 800932e:	d124      	bne.n	800937a <_malloc_r+0x92>
 8009330:	230c      	movs	r3, #12
 8009332:	6033      	str	r3, [r6, #0]
 8009334:	4630      	mov	r0, r6
 8009336:	f000 fb35 	bl	80099a4 <__malloc_unlock>
 800933a:	e7e4      	b.n	8009306 <_malloc_r+0x1e>
 800933c:	680b      	ldr	r3, [r1, #0]
 800933e:	1b5b      	subs	r3, r3, r5
 8009340:	d418      	bmi.n	8009374 <_malloc_r+0x8c>
 8009342:	2b0b      	cmp	r3, #11
 8009344:	d90f      	bls.n	8009366 <_malloc_r+0x7e>
 8009346:	600b      	str	r3, [r1, #0]
 8009348:	50cd      	str	r5, [r1, r3]
 800934a:	18cc      	adds	r4, r1, r3
 800934c:	4630      	mov	r0, r6
 800934e:	f000 fb29 	bl	80099a4 <__malloc_unlock>
 8009352:	f104 000b 	add.w	r0, r4, #11
 8009356:	1d23      	adds	r3, r4, #4
 8009358:	f020 0007 	bic.w	r0, r0, #7
 800935c:	1ac3      	subs	r3, r0, r3
 800935e:	d0d3      	beq.n	8009308 <_malloc_r+0x20>
 8009360:	425a      	negs	r2, r3
 8009362:	50e2      	str	r2, [r4, r3]
 8009364:	e7d0      	b.n	8009308 <_malloc_r+0x20>
 8009366:	428c      	cmp	r4, r1
 8009368:	684b      	ldr	r3, [r1, #4]
 800936a:	bf16      	itet	ne
 800936c:	6063      	strne	r3, [r4, #4]
 800936e:	6013      	streq	r3, [r2, #0]
 8009370:	460c      	movne	r4, r1
 8009372:	e7eb      	b.n	800934c <_malloc_r+0x64>
 8009374:	460c      	mov	r4, r1
 8009376:	6849      	ldr	r1, [r1, #4]
 8009378:	e7cc      	b.n	8009314 <_malloc_r+0x2c>
 800937a:	1cc4      	adds	r4, r0, #3
 800937c:	f024 0403 	bic.w	r4, r4, #3
 8009380:	42a0      	cmp	r0, r4
 8009382:	d005      	beq.n	8009390 <_malloc_r+0xa8>
 8009384:	1a21      	subs	r1, r4, r0
 8009386:	4630      	mov	r0, r6
 8009388:	f000 fae2 	bl	8009950 <_sbrk_r>
 800938c:	3001      	adds	r0, #1
 800938e:	d0cf      	beq.n	8009330 <_malloc_r+0x48>
 8009390:	6025      	str	r5, [r4, #0]
 8009392:	e7db      	b.n	800934c <_malloc_r+0x64>
 8009394:	20002a5c 	.word	0x20002a5c
 8009398:	20002a60 	.word	0x20002a60

0800939c <__ssputs_r>:
 800939c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093a0:	688e      	ldr	r6, [r1, #8]
 80093a2:	429e      	cmp	r6, r3
 80093a4:	4682      	mov	sl, r0
 80093a6:	460c      	mov	r4, r1
 80093a8:	4690      	mov	r8, r2
 80093aa:	4699      	mov	r9, r3
 80093ac:	d837      	bhi.n	800941e <__ssputs_r+0x82>
 80093ae:	898a      	ldrh	r2, [r1, #12]
 80093b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80093b4:	d031      	beq.n	800941a <__ssputs_r+0x7e>
 80093b6:	6825      	ldr	r5, [r4, #0]
 80093b8:	6909      	ldr	r1, [r1, #16]
 80093ba:	1a6f      	subs	r7, r5, r1
 80093bc:	6965      	ldr	r5, [r4, #20]
 80093be:	2302      	movs	r3, #2
 80093c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093c4:	fb95 f5f3 	sdiv	r5, r5, r3
 80093c8:	f109 0301 	add.w	r3, r9, #1
 80093cc:	443b      	add	r3, r7
 80093ce:	429d      	cmp	r5, r3
 80093d0:	bf38      	it	cc
 80093d2:	461d      	movcc	r5, r3
 80093d4:	0553      	lsls	r3, r2, #21
 80093d6:	d530      	bpl.n	800943a <__ssputs_r+0x9e>
 80093d8:	4629      	mov	r1, r5
 80093da:	f7ff ff85 	bl	80092e8 <_malloc_r>
 80093de:	4606      	mov	r6, r0
 80093e0:	b950      	cbnz	r0, 80093f8 <__ssputs_r+0x5c>
 80093e2:	230c      	movs	r3, #12
 80093e4:	f8ca 3000 	str.w	r3, [sl]
 80093e8:	89a3      	ldrh	r3, [r4, #12]
 80093ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093ee:	81a3      	strh	r3, [r4, #12]
 80093f0:	f04f 30ff 	mov.w	r0, #4294967295
 80093f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093f8:	463a      	mov	r2, r7
 80093fa:	6921      	ldr	r1, [r4, #16]
 80093fc:	f7ff fe0e 	bl	800901c <memcpy>
 8009400:	89a3      	ldrh	r3, [r4, #12]
 8009402:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800940a:	81a3      	strh	r3, [r4, #12]
 800940c:	6126      	str	r6, [r4, #16]
 800940e:	6165      	str	r5, [r4, #20]
 8009410:	443e      	add	r6, r7
 8009412:	1bed      	subs	r5, r5, r7
 8009414:	6026      	str	r6, [r4, #0]
 8009416:	60a5      	str	r5, [r4, #8]
 8009418:	464e      	mov	r6, r9
 800941a:	454e      	cmp	r6, r9
 800941c:	d900      	bls.n	8009420 <__ssputs_r+0x84>
 800941e:	464e      	mov	r6, r9
 8009420:	4632      	mov	r2, r6
 8009422:	4641      	mov	r1, r8
 8009424:	6820      	ldr	r0, [r4, #0]
 8009426:	f000 faa3 	bl	8009970 <memmove>
 800942a:	68a3      	ldr	r3, [r4, #8]
 800942c:	1b9b      	subs	r3, r3, r6
 800942e:	60a3      	str	r3, [r4, #8]
 8009430:	6823      	ldr	r3, [r4, #0]
 8009432:	441e      	add	r6, r3
 8009434:	6026      	str	r6, [r4, #0]
 8009436:	2000      	movs	r0, #0
 8009438:	e7dc      	b.n	80093f4 <__ssputs_r+0x58>
 800943a:	462a      	mov	r2, r5
 800943c:	f000 fab3 	bl	80099a6 <_realloc_r>
 8009440:	4606      	mov	r6, r0
 8009442:	2800      	cmp	r0, #0
 8009444:	d1e2      	bne.n	800940c <__ssputs_r+0x70>
 8009446:	6921      	ldr	r1, [r4, #16]
 8009448:	4650      	mov	r0, sl
 800944a:	f7ff feff 	bl	800924c <_free_r>
 800944e:	e7c8      	b.n	80093e2 <__ssputs_r+0x46>

08009450 <_svfiprintf_r>:
 8009450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009454:	461d      	mov	r5, r3
 8009456:	898b      	ldrh	r3, [r1, #12]
 8009458:	061f      	lsls	r7, r3, #24
 800945a:	b09d      	sub	sp, #116	; 0x74
 800945c:	4680      	mov	r8, r0
 800945e:	460c      	mov	r4, r1
 8009460:	4616      	mov	r6, r2
 8009462:	d50f      	bpl.n	8009484 <_svfiprintf_r+0x34>
 8009464:	690b      	ldr	r3, [r1, #16]
 8009466:	b96b      	cbnz	r3, 8009484 <_svfiprintf_r+0x34>
 8009468:	2140      	movs	r1, #64	; 0x40
 800946a:	f7ff ff3d 	bl	80092e8 <_malloc_r>
 800946e:	6020      	str	r0, [r4, #0]
 8009470:	6120      	str	r0, [r4, #16]
 8009472:	b928      	cbnz	r0, 8009480 <_svfiprintf_r+0x30>
 8009474:	230c      	movs	r3, #12
 8009476:	f8c8 3000 	str.w	r3, [r8]
 800947a:	f04f 30ff 	mov.w	r0, #4294967295
 800947e:	e0c8      	b.n	8009612 <_svfiprintf_r+0x1c2>
 8009480:	2340      	movs	r3, #64	; 0x40
 8009482:	6163      	str	r3, [r4, #20]
 8009484:	2300      	movs	r3, #0
 8009486:	9309      	str	r3, [sp, #36]	; 0x24
 8009488:	2320      	movs	r3, #32
 800948a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800948e:	2330      	movs	r3, #48	; 0x30
 8009490:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009494:	9503      	str	r5, [sp, #12]
 8009496:	f04f 0b01 	mov.w	fp, #1
 800949a:	4637      	mov	r7, r6
 800949c:	463d      	mov	r5, r7
 800949e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80094a2:	b10b      	cbz	r3, 80094a8 <_svfiprintf_r+0x58>
 80094a4:	2b25      	cmp	r3, #37	; 0x25
 80094a6:	d13e      	bne.n	8009526 <_svfiprintf_r+0xd6>
 80094a8:	ebb7 0a06 	subs.w	sl, r7, r6
 80094ac:	d00b      	beq.n	80094c6 <_svfiprintf_r+0x76>
 80094ae:	4653      	mov	r3, sl
 80094b0:	4632      	mov	r2, r6
 80094b2:	4621      	mov	r1, r4
 80094b4:	4640      	mov	r0, r8
 80094b6:	f7ff ff71 	bl	800939c <__ssputs_r>
 80094ba:	3001      	adds	r0, #1
 80094bc:	f000 80a4 	beq.w	8009608 <_svfiprintf_r+0x1b8>
 80094c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094c2:	4453      	add	r3, sl
 80094c4:	9309      	str	r3, [sp, #36]	; 0x24
 80094c6:	783b      	ldrb	r3, [r7, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 809d 	beq.w	8009608 <_svfiprintf_r+0x1b8>
 80094ce:	2300      	movs	r3, #0
 80094d0:	f04f 32ff 	mov.w	r2, #4294967295
 80094d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094d8:	9304      	str	r3, [sp, #16]
 80094da:	9307      	str	r3, [sp, #28]
 80094dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094e0:	931a      	str	r3, [sp, #104]	; 0x68
 80094e2:	462f      	mov	r7, r5
 80094e4:	2205      	movs	r2, #5
 80094e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80094ea:	4850      	ldr	r0, [pc, #320]	; (800962c <_svfiprintf_r+0x1dc>)
 80094ec:	f7f6 fe88 	bl	8000200 <memchr>
 80094f0:	9b04      	ldr	r3, [sp, #16]
 80094f2:	b9d0      	cbnz	r0, 800952a <_svfiprintf_r+0xda>
 80094f4:	06d9      	lsls	r1, r3, #27
 80094f6:	bf44      	itt	mi
 80094f8:	2220      	movmi	r2, #32
 80094fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80094fe:	071a      	lsls	r2, r3, #28
 8009500:	bf44      	itt	mi
 8009502:	222b      	movmi	r2, #43	; 0x2b
 8009504:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009508:	782a      	ldrb	r2, [r5, #0]
 800950a:	2a2a      	cmp	r2, #42	; 0x2a
 800950c:	d015      	beq.n	800953a <_svfiprintf_r+0xea>
 800950e:	9a07      	ldr	r2, [sp, #28]
 8009510:	462f      	mov	r7, r5
 8009512:	2000      	movs	r0, #0
 8009514:	250a      	movs	r5, #10
 8009516:	4639      	mov	r1, r7
 8009518:	f811 3b01 	ldrb.w	r3, [r1], #1
 800951c:	3b30      	subs	r3, #48	; 0x30
 800951e:	2b09      	cmp	r3, #9
 8009520:	d94d      	bls.n	80095be <_svfiprintf_r+0x16e>
 8009522:	b1b8      	cbz	r0, 8009554 <_svfiprintf_r+0x104>
 8009524:	e00f      	b.n	8009546 <_svfiprintf_r+0xf6>
 8009526:	462f      	mov	r7, r5
 8009528:	e7b8      	b.n	800949c <_svfiprintf_r+0x4c>
 800952a:	4a40      	ldr	r2, [pc, #256]	; (800962c <_svfiprintf_r+0x1dc>)
 800952c:	1a80      	subs	r0, r0, r2
 800952e:	fa0b f000 	lsl.w	r0, fp, r0
 8009532:	4318      	orrs	r0, r3
 8009534:	9004      	str	r0, [sp, #16]
 8009536:	463d      	mov	r5, r7
 8009538:	e7d3      	b.n	80094e2 <_svfiprintf_r+0x92>
 800953a:	9a03      	ldr	r2, [sp, #12]
 800953c:	1d11      	adds	r1, r2, #4
 800953e:	6812      	ldr	r2, [r2, #0]
 8009540:	9103      	str	r1, [sp, #12]
 8009542:	2a00      	cmp	r2, #0
 8009544:	db01      	blt.n	800954a <_svfiprintf_r+0xfa>
 8009546:	9207      	str	r2, [sp, #28]
 8009548:	e004      	b.n	8009554 <_svfiprintf_r+0x104>
 800954a:	4252      	negs	r2, r2
 800954c:	f043 0302 	orr.w	r3, r3, #2
 8009550:	9207      	str	r2, [sp, #28]
 8009552:	9304      	str	r3, [sp, #16]
 8009554:	783b      	ldrb	r3, [r7, #0]
 8009556:	2b2e      	cmp	r3, #46	; 0x2e
 8009558:	d10c      	bne.n	8009574 <_svfiprintf_r+0x124>
 800955a:	787b      	ldrb	r3, [r7, #1]
 800955c:	2b2a      	cmp	r3, #42	; 0x2a
 800955e:	d133      	bne.n	80095c8 <_svfiprintf_r+0x178>
 8009560:	9b03      	ldr	r3, [sp, #12]
 8009562:	1d1a      	adds	r2, r3, #4
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	9203      	str	r2, [sp, #12]
 8009568:	2b00      	cmp	r3, #0
 800956a:	bfb8      	it	lt
 800956c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009570:	3702      	adds	r7, #2
 8009572:	9305      	str	r3, [sp, #20]
 8009574:	4d2e      	ldr	r5, [pc, #184]	; (8009630 <_svfiprintf_r+0x1e0>)
 8009576:	7839      	ldrb	r1, [r7, #0]
 8009578:	2203      	movs	r2, #3
 800957a:	4628      	mov	r0, r5
 800957c:	f7f6 fe40 	bl	8000200 <memchr>
 8009580:	b138      	cbz	r0, 8009592 <_svfiprintf_r+0x142>
 8009582:	2340      	movs	r3, #64	; 0x40
 8009584:	1b40      	subs	r0, r0, r5
 8009586:	fa03 f000 	lsl.w	r0, r3, r0
 800958a:	9b04      	ldr	r3, [sp, #16]
 800958c:	4303      	orrs	r3, r0
 800958e:	3701      	adds	r7, #1
 8009590:	9304      	str	r3, [sp, #16]
 8009592:	7839      	ldrb	r1, [r7, #0]
 8009594:	4827      	ldr	r0, [pc, #156]	; (8009634 <_svfiprintf_r+0x1e4>)
 8009596:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800959a:	2206      	movs	r2, #6
 800959c:	1c7e      	adds	r6, r7, #1
 800959e:	f7f6 fe2f 	bl	8000200 <memchr>
 80095a2:	2800      	cmp	r0, #0
 80095a4:	d038      	beq.n	8009618 <_svfiprintf_r+0x1c8>
 80095a6:	4b24      	ldr	r3, [pc, #144]	; (8009638 <_svfiprintf_r+0x1e8>)
 80095a8:	bb13      	cbnz	r3, 80095f0 <_svfiprintf_r+0x1a0>
 80095aa:	9b03      	ldr	r3, [sp, #12]
 80095ac:	3307      	adds	r3, #7
 80095ae:	f023 0307 	bic.w	r3, r3, #7
 80095b2:	3308      	adds	r3, #8
 80095b4:	9303      	str	r3, [sp, #12]
 80095b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095b8:	444b      	add	r3, r9
 80095ba:	9309      	str	r3, [sp, #36]	; 0x24
 80095bc:	e76d      	b.n	800949a <_svfiprintf_r+0x4a>
 80095be:	fb05 3202 	mla	r2, r5, r2, r3
 80095c2:	2001      	movs	r0, #1
 80095c4:	460f      	mov	r7, r1
 80095c6:	e7a6      	b.n	8009516 <_svfiprintf_r+0xc6>
 80095c8:	2300      	movs	r3, #0
 80095ca:	3701      	adds	r7, #1
 80095cc:	9305      	str	r3, [sp, #20]
 80095ce:	4619      	mov	r1, r3
 80095d0:	250a      	movs	r5, #10
 80095d2:	4638      	mov	r0, r7
 80095d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095d8:	3a30      	subs	r2, #48	; 0x30
 80095da:	2a09      	cmp	r2, #9
 80095dc:	d903      	bls.n	80095e6 <_svfiprintf_r+0x196>
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d0c8      	beq.n	8009574 <_svfiprintf_r+0x124>
 80095e2:	9105      	str	r1, [sp, #20]
 80095e4:	e7c6      	b.n	8009574 <_svfiprintf_r+0x124>
 80095e6:	fb05 2101 	mla	r1, r5, r1, r2
 80095ea:	2301      	movs	r3, #1
 80095ec:	4607      	mov	r7, r0
 80095ee:	e7f0      	b.n	80095d2 <_svfiprintf_r+0x182>
 80095f0:	ab03      	add	r3, sp, #12
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	4622      	mov	r2, r4
 80095f6:	4b11      	ldr	r3, [pc, #68]	; (800963c <_svfiprintf_r+0x1ec>)
 80095f8:	a904      	add	r1, sp, #16
 80095fa:	4640      	mov	r0, r8
 80095fc:	f3af 8000 	nop.w
 8009600:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009604:	4681      	mov	r9, r0
 8009606:	d1d6      	bne.n	80095b6 <_svfiprintf_r+0x166>
 8009608:	89a3      	ldrh	r3, [r4, #12]
 800960a:	065b      	lsls	r3, r3, #25
 800960c:	f53f af35 	bmi.w	800947a <_svfiprintf_r+0x2a>
 8009610:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009612:	b01d      	add	sp, #116	; 0x74
 8009614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009618:	ab03      	add	r3, sp, #12
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	4622      	mov	r2, r4
 800961e:	4b07      	ldr	r3, [pc, #28]	; (800963c <_svfiprintf_r+0x1ec>)
 8009620:	a904      	add	r1, sp, #16
 8009622:	4640      	mov	r0, r8
 8009624:	f000 f882 	bl	800972c <_printf_i>
 8009628:	e7ea      	b.n	8009600 <_svfiprintf_r+0x1b0>
 800962a:	bf00      	nop
 800962c:	0800bb1b 	.word	0x0800bb1b
 8009630:	0800bb21 	.word	0x0800bb21
 8009634:	0800bb25 	.word	0x0800bb25
 8009638:	00000000 	.word	0x00000000
 800963c:	0800939d 	.word	0x0800939d

08009640 <_printf_common>:
 8009640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009644:	4691      	mov	r9, r2
 8009646:	461f      	mov	r7, r3
 8009648:	688a      	ldr	r2, [r1, #8]
 800964a:	690b      	ldr	r3, [r1, #16]
 800964c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009650:	4293      	cmp	r3, r2
 8009652:	bfb8      	it	lt
 8009654:	4613      	movlt	r3, r2
 8009656:	f8c9 3000 	str.w	r3, [r9]
 800965a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800965e:	4606      	mov	r6, r0
 8009660:	460c      	mov	r4, r1
 8009662:	b112      	cbz	r2, 800966a <_printf_common+0x2a>
 8009664:	3301      	adds	r3, #1
 8009666:	f8c9 3000 	str.w	r3, [r9]
 800966a:	6823      	ldr	r3, [r4, #0]
 800966c:	0699      	lsls	r1, r3, #26
 800966e:	bf42      	ittt	mi
 8009670:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009674:	3302      	addmi	r3, #2
 8009676:	f8c9 3000 	strmi.w	r3, [r9]
 800967a:	6825      	ldr	r5, [r4, #0]
 800967c:	f015 0506 	ands.w	r5, r5, #6
 8009680:	d107      	bne.n	8009692 <_printf_common+0x52>
 8009682:	f104 0a19 	add.w	sl, r4, #25
 8009686:	68e3      	ldr	r3, [r4, #12]
 8009688:	f8d9 2000 	ldr.w	r2, [r9]
 800968c:	1a9b      	subs	r3, r3, r2
 800968e:	42ab      	cmp	r3, r5
 8009690:	dc28      	bgt.n	80096e4 <_printf_common+0xa4>
 8009692:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009696:	6822      	ldr	r2, [r4, #0]
 8009698:	3300      	adds	r3, #0
 800969a:	bf18      	it	ne
 800969c:	2301      	movne	r3, #1
 800969e:	0692      	lsls	r2, r2, #26
 80096a0:	d42d      	bmi.n	80096fe <_printf_common+0xbe>
 80096a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096a6:	4639      	mov	r1, r7
 80096a8:	4630      	mov	r0, r6
 80096aa:	47c0      	blx	r8
 80096ac:	3001      	adds	r0, #1
 80096ae:	d020      	beq.n	80096f2 <_printf_common+0xb2>
 80096b0:	6823      	ldr	r3, [r4, #0]
 80096b2:	68e5      	ldr	r5, [r4, #12]
 80096b4:	f8d9 2000 	ldr.w	r2, [r9]
 80096b8:	f003 0306 	and.w	r3, r3, #6
 80096bc:	2b04      	cmp	r3, #4
 80096be:	bf08      	it	eq
 80096c0:	1aad      	subeq	r5, r5, r2
 80096c2:	68a3      	ldr	r3, [r4, #8]
 80096c4:	6922      	ldr	r2, [r4, #16]
 80096c6:	bf0c      	ite	eq
 80096c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096cc:	2500      	movne	r5, #0
 80096ce:	4293      	cmp	r3, r2
 80096d0:	bfc4      	itt	gt
 80096d2:	1a9b      	subgt	r3, r3, r2
 80096d4:	18ed      	addgt	r5, r5, r3
 80096d6:	f04f 0900 	mov.w	r9, #0
 80096da:	341a      	adds	r4, #26
 80096dc:	454d      	cmp	r5, r9
 80096de:	d11a      	bne.n	8009716 <_printf_common+0xd6>
 80096e0:	2000      	movs	r0, #0
 80096e2:	e008      	b.n	80096f6 <_printf_common+0xb6>
 80096e4:	2301      	movs	r3, #1
 80096e6:	4652      	mov	r2, sl
 80096e8:	4639      	mov	r1, r7
 80096ea:	4630      	mov	r0, r6
 80096ec:	47c0      	blx	r8
 80096ee:	3001      	adds	r0, #1
 80096f0:	d103      	bne.n	80096fa <_printf_common+0xba>
 80096f2:	f04f 30ff 	mov.w	r0, #4294967295
 80096f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096fa:	3501      	adds	r5, #1
 80096fc:	e7c3      	b.n	8009686 <_printf_common+0x46>
 80096fe:	18e1      	adds	r1, r4, r3
 8009700:	1c5a      	adds	r2, r3, #1
 8009702:	2030      	movs	r0, #48	; 0x30
 8009704:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009708:	4422      	add	r2, r4
 800970a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800970e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009712:	3302      	adds	r3, #2
 8009714:	e7c5      	b.n	80096a2 <_printf_common+0x62>
 8009716:	2301      	movs	r3, #1
 8009718:	4622      	mov	r2, r4
 800971a:	4639      	mov	r1, r7
 800971c:	4630      	mov	r0, r6
 800971e:	47c0      	blx	r8
 8009720:	3001      	adds	r0, #1
 8009722:	d0e6      	beq.n	80096f2 <_printf_common+0xb2>
 8009724:	f109 0901 	add.w	r9, r9, #1
 8009728:	e7d8      	b.n	80096dc <_printf_common+0x9c>
	...

0800972c <_printf_i>:
 800972c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009730:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009734:	460c      	mov	r4, r1
 8009736:	7e09      	ldrb	r1, [r1, #24]
 8009738:	b085      	sub	sp, #20
 800973a:	296e      	cmp	r1, #110	; 0x6e
 800973c:	4617      	mov	r7, r2
 800973e:	4606      	mov	r6, r0
 8009740:	4698      	mov	r8, r3
 8009742:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009744:	f000 80b3 	beq.w	80098ae <_printf_i+0x182>
 8009748:	d822      	bhi.n	8009790 <_printf_i+0x64>
 800974a:	2963      	cmp	r1, #99	; 0x63
 800974c:	d036      	beq.n	80097bc <_printf_i+0x90>
 800974e:	d80a      	bhi.n	8009766 <_printf_i+0x3a>
 8009750:	2900      	cmp	r1, #0
 8009752:	f000 80b9 	beq.w	80098c8 <_printf_i+0x19c>
 8009756:	2958      	cmp	r1, #88	; 0x58
 8009758:	f000 8083 	beq.w	8009862 <_printf_i+0x136>
 800975c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009760:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009764:	e032      	b.n	80097cc <_printf_i+0xa0>
 8009766:	2964      	cmp	r1, #100	; 0x64
 8009768:	d001      	beq.n	800976e <_printf_i+0x42>
 800976a:	2969      	cmp	r1, #105	; 0x69
 800976c:	d1f6      	bne.n	800975c <_printf_i+0x30>
 800976e:	6820      	ldr	r0, [r4, #0]
 8009770:	6813      	ldr	r3, [r2, #0]
 8009772:	0605      	lsls	r5, r0, #24
 8009774:	f103 0104 	add.w	r1, r3, #4
 8009778:	d52a      	bpl.n	80097d0 <_printf_i+0xa4>
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	6011      	str	r1, [r2, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	da03      	bge.n	800978a <_printf_i+0x5e>
 8009782:	222d      	movs	r2, #45	; 0x2d
 8009784:	425b      	negs	r3, r3
 8009786:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800978a:	486f      	ldr	r0, [pc, #444]	; (8009948 <_printf_i+0x21c>)
 800978c:	220a      	movs	r2, #10
 800978e:	e039      	b.n	8009804 <_printf_i+0xd8>
 8009790:	2973      	cmp	r1, #115	; 0x73
 8009792:	f000 809d 	beq.w	80098d0 <_printf_i+0x1a4>
 8009796:	d808      	bhi.n	80097aa <_printf_i+0x7e>
 8009798:	296f      	cmp	r1, #111	; 0x6f
 800979a:	d020      	beq.n	80097de <_printf_i+0xb2>
 800979c:	2970      	cmp	r1, #112	; 0x70
 800979e:	d1dd      	bne.n	800975c <_printf_i+0x30>
 80097a0:	6823      	ldr	r3, [r4, #0]
 80097a2:	f043 0320 	orr.w	r3, r3, #32
 80097a6:	6023      	str	r3, [r4, #0]
 80097a8:	e003      	b.n	80097b2 <_printf_i+0x86>
 80097aa:	2975      	cmp	r1, #117	; 0x75
 80097ac:	d017      	beq.n	80097de <_printf_i+0xb2>
 80097ae:	2978      	cmp	r1, #120	; 0x78
 80097b0:	d1d4      	bne.n	800975c <_printf_i+0x30>
 80097b2:	2378      	movs	r3, #120	; 0x78
 80097b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80097b8:	4864      	ldr	r0, [pc, #400]	; (800994c <_printf_i+0x220>)
 80097ba:	e055      	b.n	8009868 <_printf_i+0x13c>
 80097bc:	6813      	ldr	r3, [r2, #0]
 80097be:	1d19      	adds	r1, r3, #4
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	6011      	str	r1, [r2, #0]
 80097c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097cc:	2301      	movs	r3, #1
 80097ce:	e08c      	b.n	80098ea <_printf_i+0x1be>
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	6011      	str	r1, [r2, #0]
 80097d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80097d8:	bf18      	it	ne
 80097da:	b21b      	sxthne	r3, r3
 80097dc:	e7cf      	b.n	800977e <_printf_i+0x52>
 80097de:	6813      	ldr	r3, [r2, #0]
 80097e0:	6825      	ldr	r5, [r4, #0]
 80097e2:	1d18      	adds	r0, r3, #4
 80097e4:	6010      	str	r0, [r2, #0]
 80097e6:	0628      	lsls	r0, r5, #24
 80097e8:	d501      	bpl.n	80097ee <_printf_i+0xc2>
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	e002      	b.n	80097f4 <_printf_i+0xc8>
 80097ee:	0668      	lsls	r0, r5, #25
 80097f0:	d5fb      	bpl.n	80097ea <_printf_i+0xbe>
 80097f2:	881b      	ldrh	r3, [r3, #0]
 80097f4:	4854      	ldr	r0, [pc, #336]	; (8009948 <_printf_i+0x21c>)
 80097f6:	296f      	cmp	r1, #111	; 0x6f
 80097f8:	bf14      	ite	ne
 80097fa:	220a      	movne	r2, #10
 80097fc:	2208      	moveq	r2, #8
 80097fe:	2100      	movs	r1, #0
 8009800:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009804:	6865      	ldr	r5, [r4, #4]
 8009806:	60a5      	str	r5, [r4, #8]
 8009808:	2d00      	cmp	r5, #0
 800980a:	f2c0 8095 	blt.w	8009938 <_printf_i+0x20c>
 800980e:	6821      	ldr	r1, [r4, #0]
 8009810:	f021 0104 	bic.w	r1, r1, #4
 8009814:	6021      	str	r1, [r4, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d13d      	bne.n	8009896 <_printf_i+0x16a>
 800981a:	2d00      	cmp	r5, #0
 800981c:	f040 808e 	bne.w	800993c <_printf_i+0x210>
 8009820:	4665      	mov	r5, ip
 8009822:	2a08      	cmp	r2, #8
 8009824:	d10b      	bne.n	800983e <_printf_i+0x112>
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	07db      	lsls	r3, r3, #31
 800982a:	d508      	bpl.n	800983e <_printf_i+0x112>
 800982c:	6923      	ldr	r3, [r4, #16]
 800982e:	6862      	ldr	r2, [r4, #4]
 8009830:	429a      	cmp	r2, r3
 8009832:	bfde      	ittt	le
 8009834:	2330      	movle	r3, #48	; 0x30
 8009836:	f805 3c01 	strble.w	r3, [r5, #-1]
 800983a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800983e:	ebac 0305 	sub.w	r3, ip, r5
 8009842:	6123      	str	r3, [r4, #16]
 8009844:	f8cd 8000 	str.w	r8, [sp]
 8009848:	463b      	mov	r3, r7
 800984a:	aa03      	add	r2, sp, #12
 800984c:	4621      	mov	r1, r4
 800984e:	4630      	mov	r0, r6
 8009850:	f7ff fef6 	bl	8009640 <_printf_common>
 8009854:	3001      	adds	r0, #1
 8009856:	d14d      	bne.n	80098f4 <_printf_i+0x1c8>
 8009858:	f04f 30ff 	mov.w	r0, #4294967295
 800985c:	b005      	add	sp, #20
 800985e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009862:	4839      	ldr	r0, [pc, #228]	; (8009948 <_printf_i+0x21c>)
 8009864:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009868:	6813      	ldr	r3, [r2, #0]
 800986a:	6821      	ldr	r1, [r4, #0]
 800986c:	1d1d      	adds	r5, r3, #4
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	6015      	str	r5, [r2, #0]
 8009872:	060a      	lsls	r2, r1, #24
 8009874:	d50b      	bpl.n	800988e <_printf_i+0x162>
 8009876:	07ca      	lsls	r2, r1, #31
 8009878:	bf44      	itt	mi
 800987a:	f041 0120 	orrmi.w	r1, r1, #32
 800987e:	6021      	strmi	r1, [r4, #0]
 8009880:	b91b      	cbnz	r3, 800988a <_printf_i+0x15e>
 8009882:	6822      	ldr	r2, [r4, #0]
 8009884:	f022 0220 	bic.w	r2, r2, #32
 8009888:	6022      	str	r2, [r4, #0]
 800988a:	2210      	movs	r2, #16
 800988c:	e7b7      	b.n	80097fe <_printf_i+0xd2>
 800988e:	064d      	lsls	r5, r1, #25
 8009890:	bf48      	it	mi
 8009892:	b29b      	uxthmi	r3, r3
 8009894:	e7ef      	b.n	8009876 <_printf_i+0x14a>
 8009896:	4665      	mov	r5, ip
 8009898:	fbb3 f1f2 	udiv	r1, r3, r2
 800989c:	fb02 3311 	mls	r3, r2, r1, r3
 80098a0:	5cc3      	ldrb	r3, [r0, r3]
 80098a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80098a6:	460b      	mov	r3, r1
 80098a8:	2900      	cmp	r1, #0
 80098aa:	d1f5      	bne.n	8009898 <_printf_i+0x16c>
 80098ac:	e7b9      	b.n	8009822 <_printf_i+0xf6>
 80098ae:	6813      	ldr	r3, [r2, #0]
 80098b0:	6825      	ldr	r5, [r4, #0]
 80098b2:	6961      	ldr	r1, [r4, #20]
 80098b4:	1d18      	adds	r0, r3, #4
 80098b6:	6010      	str	r0, [r2, #0]
 80098b8:	0628      	lsls	r0, r5, #24
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	d501      	bpl.n	80098c2 <_printf_i+0x196>
 80098be:	6019      	str	r1, [r3, #0]
 80098c0:	e002      	b.n	80098c8 <_printf_i+0x19c>
 80098c2:	066a      	lsls	r2, r5, #25
 80098c4:	d5fb      	bpl.n	80098be <_printf_i+0x192>
 80098c6:	8019      	strh	r1, [r3, #0]
 80098c8:	2300      	movs	r3, #0
 80098ca:	6123      	str	r3, [r4, #16]
 80098cc:	4665      	mov	r5, ip
 80098ce:	e7b9      	b.n	8009844 <_printf_i+0x118>
 80098d0:	6813      	ldr	r3, [r2, #0]
 80098d2:	1d19      	adds	r1, r3, #4
 80098d4:	6011      	str	r1, [r2, #0]
 80098d6:	681d      	ldr	r5, [r3, #0]
 80098d8:	6862      	ldr	r2, [r4, #4]
 80098da:	2100      	movs	r1, #0
 80098dc:	4628      	mov	r0, r5
 80098de:	f7f6 fc8f 	bl	8000200 <memchr>
 80098e2:	b108      	cbz	r0, 80098e8 <_printf_i+0x1bc>
 80098e4:	1b40      	subs	r0, r0, r5
 80098e6:	6060      	str	r0, [r4, #4]
 80098e8:	6863      	ldr	r3, [r4, #4]
 80098ea:	6123      	str	r3, [r4, #16]
 80098ec:	2300      	movs	r3, #0
 80098ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098f2:	e7a7      	b.n	8009844 <_printf_i+0x118>
 80098f4:	6923      	ldr	r3, [r4, #16]
 80098f6:	462a      	mov	r2, r5
 80098f8:	4639      	mov	r1, r7
 80098fa:	4630      	mov	r0, r6
 80098fc:	47c0      	blx	r8
 80098fe:	3001      	adds	r0, #1
 8009900:	d0aa      	beq.n	8009858 <_printf_i+0x12c>
 8009902:	6823      	ldr	r3, [r4, #0]
 8009904:	079b      	lsls	r3, r3, #30
 8009906:	d413      	bmi.n	8009930 <_printf_i+0x204>
 8009908:	68e0      	ldr	r0, [r4, #12]
 800990a:	9b03      	ldr	r3, [sp, #12]
 800990c:	4298      	cmp	r0, r3
 800990e:	bfb8      	it	lt
 8009910:	4618      	movlt	r0, r3
 8009912:	e7a3      	b.n	800985c <_printf_i+0x130>
 8009914:	2301      	movs	r3, #1
 8009916:	464a      	mov	r2, r9
 8009918:	4639      	mov	r1, r7
 800991a:	4630      	mov	r0, r6
 800991c:	47c0      	blx	r8
 800991e:	3001      	adds	r0, #1
 8009920:	d09a      	beq.n	8009858 <_printf_i+0x12c>
 8009922:	3501      	adds	r5, #1
 8009924:	68e3      	ldr	r3, [r4, #12]
 8009926:	9a03      	ldr	r2, [sp, #12]
 8009928:	1a9b      	subs	r3, r3, r2
 800992a:	42ab      	cmp	r3, r5
 800992c:	dcf2      	bgt.n	8009914 <_printf_i+0x1e8>
 800992e:	e7eb      	b.n	8009908 <_printf_i+0x1dc>
 8009930:	2500      	movs	r5, #0
 8009932:	f104 0919 	add.w	r9, r4, #25
 8009936:	e7f5      	b.n	8009924 <_printf_i+0x1f8>
 8009938:	2b00      	cmp	r3, #0
 800993a:	d1ac      	bne.n	8009896 <_printf_i+0x16a>
 800993c:	7803      	ldrb	r3, [r0, #0]
 800993e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009942:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009946:	e76c      	b.n	8009822 <_printf_i+0xf6>
 8009948:	0800bb2c 	.word	0x0800bb2c
 800994c:	0800bb3d 	.word	0x0800bb3d

08009950 <_sbrk_r>:
 8009950:	b538      	push	{r3, r4, r5, lr}
 8009952:	4c06      	ldr	r4, [pc, #24]	; (800996c <_sbrk_r+0x1c>)
 8009954:	2300      	movs	r3, #0
 8009956:	4605      	mov	r5, r0
 8009958:	4608      	mov	r0, r1
 800995a:	6023      	str	r3, [r4, #0]
 800995c:	f7ff fa80 	bl	8008e60 <_sbrk>
 8009960:	1c43      	adds	r3, r0, #1
 8009962:	d102      	bne.n	800996a <_sbrk_r+0x1a>
 8009964:	6823      	ldr	r3, [r4, #0]
 8009966:	b103      	cbz	r3, 800996a <_sbrk_r+0x1a>
 8009968:	602b      	str	r3, [r5, #0]
 800996a:	bd38      	pop	{r3, r4, r5, pc}
 800996c:	20002c28 	.word	0x20002c28

08009970 <memmove>:
 8009970:	4288      	cmp	r0, r1
 8009972:	b510      	push	{r4, lr}
 8009974:	eb01 0302 	add.w	r3, r1, r2
 8009978:	d807      	bhi.n	800998a <memmove+0x1a>
 800997a:	1e42      	subs	r2, r0, #1
 800997c:	4299      	cmp	r1, r3
 800997e:	d00a      	beq.n	8009996 <memmove+0x26>
 8009980:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009984:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009988:	e7f8      	b.n	800997c <memmove+0xc>
 800998a:	4283      	cmp	r3, r0
 800998c:	d9f5      	bls.n	800997a <memmove+0xa>
 800998e:	1881      	adds	r1, r0, r2
 8009990:	1ad2      	subs	r2, r2, r3
 8009992:	42d3      	cmn	r3, r2
 8009994:	d100      	bne.n	8009998 <memmove+0x28>
 8009996:	bd10      	pop	{r4, pc}
 8009998:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800999c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80099a0:	e7f7      	b.n	8009992 <memmove+0x22>

080099a2 <__malloc_lock>:
 80099a2:	4770      	bx	lr

080099a4 <__malloc_unlock>:
 80099a4:	4770      	bx	lr

080099a6 <_realloc_r>:
 80099a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a8:	4607      	mov	r7, r0
 80099aa:	4614      	mov	r4, r2
 80099ac:	460e      	mov	r6, r1
 80099ae:	b921      	cbnz	r1, 80099ba <_realloc_r+0x14>
 80099b0:	4611      	mov	r1, r2
 80099b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80099b6:	f7ff bc97 	b.w	80092e8 <_malloc_r>
 80099ba:	b922      	cbnz	r2, 80099c6 <_realloc_r+0x20>
 80099bc:	f7ff fc46 	bl	800924c <_free_r>
 80099c0:	4625      	mov	r5, r4
 80099c2:	4628      	mov	r0, r5
 80099c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099c6:	f000 f814 	bl	80099f2 <_malloc_usable_size_r>
 80099ca:	42a0      	cmp	r0, r4
 80099cc:	d20f      	bcs.n	80099ee <_realloc_r+0x48>
 80099ce:	4621      	mov	r1, r4
 80099d0:	4638      	mov	r0, r7
 80099d2:	f7ff fc89 	bl	80092e8 <_malloc_r>
 80099d6:	4605      	mov	r5, r0
 80099d8:	2800      	cmp	r0, #0
 80099da:	d0f2      	beq.n	80099c2 <_realloc_r+0x1c>
 80099dc:	4631      	mov	r1, r6
 80099de:	4622      	mov	r2, r4
 80099e0:	f7ff fb1c 	bl	800901c <memcpy>
 80099e4:	4631      	mov	r1, r6
 80099e6:	4638      	mov	r0, r7
 80099e8:	f7ff fc30 	bl	800924c <_free_r>
 80099ec:	e7e9      	b.n	80099c2 <_realloc_r+0x1c>
 80099ee:	4635      	mov	r5, r6
 80099f0:	e7e7      	b.n	80099c2 <_realloc_r+0x1c>

080099f2 <_malloc_usable_size_r>:
 80099f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099f6:	1f18      	subs	r0, r3, #4
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	bfbc      	itt	lt
 80099fc:	580b      	ldrlt	r3, [r1, r0]
 80099fe:	18c0      	addlt	r0, r0, r3
 8009a00:	4770      	bx	lr
 8009a02:	0000      	movs	r0, r0
 8009a04:	0000      	movs	r0, r0
	...

08009a08 <cos>:
 8009a08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a0a:	ec51 0b10 	vmov	r0, r1, d0
 8009a0e:	4a1e      	ldr	r2, [pc, #120]	; (8009a88 <cos+0x80>)
 8009a10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009a14:	4293      	cmp	r3, r2
 8009a16:	dc06      	bgt.n	8009a26 <cos+0x1e>
 8009a18:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8009a80 <cos+0x78>
 8009a1c:	f000 fdb4 	bl	800a588 <__kernel_cos>
 8009a20:	ec51 0b10 	vmov	r0, r1, d0
 8009a24:	e007      	b.n	8009a36 <cos+0x2e>
 8009a26:	4a19      	ldr	r2, [pc, #100]	; (8009a8c <cos+0x84>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	dd09      	ble.n	8009a40 <cos+0x38>
 8009a2c:	ee10 2a10 	vmov	r2, s0
 8009a30:	460b      	mov	r3, r1
 8009a32:	f7f6 fc39 	bl	80002a8 <__aeabi_dsub>
 8009a36:	ec41 0b10 	vmov	d0, r0, r1
 8009a3a:	b005      	add	sp, #20
 8009a3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a40:	4668      	mov	r0, sp
 8009a42:	f000 fafd 	bl	800a040 <__ieee754_rem_pio2>
 8009a46:	f000 0003 	and.w	r0, r0, #3
 8009a4a:	2801      	cmp	r0, #1
 8009a4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009a50:	ed9d 0b00 	vldr	d0, [sp]
 8009a54:	d007      	beq.n	8009a66 <cos+0x5e>
 8009a56:	2802      	cmp	r0, #2
 8009a58:	d00e      	beq.n	8009a78 <cos+0x70>
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	d0de      	beq.n	8009a1c <cos+0x14>
 8009a5e:	2001      	movs	r0, #1
 8009a60:	f001 f99a 	bl	800ad98 <__kernel_sin>
 8009a64:	e7dc      	b.n	8009a20 <cos+0x18>
 8009a66:	f001 f997 	bl	800ad98 <__kernel_sin>
 8009a6a:	ec53 2b10 	vmov	r2, r3, d0
 8009a6e:	ee10 0a10 	vmov	r0, s0
 8009a72:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009a76:	e7de      	b.n	8009a36 <cos+0x2e>
 8009a78:	f000 fd86 	bl	800a588 <__kernel_cos>
 8009a7c:	e7f5      	b.n	8009a6a <cos+0x62>
 8009a7e:	bf00      	nop
	...
 8009a88:	3fe921fb 	.word	0x3fe921fb
 8009a8c:	7fefffff 	.word	0x7fefffff

08009a90 <sin>:
 8009a90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a92:	ec51 0b10 	vmov	r0, r1, d0
 8009a96:	4a20      	ldr	r2, [pc, #128]	; (8009b18 <sin+0x88>)
 8009a98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	dc07      	bgt.n	8009ab0 <sin+0x20>
 8009aa0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8009b10 <sin+0x80>
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	f001 f977 	bl	800ad98 <__kernel_sin>
 8009aaa:	ec51 0b10 	vmov	r0, r1, d0
 8009aae:	e007      	b.n	8009ac0 <sin+0x30>
 8009ab0:	4a1a      	ldr	r2, [pc, #104]	; (8009b1c <sin+0x8c>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	dd09      	ble.n	8009aca <sin+0x3a>
 8009ab6:	ee10 2a10 	vmov	r2, s0
 8009aba:	460b      	mov	r3, r1
 8009abc:	f7f6 fbf4 	bl	80002a8 <__aeabi_dsub>
 8009ac0:	ec41 0b10 	vmov	d0, r0, r1
 8009ac4:	b005      	add	sp, #20
 8009ac6:	f85d fb04 	ldr.w	pc, [sp], #4
 8009aca:	4668      	mov	r0, sp
 8009acc:	f000 fab8 	bl	800a040 <__ieee754_rem_pio2>
 8009ad0:	f000 0003 	and.w	r0, r0, #3
 8009ad4:	2801      	cmp	r0, #1
 8009ad6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ada:	ed9d 0b00 	vldr	d0, [sp]
 8009ade:	d004      	beq.n	8009aea <sin+0x5a>
 8009ae0:	2802      	cmp	r0, #2
 8009ae2:	d005      	beq.n	8009af0 <sin+0x60>
 8009ae4:	b970      	cbnz	r0, 8009b04 <sin+0x74>
 8009ae6:	2001      	movs	r0, #1
 8009ae8:	e7dd      	b.n	8009aa6 <sin+0x16>
 8009aea:	f000 fd4d 	bl	800a588 <__kernel_cos>
 8009aee:	e7dc      	b.n	8009aaa <sin+0x1a>
 8009af0:	2001      	movs	r0, #1
 8009af2:	f001 f951 	bl	800ad98 <__kernel_sin>
 8009af6:	ec53 2b10 	vmov	r2, r3, d0
 8009afa:	ee10 0a10 	vmov	r0, s0
 8009afe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009b02:	e7dd      	b.n	8009ac0 <sin+0x30>
 8009b04:	f000 fd40 	bl	800a588 <__kernel_cos>
 8009b08:	e7f5      	b.n	8009af6 <sin+0x66>
 8009b0a:	bf00      	nop
 8009b0c:	f3af 8000 	nop.w
	...
 8009b18:	3fe921fb 	.word	0x3fe921fb
 8009b1c:	7fefffff 	.word	0x7fefffff

08009b20 <log>:
 8009b20:	b570      	push	{r4, r5, r6, lr}
 8009b22:	ed2d 8b02 	vpush	{d8}
 8009b26:	b08a      	sub	sp, #40	; 0x28
 8009b28:	ec55 4b10 	vmov	r4, r5, d0
 8009b2c:	f000 f8d4 	bl	8009cd8 <__ieee754_log>
 8009b30:	4b36      	ldr	r3, [pc, #216]	; (8009c0c <log+0xec>)
 8009b32:	eeb0 8a40 	vmov.f32	s16, s0
 8009b36:	eef0 8a60 	vmov.f32	s17, s1
 8009b3a:	f993 6000 	ldrsb.w	r6, [r3]
 8009b3e:	1c73      	adds	r3, r6, #1
 8009b40:	d05b      	beq.n	8009bfa <log+0xda>
 8009b42:	4622      	mov	r2, r4
 8009b44:	462b      	mov	r3, r5
 8009b46:	4620      	mov	r0, r4
 8009b48:	4629      	mov	r1, r5
 8009b4a:	f7f6 ffff 	bl	8000b4c <__aeabi_dcmpun>
 8009b4e:	2800      	cmp	r0, #0
 8009b50:	d153      	bne.n	8009bfa <log+0xda>
 8009b52:	2200      	movs	r2, #0
 8009b54:	2300      	movs	r3, #0
 8009b56:	4620      	mov	r0, r4
 8009b58:	4629      	mov	r1, r5
 8009b5a:	f7f6 ffed 	bl	8000b38 <__aeabi_dcmpgt>
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	d14b      	bne.n	8009bfa <log+0xda>
 8009b62:	4b2b      	ldr	r3, [pc, #172]	; (8009c10 <log+0xf0>)
 8009b64:	9301      	str	r3, [sp, #4]
 8009b66:	9008      	str	r0, [sp, #32]
 8009b68:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009b6c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009b70:	b9a6      	cbnz	r6, 8009b9c <log+0x7c>
 8009b72:	4b28      	ldr	r3, [pc, #160]	; (8009c14 <log+0xf4>)
 8009b74:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009b78:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	2200      	movs	r2, #0
 8009b80:	2300      	movs	r3, #0
 8009b82:	4629      	mov	r1, r5
 8009b84:	f7f6 ffb0 	bl	8000ae8 <__aeabi_dcmpeq>
 8009b88:	bb40      	cbnz	r0, 8009bdc <log+0xbc>
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	2e02      	cmp	r6, #2
 8009b8e:	9300      	str	r3, [sp, #0]
 8009b90:	d119      	bne.n	8009bc6 <log+0xa6>
 8009b92:	f7ff f9f5 	bl	8008f80 <__errno>
 8009b96:	2321      	movs	r3, #33	; 0x21
 8009b98:	6003      	str	r3, [r0, #0]
 8009b9a:	e019      	b.n	8009bd0 <log+0xb0>
 8009b9c:	4b1e      	ldr	r3, [pc, #120]	; (8009c18 <log+0xf8>)
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	2300      	movs	r3, #0
 8009baa:	4629      	mov	r1, r5
 8009bac:	f7f6 ff9c 	bl	8000ae8 <__aeabi_dcmpeq>
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	d0ea      	beq.n	8009b8a <log+0x6a>
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	429e      	cmp	r6, r3
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	d111      	bne.n	8009be0 <log+0xc0>
 8009bbc:	f7ff f9e0 	bl	8008f80 <__errno>
 8009bc0:	2322      	movs	r3, #34	; 0x22
 8009bc2:	6003      	str	r3, [r0, #0]
 8009bc4:	e011      	b.n	8009bea <log+0xca>
 8009bc6:	4668      	mov	r0, sp
 8009bc8:	f001 fa2e 	bl	800b028 <matherr>
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	d0e0      	beq.n	8009b92 <log+0x72>
 8009bd0:	4812      	ldr	r0, [pc, #72]	; (8009c1c <log+0xfc>)
 8009bd2:	f001 fa2d 	bl	800b030 <nan>
 8009bd6:	ed8d 0b06 	vstr	d0, [sp, #24]
 8009bda:	e006      	b.n	8009bea <log+0xca>
 8009bdc:	2302      	movs	r3, #2
 8009bde:	9300      	str	r3, [sp, #0]
 8009be0:	4668      	mov	r0, sp
 8009be2:	f001 fa21 	bl	800b028 <matherr>
 8009be6:	2800      	cmp	r0, #0
 8009be8:	d0e8      	beq.n	8009bbc <log+0x9c>
 8009bea:	9b08      	ldr	r3, [sp, #32]
 8009bec:	b11b      	cbz	r3, 8009bf6 <log+0xd6>
 8009bee:	f7ff f9c7 	bl	8008f80 <__errno>
 8009bf2:	9b08      	ldr	r3, [sp, #32]
 8009bf4:	6003      	str	r3, [r0, #0]
 8009bf6:	ed9d 8b06 	vldr	d8, [sp, #24]
 8009bfa:	eeb0 0a48 	vmov.f32	s0, s16
 8009bfe:	eef0 0a68 	vmov.f32	s1, s17
 8009c02:	b00a      	add	sp, #40	; 0x28
 8009c04:	ecbd 8b02 	vpop	{d8}
 8009c08:	bd70      	pop	{r4, r5, r6, pc}
 8009c0a:	bf00      	nop
 8009c0c:	2000149c 	.word	0x2000149c
 8009c10:	0800bb4e 	.word	0x0800bb4e
 8009c14:	c7efffff 	.word	0xc7efffff
 8009c18:	fff00000 	.word	0xfff00000
 8009c1c:	0800bb20 	.word	0x0800bb20

08009c20 <sqrt>:
 8009c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c24:	ed2d 8b02 	vpush	{d8}
 8009c28:	b08b      	sub	sp, #44	; 0x2c
 8009c2a:	ec55 4b10 	vmov	r4, r5, d0
 8009c2e:	f000 fbf9 	bl	800a424 <__ieee754_sqrt>
 8009c32:	4b26      	ldr	r3, [pc, #152]	; (8009ccc <sqrt+0xac>)
 8009c34:	eeb0 8a40 	vmov.f32	s16, s0
 8009c38:	eef0 8a60 	vmov.f32	s17, s1
 8009c3c:	f993 6000 	ldrsb.w	r6, [r3]
 8009c40:	1c73      	adds	r3, r6, #1
 8009c42:	d02a      	beq.n	8009c9a <sqrt+0x7a>
 8009c44:	4622      	mov	r2, r4
 8009c46:	462b      	mov	r3, r5
 8009c48:	4620      	mov	r0, r4
 8009c4a:	4629      	mov	r1, r5
 8009c4c:	f7f6 ff7e 	bl	8000b4c <__aeabi_dcmpun>
 8009c50:	4607      	mov	r7, r0
 8009c52:	bb10      	cbnz	r0, 8009c9a <sqrt+0x7a>
 8009c54:	f04f 0800 	mov.w	r8, #0
 8009c58:	f04f 0900 	mov.w	r9, #0
 8009c5c:	4642      	mov	r2, r8
 8009c5e:	464b      	mov	r3, r9
 8009c60:	4620      	mov	r0, r4
 8009c62:	4629      	mov	r1, r5
 8009c64:	f7f6 ff4a 	bl	8000afc <__aeabi_dcmplt>
 8009c68:	b1b8      	cbz	r0, 8009c9a <sqrt+0x7a>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	9300      	str	r3, [sp, #0]
 8009c6e:	4b18      	ldr	r3, [pc, #96]	; (8009cd0 <sqrt+0xb0>)
 8009c70:	9301      	str	r3, [sp, #4]
 8009c72:	9708      	str	r7, [sp, #32]
 8009c74:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009c78:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009c7c:	b9b6      	cbnz	r6, 8009cac <sqrt+0x8c>
 8009c7e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009c82:	4668      	mov	r0, sp
 8009c84:	f001 f9d0 	bl	800b028 <matherr>
 8009c88:	b1d0      	cbz	r0, 8009cc0 <sqrt+0xa0>
 8009c8a:	9b08      	ldr	r3, [sp, #32]
 8009c8c:	b11b      	cbz	r3, 8009c96 <sqrt+0x76>
 8009c8e:	f7ff f977 	bl	8008f80 <__errno>
 8009c92:	9b08      	ldr	r3, [sp, #32]
 8009c94:	6003      	str	r3, [r0, #0]
 8009c96:	ed9d 8b06 	vldr	d8, [sp, #24]
 8009c9a:	eeb0 0a48 	vmov.f32	s0, s16
 8009c9e:	eef0 0a68 	vmov.f32	s1, s17
 8009ca2:	b00b      	add	sp, #44	; 0x2c
 8009ca4:	ecbd 8b02 	vpop	{d8}
 8009ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cac:	4642      	mov	r2, r8
 8009cae:	464b      	mov	r3, r9
 8009cb0:	4640      	mov	r0, r8
 8009cb2:	4649      	mov	r1, r9
 8009cb4:	f7f6 fdda 	bl	800086c <__aeabi_ddiv>
 8009cb8:	2e02      	cmp	r6, #2
 8009cba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009cbe:	d1e0      	bne.n	8009c82 <sqrt+0x62>
 8009cc0:	f7ff f95e 	bl	8008f80 <__errno>
 8009cc4:	2321      	movs	r3, #33	; 0x21
 8009cc6:	6003      	str	r3, [r0, #0]
 8009cc8:	e7df      	b.n	8009c8a <sqrt+0x6a>
 8009cca:	bf00      	nop
 8009ccc:	2000149c 	.word	0x2000149c
 8009cd0:	0800bb52 	.word	0x0800bb52
 8009cd4:	00000000 	.word	0x00000000

08009cd8 <__ieee754_log>:
 8009cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cdc:	ec51 0b10 	vmov	r0, r1, d0
 8009ce0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8009ce4:	b087      	sub	sp, #28
 8009ce6:	460d      	mov	r5, r1
 8009ce8:	da27      	bge.n	8009d3a <__ieee754_log+0x62>
 8009cea:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009cee:	4303      	orrs	r3, r0
 8009cf0:	ee10 2a10 	vmov	r2, s0
 8009cf4:	d10a      	bne.n	8009d0c <__ieee754_log+0x34>
 8009cf6:	49cc      	ldr	r1, [pc, #816]	; (800a028 <__ieee754_log+0x350>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	2000      	movs	r0, #0
 8009cfe:	f7f6 fdb5 	bl	800086c <__aeabi_ddiv>
 8009d02:	ec41 0b10 	vmov	d0, r0, r1
 8009d06:	b007      	add	sp, #28
 8009d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d0c:	2900      	cmp	r1, #0
 8009d0e:	da05      	bge.n	8009d1c <__ieee754_log+0x44>
 8009d10:	460b      	mov	r3, r1
 8009d12:	f7f6 fac9 	bl	80002a8 <__aeabi_dsub>
 8009d16:	2200      	movs	r2, #0
 8009d18:	2300      	movs	r3, #0
 8009d1a:	e7f0      	b.n	8009cfe <__ieee754_log+0x26>
 8009d1c:	4bc3      	ldr	r3, [pc, #780]	; (800a02c <__ieee754_log+0x354>)
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f7f6 fc7a 	bl	8000618 <__aeabi_dmul>
 8009d24:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8009d28:	460d      	mov	r5, r1
 8009d2a:	4ac1      	ldr	r2, [pc, #772]	; (800a030 <__ieee754_log+0x358>)
 8009d2c:	4295      	cmp	r5, r2
 8009d2e:	dd06      	ble.n	8009d3e <__ieee754_log+0x66>
 8009d30:	4602      	mov	r2, r0
 8009d32:	460b      	mov	r3, r1
 8009d34:	f7f6 faba 	bl	80002ac <__adddf3>
 8009d38:	e7e3      	b.n	8009d02 <__ieee754_log+0x2a>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	e7f5      	b.n	8009d2a <__ieee754_log+0x52>
 8009d3e:	152c      	asrs	r4, r5, #20
 8009d40:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009d44:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009d48:	441c      	add	r4, r3
 8009d4a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8009d4e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8009d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d56:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8009d5a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8009d5e:	ea42 0105 	orr.w	r1, r2, r5
 8009d62:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8009d66:	2200      	movs	r2, #0
 8009d68:	4bb2      	ldr	r3, [pc, #712]	; (800a034 <__ieee754_log+0x35c>)
 8009d6a:	f7f6 fa9d 	bl	80002a8 <__aeabi_dsub>
 8009d6e:	1cab      	adds	r3, r5, #2
 8009d70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	4682      	mov	sl, r0
 8009d78:	468b      	mov	fp, r1
 8009d7a:	f04f 0200 	mov.w	r2, #0
 8009d7e:	dc53      	bgt.n	8009e28 <__ieee754_log+0x150>
 8009d80:	2300      	movs	r3, #0
 8009d82:	f7f6 feb1 	bl	8000ae8 <__aeabi_dcmpeq>
 8009d86:	b1d0      	cbz	r0, 8009dbe <__ieee754_log+0xe6>
 8009d88:	2c00      	cmp	r4, #0
 8009d8a:	f000 8120 	beq.w	8009fce <__ieee754_log+0x2f6>
 8009d8e:	4620      	mov	r0, r4
 8009d90:	f7f6 fbd8 	bl	8000544 <__aeabi_i2d>
 8009d94:	a390      	add	r3, pc, #576	; (adr r3, 8009fd8 <__ieee754_log+0x300>)
 8009d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9a:	4606      	mov	r6, r0
 8009d9c:	460f      	mov	r7, r1
 8009d9e:	f7f6 fc3b 	bl	8000618 <__aeabi_dmul>
 8009da2:	a38f      	add	r3, pc, #572	; (adr r3, 8009fe0 <__ieee754_log+0x308>)
 8009da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da8:	4604      	mov	r4, r0
 8009daa:	460d      	mov	r5, r1
 8009dac:	4630      	mov	r0, r6
 8009dae:	4639      	mov	r1, r7
 8009db0:	f7f6 fc32 	bl	8000618 <__aeabi_dmul>
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	4620      	mov	r0, r4
 8009dba:	4629      	mov	r1, r5
 8009dbc:	e7ba      	b.n	8009d34 <__ieee754_log+0x5c>
 8009dbe:	a38a      	add	r3, pc, #552	; (adr r3, 8009fe8 <__ieee754_log+0x310>)
 8009dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc4:	4650      	mov	r0, sl
 8009dc6:	4659      	mov	r1, fp
 8009dc8:	f7f6 fc26 	bl	8000618 <__aeabi_dmul>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	460b      	mov	r3, r1
 8009dd0:	2000      	movs	r0, #0
 8009dd2:	4999      	ldr	r1, [pc, #612]	; (800a038 <__ieee754_log+0x360>)
 8009dd4:	f7f6 fa68 	bl	80002a8 <__aeabi_dsub>
 8009dd8:	4652      	mov	r2, sl
 8009dda:	4606      	mov	r6, r0
 8009ddc:	460f      	mov	r7, r1
 8009dde:	465b      	mov	r3, fp
 8009de0:	4650      	mov	r0, sl
 8009de2:	4659      	mov	r1, fp
 8009de4:	f7f6 fc18 	bl	8000618 <__aeabi_dmul>
 8009de8:	4602      	mov	r2, r0
 8009dea:	460b      	mov	r3, r1
 8009dec:	4630      	mov	r0, r6
 8009dee:	4639      	mov	r1, r7
 8009df0:	f7f6 fc12 	bl	8000618 <__aeabi_dmul>
 8009df4:	4606      	mov	r6, r0
 8009df6:	460f      	mov	r7, r1
 8009df8:	b914      	cbnz	r4, 8009e00 <__ieee754_log+0x128>
 8009dfa:	4632      	mov	r2, r6
 8009dfc:	463b      	mov	r3, r7
 8009dfe:	e0a0      	b.n	8009f42 <__ieee754_log+0x26a>
 8009e00:	4620      	mov	r0, r4
 8009e02:	f7f6 fb9f 	bl	8000544 <__aeabi_i2d>
 8009e06:	a374      	add	r3, pc, #464	; (adr r3, 8009fd8 <__ieee754_log+0x300>)
 8009e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0c:	4680      	mov	r8, r0
 8009e0e:	4689      	mov	r9, r1
 8009e10:	f7f6 fc02 	bl	8000618 <__aeabi_dmul>
 8009e14:	a372      	add	r3, pc, #456	; (adr r3, 8009fe0 <__ieee754_log+0x308>)
 8009e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	460d      	mov	r5, r1
 8009e1e:	4640      	mov	r0, r8
 8009e20:	4649      	mov	r1, r9
 8009e22:	f7f6 fbf9 	bl	8000618 <__aeabi_dmul>
 8009e26:	e0a5      	b.n	8009f74 <__ieee754_log+0x29c>
 8009e28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009e2c:	f7f6 fa3e 	bl	80002ac <__adddf3>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	4650      	mov	r0, sl
 8009e36:	4659      	mov	r1, fp
 8009e38:	f7f6 fd18 	bl	800086c <__aeabi_ddiv>
 8009e3c:	e9cd 0100 	strd	r0, r1, [sp]
 8009e40:	4620      	mov	r0, r4
 8009e42:	f7f6 fb7f 	bl	8000544 <__aeabi_i2d>
 8009e46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e4e:	4610      	mov	r0, r2
 8009e50:	4619      	mov	r1, r3
 8009e52:	f7f6 fbe1 	bl	8000618 <__aeabi_dmul>
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e5e:	f7f6 fbdb 	bl	8000618 <__aeabi_dmul>
 8009e62:	a363      	add	r3, pc, #396	; (adr r3, 8009ff0 <__ieee754_log+0x318>)
 8009e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e68:	4680      	mov	r8, r0
 8009e6a:	4689      	mov	r9, r1
 8009e6c:	f7f6 fbd4 	bl	8000618 <__aeabi_dmul>
 8009e70:	a361      	add	r3, pc, #388	; (adr r3, 8009ff8 <__ieee754_log+0x320>)
 8009e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e76:	f7f6 fa19 	bl	80002ac <__adddf3>
 8009e7a:	4642      	mov	r2, r8
 8009e7c:	464b      	mov	r3, r9
 8009e7e:	f7f6 fbcb 	bl	8000618 <__aeabi_dmul>
 8009e82:	a35f      	add	r3, pc, #380	; (adr r3, 800a000 <__ieee754_log+0x328>)
 8009e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e88:	f7f6 fa10 	bl	80002ac <__adddf3>
 8009e8c:	4642      	mov	r2, r8
 8009e8e:	464b      	mov	r3, r9
 8009e90:	f7f6 fbc2 	bl	8000618 <__aeabi_dmul>
 8009e94:	a35c      	add	r3, pc, #368	; (adr r3, 800a008 <__ieee754_log+0x330>)
 8009e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9a:	f7f6 fa07 	bl	80002ac <__adddf3>
 8009e9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ea2:	f7f6 fbb9 	bl	8000618 <__aeabi_dmul>
 8009ea6:	a35a      	add	r3, pc, #360	; (adr r3, 800a010 <__ieee754_log+0x338>)
 8009ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009eb0:	4640      	mov	r0, r8
 8009eb2:	4649      	mov	r1, r9
 8009eb4:	f7f6 fbb0 	bl	8000618 <__aeabi_dmul>
 8009eb8:	a357      	add	r3, pc, #348	; (adr r3, 800a018 <__ieee754_log+0x340>)
 8009eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ebe:	f7f6 f9f5 	bl	80002ac <__adddf3>
 8009ec2:	4642      	mov	r2, r8
 8009ec4:	464b      	mov	r3, r9
 8009ec6:	f7f6 fba7 	bl	8000618 <__aeabi_dmul>
 8009eca:	a355      	add	r3, pc, #340	; (adr r3, 800a020 <__ieee754_log+0x348>)
 8009ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed0:	f7f6 f9ec 	bl	80002ac <__adddf3>
 8009ed4:	4642      	mov	r2, r8
 8009ed6:	464b      	mov	r3, r9
 8009ed8:	f7f6 fb9e 	bl	8000618 <__aeabi_dmul>
 8009edc:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8009ee8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009eec:	f7f6 f9de 	bl	80002ac <__adddf3>
 8009ef0:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8009ef4:	3551      	adds	r5, #81	; 0x51
 8009ef6:	4335      	orrs	r5, r6
 8009ef8:	2d00      	cmp	r5, #0
 8009efa:	4680      	mov	r8, r0
 8009efc:	4689      	mov	r9, r1
 8009efe:	dd48      	ble.n	8009f92 <__ieee754_log+0x2ba>
 8009f00:	2200      	movs	r2, #0
 8009f02:	4b4d      	ldr	r3, [pc, #308]	; (800a038 <__ieee754_log+0x360>)
 8009f04:	4650      	mov	r0, sl
 8009f06:	4659      	mov	r1, fp
 8009f08:	f7f6 fb86 	bl	8000618 <__aeabi_dmul>
 8009f0c:	4652      	mov	r2, sl
 8009f0e:	465b      	mov	r3, fp
 8009f10:	f7f6 fb82 	bl	8000618 <__aeabi_dmul>
 8009f14:	4602      	mov	r2, r0
 8009f16:	460b      	mov	r3, r1
 8009f18:	4606      	mov	r6, r0
 8009f1a:	460f      	mov	r7, r1
 8009f1c:	4640      	mov	r0, r8
 8009f1e:	4649      	mov	r1, r9
 8009f20:	f7f6 f9c4 	bl	80002ac <__adddf3>
 8009f24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f28:	f7f6 fb76 	bl	8000618 <__aeabi_dmul>
 8009f2c:	4680      	mov	r8, r0
 8009f2e:	4689      	mov	r9, r1
 8009f30:	b964      	cbnz	r4, 8009f4c <__ieee754_log+0x274>
 8009f32:	4602      	mov	r2, r0
 8009f34:	460b      	mov	r3, r1
 8009f36:	4630      	mov	r0, r6
 8009f38:	4639      	mov	r1, r7
 8009f3a:	f7f6 f9b5 	bl	80002a8 <__aeabi_dsub>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	460b      	mov	r3, r1
 8009f42:	4650      	mov	r0, sl
 8009f44:	4659      	mov	r1, fp
 8009f46:	f7f6 f9af 	bl	80002a8 <__aeabi_dsub>
 8009f4a:	e6da      	b.n	8009d02 <__ieee754_log+0x2a>
 8009f4c:	a322      	add	r3, pc, #136	; (adr r3, 8009fd8 <__ieee754_log+0x300>)
 8009f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f56:	f7f6 fb5f 	bl	8000618 <__aeabi_dmul>
 8009f5a:	a321      	add	r3, pc, #132	; (adr r3, 8009fe0 <__ieee754_log+0x308>)
 8009f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f60:	4604      	mov	r4, r0
 8009f62:	460d      	mov	r5, r1
 8009f64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f68:	f7f6 fb56 	bl	8000618 <__aeabi_dmul>
 8009f6c:	4642      	mov	r2, r8
 8009f6e:	464b      	mov	r3, r9
 8009f70:	f7f6 f99c 	bl	80002ac <__adddf3>
 8009f74:	4602      	mov	r2, r0
 8009f76:	460b      	mov	r3, r1
 8009f78:	4630      	mov	r0, r6
 8009f7a:	4639      	mov	r1, r7
 8009f7c:	f7f6 f994 	bl	80002a8 <__aeabi_dsub>
 8009f80:	4652      	mov	r2, sl
 8009f82:	465b      	mov	r3, fp
 8009f84:	f7f6 f990 	bl	80002a8 <__aeabi_dsub>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	4629      	mov	r1, r5
 8009f90:	e7d9      	b.n	8009f46 <__ieee754_log+0x26e>
 8009f92:	4602      	mov	r2, r0
 8009f94:	460b      	mov	r3, r1
 8009f96:	4650      	mov	r0, sl
 8009f98:	4659      	mov	r1, fp
 8009f9a:	f7f6 f985 	bl	80002a8 <__aeabi_dsub>
 8009f9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fa2:	f7f6 fb39 	bl	8000618 <__aeabi_dmul>
 8009fa6:	4606      	mov	r6, r0
 8009fa8:	460f      	mov	r7, r1
 8009faa:	2c00      	cmp	r4, #0
 8009fac:	f43f af25 	beq.w	8009dfa <__ieee754_log+0x122>
 8009fb0:	a309      	add	r3, pc, #36	; (adr r3, 8009fd8 <__ieee754_log+0x300>)
 8009fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fba:	f7f6 fb2d 	bl	8000618 <__aeabi_dmul>
 8009fbe:	a308      	add	r3, pc, #32	; (adr r3, 8009fe0 <__ieee754_log+0x308>)
 8009fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	460d      	mov	r5, r1
 8009fc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fcc:	e729      	b.n	8009e22 <__ieee754_log+0x14a>
 8009fce:	2000      	movs	r0, #0
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	e696      	b.n	8009d02 <__ieee754_log+0x2a>
 8009fd4:	f3af 8000 	nop.w
 8009fd8:	fee00000 	.word	0xfee00000
 8009fdc:	3fe62e42 	.word	0x3fe62e42
 8009fe0:	35793c76 	.word	0x35793c76
 8009fe4:	3dea39ef 	.word	0x3dea39ef
 8009fe8:	55555555 	.word	0x55555555
 8009fec:	3fd55555 	.word	0x3fd55555
 8009ff0:	df3e5244 	.word	0xdf3e5244
 8009ff4:	3fc2f112 	.word	0x3fc2f112
 8009ff8:	96cb03de 	.word	0x96cb03de
 8009ffc:	3fc74664 	.word	0x3fc74664
 800a000:	94229359 	.word	0x94229359
 800a004:	3fd24924 	.word	0x3fd24924
 800a008:	55555593 	.word	0x55555593
 800a00c:	3fe55555 	.word	0x3fe55555
 800a010:	d078c69f 	.word	0xd078c69f
 800a014:	3fc39a09 	.word	0x3fc39a09
 800a018:	1d8e78af 	.word	0x1d8e78af
 800a01c:	3fcc71c5 	.word	0x3fcc71c5
 800a020:	9997fa04 	.word	0x9997fa04
 800a024:	3fd99999 	.word	0x3fd99999
 800a028:	c3500000 	.word	0xc3500000
 800a02c:	43500000 	.word	0x43500000
 800a030:	7fefffff 	.word	0x7fefffff
 800a034:	3ff00000 	.word	0x3ff00000
 800a038:	3fe00000 	.word	0x3fe00000
 800a03c:	00000000 	.word	0x00000000

0800a040 <__ieee754_rem_pio2>:
 800a040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a044:	ec57 6b10 	vmov	r6, r7, d0
 800a048:	4bc3      	ldr	r3, [pc, #780]	; (800a358 <__ieee754_rem_pio2+0x318>)
 800a04a:	b08d      	sub	sp, #52	; 0x34
 800a04c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a050:	4598      	cmp	r8, r3
 800a052:	4604      	mov	r4, r0
 800a054:	9704      	str	r7, [sp, #16]
 800a056:	dc07      	bgt.n	800a068 <__ieee754_rem_pio2+0x28>
 800a058:	2200      	movs	r2, #0
 800a05a:	2300      	movs	r3, #0
 800a05c:	ed84 0b00 	vstr	d0, [r4]
 800a060:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a064:	2500      	movs	r5, #0
 800a066:	e027      	b.n	800a0b8 <__ieee754_rem_pio2+0x78>
 800a068:	4bbc      	ldr	r3, [pc, #752]	; (800a35c <__ieee754_rem_pio2+0x31c>)
 800a06a:	4598      	cmp	r8, r3
 800a06c:	dc75      	bgt.n	800a15a <__ieee754_rem_pio2+0x11a>
 800a06e:	9b04      	ldr	r3, [sp, #16]
 800a070:	4dbb      	ldr	r5, [pc, #748]	; (800a360 <__ieee754_rem_pio2+0x320>)
 800a072:	2b00      	cmp	r3, #0
 800a074:	ee10 0a10 	vmov	r0, s0
 800a078:	a3a9      	add	r3, pc, #676	; (adr r3, 800a320 <__ieee754_rem_pio2+0x2e0>)
 800a07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07e:	4639      	mov	r1, r7
 800a080:	dd36      	ble.n	800a0f0 <__ieee754_rem_pio2+0xb0>
 800a082:	f7f6 f911 	bl	80002a8 <__aeabi_dsub>
 800a086:	45a8      	cmp	r8, r5
 800a088:	4606      	mov	r6, r0
 800a08a:	460f      	mov	r7, r1
 800a08c:	d018      	beq.n	800a0c0 <__ieee754_rem_pio2+0x80>
 800a08e:	a3a6      	add	r3, pc, #664	; (adr r3, 800a328 <__ieee754_rem_pio2+0x2e8>)
 800a090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a094:	f7f6 f908 	bl	80002a8 <__aeabi_dsub>
 800a098:	4602      	mov	r2, r0
 800a09a:	460b      	mov	r3, r1
 800a09c:	e9c4 2300 	strd	r2, r3, [r4]
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	4639      	mov	r1, r7
 800a0a4:	f7f6 f900 	bl	80002a8 <__aeabi_dsub>
 800a0a8:	a39f      	add	r3, pc, #636	; (adr r3, 800a328 <__ieee754_rem_pio2+0x2e8>)
 800a0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ae:	f7f6 f8fb 	bl	80002a8 <__aeabi_dsub>
 800a0b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a0b6:	2501      	movs	r5, #1
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	b00d      	add	sp, #52	; 0x34
 800a0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c0:	a39b      	add	r3, pc, #620	; (adr r3, 800a330 <__ieee754_rem_pio2+0x2f0>)
 800a0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c6:	f7f6 f8ef 	bl	80002a8 <__aeabi_dsub>
 800a0ca:	a39b      	add	r3, pc, #620	; (adr r3, 800a338 <__ieee754_rem_pio2+0x2f8>)
 800a0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d0:	4606      	mov	r6, r0
 800a0d2:	460f      	mov	r7, r1
 800a0d4:	f7f6 f8e8 	bl	80002a8 <__aeabi_dsub>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	460b      	mov	r3, r1
 800a0dc:	e9c4 2300 	strd	r2, r3, [r4]
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	4639      	mov	r1, r7
 800a0e4:	f7f6 f8e0 	bl	80002a8 <__aeabi_dsub>
 800a0e8:	a393      	add	r3, pc, #588	; (adr r3, 800a338 <__ieee754_rem_pio2+0x2f8>)
 800a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ee:	e7de      	b.n	800a0ae <__ieee754_rem_pio2+0x6e>
 800a0f0:	f7f6 f8dc 	bl	80002ac <__adddf3>
 800a0f4:	45a8      	cmp	r8, r5
 800a0f6:	4606      	mov	r6, r0
 800a0f8:	460f      	mov	r7, r1
 800a0fa:	d016      	beq.n	800a12a <__ieee754_rem_pio2+0xea>
 800a0fc:	a38a      	add	r3, pc, #552	; (adr r3, 800a328 <__ieee754_rem_pio2+0x2e8>)
 800a0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a102:	f7f6 f8d3 	bl	80002ac <__adddf3>
 800a106:	4602      	mov	r2, r0
 800a108:	460b      	mov	r3, r1
 800a10a:	e9c4 2300 	strd	r2, r3, [r4]
 800a10e:	4630      	mov	r0, r6
 800a110:	4639      	mov	r1, r7
 800a112:	f7f6 f8c9 	bl	80002a8 <__aeabi_dsub>
 800a116:	a384      	add	r3, pc, #528	; (adr r3, 800a328 <__ieee754_rem_pio2+0x2e8>)
 800a118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11c:	f7f6 f8c6 	bl	80002ac <__adddf3>
 800a120:	f04f 35ff 	mov.w	r5, #4294967295
 800a124:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a128:	e7c6      	b.n	800a0b8 <__ieee754_rem_pio2+0x78>
 800a12a:	a381      	add	r3, pc, #516	; (adr r3, 800a330 <__ieee754_rem_pio2+0x2f0>)
 800a12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a130:	f7f6 f8bc 	bl	80002ac <__adddf3>
 800a134:	a380      	add	r3, pc, #512	; (adr r3, 800a338 <__ieee754_rem_pio2+0x2f8>)
 800a136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13a:	4606      	mov	r6, r0
 800a13c:	460f      	mov	r7, r1
 800a13e:	f7f6 f8b5 	bl	80002ac <__adddf3>
 800a142:	4602      	mov	r2, r0
 800a144:	460b      	mov	r3, r1
 800a146:	e9c4 2300 	strd	r2, r3, [r4]
 800a14a:	4630      	mov	r0, r6
 800a14c:	4639      	mov	r1, r7
 800a14e:	f7f6 f8ab 	bl	80002a8 <__aeabi_dsub>
 800a152:	a379      	add	r3, pc, #484	; (adr r3, 800a338 <__ieee754_rem_pio2+0x2f8>)
 800a154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a158:	e7e0      	b.n	800a11c <__ieee754_rem_pio2+0xdc>
 800a15a:	4b82      	ldr	r3, [pc, #520]	; (800a364 <__ieee754_rem_pio2+0x324>)
 800a15c:	4598      	cmp	r8, r3
 800a15e:	f300 80d0 	bgt.w	800a302 <__ieee754_rem_pio2+0x2c2>
 800a162:	f000 fed3 	bl	800af0c <fabs>
 800a166:	ec57 6b10 	vmov	r6, r7, d0
 800a16a:	ee10 0a10 	vmov	r0, s0
 800a16e:	a374      	add	r3, pc, #464	; (adr r3, 800a340 <__ieee754_rem_pio2+0x300>)
 800a170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a174:	4639      	mov	r1, r7
 800a176:	f7f6 fa4f 	bl	8000618 <__aeabi_dmul>
 800a17a:	2200      	movs	r2, #0
 800a17c:	4b7a      	ldr	r3, [pc, #488]	; (800a368 <__ieee754_rem_pio2+0x328>)
 800a17e:	f7f6 f895 	bl	80002ac <__adddf3>
 800a182:	f7f6 fcf9 	bl	8000b78 <__aeabi_d2iz>
 800a186:	4605      	mov	r5, r0
 800a188:	f7f6 f9dc 	bl	8000544 <__aeabi_i2d>
 800a18c:	a364      	add	r3, pc, #400	; (adr r3, 800a320 <__ieee754_rem_pio2+0x2e0>)
 800a18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a192:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a196:	f7f6 fa3f 	bl	8000618 <__aeabi_dmul>
 800a19a:	4602      	mov	r2, r0
 800a19c:	460b      	mov	r3, r1
 800a19e:	4630      	mov	r0, r6
 800a1a0:	4639      	mov	r1, r7
 800a1a2:	f7f6 f881 	bl	80002a8 <__aeabi_dsub>
 800a1a6:	a360      	add	r3, pc, #384	; (adr r3, 800a328 <__ieee754_rem_pio2+0x2e8>)
 800a1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ac:	4682      	mov	sl, r0
 800a1ae:	468b      	mov	fp, r1
 800a1b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1b4:	f7f6 fa30 	bl	8000618 <__aeabi_dmul>
 800a1b8:	2d1f      	cmp	r5, #31
 800a1ba:	4606      	mov	r6, r0
 800a1bc:	460f      	mov	r7, r1
 800a1be:	dc0c      	bgt.n	800a1da <__ieee754_rem_pio2+0x19a>
 800a1c0:	1e6a      	subs	r2, r5, #1
 800a1c2:	4b6a      	ldr	r3, [pc, #424]	; (800a36c <__ieee754_rem_pio2+0x32c>)
 800a1c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1c8:	4543      	cmp	r3, r8
 800a1ca:	d006      	beq.n	800a1da <__ieee754_rem_pio2+0x19a>
 800a1cc:	4632      	mov	r2, r6
 800a1ce:	463b      	mov	r3, r7
 800a1d0:	4650      	mov	r0, sl
 800a1d2:	4659      	mov	r1, fp
 800a1d4:	f7f6 f868 	bl	80002a8 <__aeabi_dsub>
 800a1d8:	e00e      	b.n	800a1f8 <__ieee754_rem_pio2+0x1b8>
 800a1da:	4632      	mov	r2, r6
 800a1dc:	463b      	mov	r3, r7
 800a1de:	4650      	mov	r0, sl
 800a1e0:	4659      	mov	r1, fp
 800a1e2:	f7f6 f861 	bl	80002a8 <__aeabi_dsub>
 800a1e6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a1ea:	9305      	str	r3, [sp, #20]
 800a1ec:	9a05      	ldr	r2, [sp, #20]
 800a1ee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	2b10      	cmp	r3, #16
 800a1f6:	dc02      	bgt.n	800a1fe <__ieee754_rem_pio2+0x1be>
 800a1f8:	e9c4 0100 	strd	r0, r1, [r4]
 800a1fc:	e039      	b.n	800a272 <__ieee754_rem_pio2+0x232>
 800a1fe:	a34c      	add	r3, pc, #304	; (adr r3, 800a330 <__ieee754_rem_pio2+0x2f0>)
 800a200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a204:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a208:	f7f6 fa06 	bl	8000618 <__aeabi_dmul>
 800a20c:	4606      	mov	r6, r0
 800a20e:	460f      	mov	r7, r1
 800a210:	4602      	mov	r2, r0
 800a212:	460b      	mov	r3, r1
 800a214:	4650      	mov	r0, sl
 800a216:	4659      	mov	r1, fp
 800a218:	f7f6 f846 	bl	80002a8 <__aeabi_dsub>
 800a21c:	4602      	mov	r2, r0
 800a21e:	460b      	mov	r3, r1
 800a220:	4680      	mov	r8, r0
 800a222:	4689      	mov	r9, r1
 800a224:	4650      	mov	r0, sl
 800a226:	4659      	mov	r1, fp
 800a228:	f7f6 f83e 	bl	80002a8 <__aeabi_dsub>
 800a22c:	4632      	mov	r2, r6
 800a22e:	463b      	mov	r3, r7
 800a230:	f7f6 f83a 	bl	80002a8 <__aeabi_dsub>
 800a234:	a340      	add	r3, pc, #256	; (adr r3, 800a338 <__ieee754_rem_pio2+0x2f8>)
 800a236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23a:	4606      	mov	r6, r0
 800a23c:	460f      	mov	r7, r1
 800a23e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a242:	f7f6 f9e9 	bl	8000618 <__aeabi_dmul>
 800a246:	4632      	mov	r2, r6
 800a248:	463b      	mov	r3, r7
 800a24a:	f7f6 f82d 	bl	80002a8 <__aeabi_dsub>
 800a24e:	4602      	mov	r2, r0
 800a250:	460b      	mov	r3, r1
 800a252:	4606      	mov	r6, r0
 800a254:	460f      	mov	r7, r1
 800a256:	4640      	mov	r0, r8
 800a258:	4649      	mov	r1, r9
 800a25a:	f7f6 f825 	bl	80002a8 <__aeabi_dsub>
 800a25e:	9a05      	ldr	r2, [sp, #20]
 800a260:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a264:	1ad3      	subs	r3, r2, r3
 800a266:	2b31      	cmp	r3, #49	; 0x31
 800a268:	dc20      	bgt.n	800a2ac <__ieee754_rem_pio2+0x26c>
 800a26a:	e9c4 0100 	strd	r0, r1, [r4]
 800a26e:	46c2      	mov	sl, r8
 800a270:	46cb      	mov	fp, r9
 800a272:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a276:	4650      	mov	r0, sl
 800a278:	4642      	mov	r2, r8
 800a27a:	464b      	mov	r3, r9
 800a27c:	4659      	mov	r1, fp
 800a27e:	f7f6 f813 	bl	80002a8 <__aeabi_dsub>
 800a282:	463b      	mov	r3, r7
 800a284:	4632      	mov	r2, r6
 800a286:	f7f6 f80f 	bl	80002a8 <__aeabi_dsub>
 800a28a:	9b04      	ldr	r3, [sp, #16]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a292:	f6bf af11 	bge.w	800a0b8 <__ieee754_rem_pio2+0x78>
 800a296:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a29a:	6063      	str	r3, [r4, #4]
 800a29c:	f8c4 8000 	str.w	r8, [r4]
 800a2a0:	60a0      	str	r0, [r4, #8]
 800a2a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2a6:	60e3      	str	r3, [r4, #12]
 800a2a8:	426d      	negs	r5, r5
 800a2aa:	e705      	b.n	800a0b8 <__ieee754_rem_pio2+0x78>
 800a2ac:	a326      	add	r3, pc, #152	; (adr r3, 800a348 <__ieee754_rem_pio2+0x308>)
 800a2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2b6:	f7f6 f9af 	bl	8000618 <__aeabi_dmul>
 800a2ba:	4606      	mov	r6, r0
 800a2bc:	460f      	mov	r7, r1
 800a2be:	4602      	mov	r2, r0
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	4640      	mov	r0, r8
 800a2c4:	4649      	mov	r1, r9
 800a2c6:	f7f5 ffef 	bl	80002a8 <__aeabi_dsub>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	4682      	mov	sl, r0
 800a2d0:	468b      	mov	fp, r1
 800a2d2:	4640      	mov	r0, r8
 800a2d4:	4649      	mov	r1, r9
 800a2d6:	f7f5 ffe7 	bl	80002a8 <__aeabi_dsub>
 800a2da:	4632      	mov	r2, r6
 800a2dc:	463b      	mov	r3, r7
 800a2de:	f7f5 ffe3 	bl	80002a8 <__aeabi_dsub>
 800a2e2:	a31b      	add	r3, pc, #108	; (adr r3, 800a350 <__ieee754_rem_pio2+0x310>)
 800a2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e8:	4606      	mov	r6, r0
 800a2ea:	460f      	mov	r7, r1
 800a2ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2f0:	f7f6 f992 	bl	8000618 <__aeabi_dmul>
 800a2f4:	4632      	mov	r2, r6
 800a2f6:	463b      	mov	r3, r7
 800a2f8:	f7f5 ffd6 	bl	80002a8 <__aeabi_dsub>
 800a2fc:	4606      	mov	r6, r0
 800a2fe:	460f      	mov	r7, r1
 800a300:	e764      	b.n	800a1cc <__ieee754_rem_pio2+0x18c>
 800a302:	4b1b      	ldr	r3, [pc, #108]	; (800a370 <__ieee754_rem_pio2+0x330>)
 800a304:	4598      	cmp	r8, r3
 800a306:	dd35      	ble.n	800a374 <__ieee754_rem_pio2+0x334>
 800a308:	ee10 2a10 	vmov	r2, s0
 800a30c:	463b      	mov	r3, r7
 800a30e:	4630      	mov	r0, r6
 800a310:	4639      	mov	r1, r7
 800a312:	f7f5 ffc9 	bl	80002a8 <__aeabi_dsub>
 800a316:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a31a:	e9c4 0100 	strd	r0, r1, [r4]
 800a31e:	e6a1      	b.n	800a064 <__ieee754_rem_pio2+0x24>
 800a320:	54400000 	.word	0x54400000
 800a324:	3ff921fb 	.word	0x3ff921fb
 800a328:	1a626331 	.word	0x1a626331
 800a32c:	3dd0b461 	.word	0x3dd0b461
 800a330:	1a600000 	.word	0x1a600000
 800a334:	3dd0b461 	.word	0x3dd0b461
 800a338:	2e037073 	.word	0x2e037073
 800a33c:	3ba3198a 	.word	0x3ba3198a
 800a340:	6dc9c883 	.word	0x6dc9c883
 800a344:	3fe45f30 	.word	0x3fe45f30
 800a348:	2e000000 	.word	0x2e000000
 800a34c:	3ba3198a 	.word	0x3ba3198a
 800a350:	252049c1 	.word	0x252049c1
 800a354:	397b839a 	.word	0x397b839a
 800a358:	3fe921fb 	.word	0x3fe921fb
 800a35c:	4002d97b 	.word	0x4002d97b
 800a360:	3ff921fb 	.word	0x3ff921fb
 800a364:	413921fb 	.word	0x413921fb
 800a368:	3fe00000 	.word	0x3fe00000
 800a36c:	0800bb58 	.word	0x0800bb58
 800a370:	7fefffff 	.word	0x7fefffff
 800a374:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a378:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800a37c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a380:	4630      	mov	r0, r6
 800a382:	460f      	mov	r7, r1
 800a384:	f7f6 fbf8 	bl	8000b78 <__aeabi_d2iz>
 800a388:	f7f6 f8dc 	bl	8000544 <__aeabi_i2d>
 800a38c:	4602      	mov	r2, r0
 800a38e:	460b      	mov	r3, r1
 800a390:	4630      	mov	r0, r6
 800a392:	4639      	mov	r1, r7
 800a394:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a398:	f7f5 ff86 	bl	80002a8 <__aeabi_dsub>
 800a39c:	2200      	movs	r2, #0
 800a39e:	4b1f      	ldr	r3, [pc, #124]	; (800a41c <__ieee754_rem_pio2+0x3dc>)
 800a3a0:	f7f6 f93a 	bl	8000618 <__aeabi_dmul>
 800a3a4:	460f      	mov	r7, r1
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	f7f6 fbe6 	bl	8000b78 <__aeabi_d2iz>
 800a3ac:	f7f6 f8ca 	bl	8000544 <__aeabi_i2d>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	4630      	mov	r0, r6
 800a3b6:	4639      	mov	r1, r7
 800a3b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a3bc:	f7f5 ff74 	bl	80002a8 <__aeabi_dsub>
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	4b16      	ldr	r3, [pc, #88]	; (800a41c <__ieee754_rem_pio2+0x3dc>)
 800a3c4:	f7f6 f928 	bl	8000618 <__aeabi_dmul>
 800a3c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a3cc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800a3d0:	f04f 0803 	mov.w	r8, #3
 800a3d4:	2600      	movs	r6, #0
 800a3d6:	2700      	movs	r7, #0
 800a3d8:	4632      	mov	r2, r6
 800a3da:	463b      	mov	r3, r7
 800a3dc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a3e0:	f108 3aff 	add.w	sl, r8, #4294967295
 800a3e4:	f7f6 fb80 	bl	8000ae8 <__aeabi_dcmpeq>
 800a3e8:	b9b0      	cbnz	r0, 800a418 <__ieee754_rem_pio2+0x3d8>
 800a3ea:	4b0d      	ldr	r3, [pc, #52]	; (800a420 <__ieee754_rem_pio2+0x3e0>)
 800a3ec:	9301      	str	r3, [sp, #4]
 800a3ee:	2302      	movs	r3, #2
 800a3f0:	9300      	str	r3, [sp, #0]
 800a3f2:	462a      	mov	r2, r5
 800a3f4:	4643      	mov	r3, r8
 800a3f6:	4621      	mov	r1, r4
 800a3f8:	a806      	add	r0, sp, #24
 800a3fa:	f000 f98d 	bl	800a718 <__kernel_rem_pio2>
 800a3fe:	9b04      	ldr	r3, [sp, #16]
 800a400:	2b00      	cmp	r3, #0
 800a402:	4605      	mov	r5, r0
 800a404:	f6bf ae58 	bge.w	800a0b8 <__ieee754_rem_pio2+0x78>
 800a408:	6863      	ldr	r3, [r4, #4]
 800a40a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a40e:	6063      	str	r3, [r4, #4]
 800a410:	68e3      	ldr	r3, [r4, #12]
 800a412:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a416:	e746      	b.n	800a2a6 <__ieee754_rem_pio2+0x266>
 800a418:	46d0      	mov	r8, sl
 800a41a:	e7dd      	b.n	800a3d8 <__ieee754_rem_pio2+0x398>
 800a41c:	41700000 	.word	0x41700000
 800a420:	0800bbd8 	.word	0x0800bbd8

0800a424 <__ieee754_sqrt>:
 800a424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a428:	4955      	ldr	r1, [pc, #340]	; (800a580 <__ieee754_sqrt+0x15c>)
 800a42a:	ec55 4b10 	vmov	r4, r5, d0
 800a42e:	43a9      	bics	r1, r5
 800a430:	462b      	mov	r3, r5
 800a432:	462a      	mov	r2, r5
 800a434:	d112      	bne.n	800a45c <__ieee754_sqrt+0x38>
 800a436:	ee10 2a10 	vmov	r2, s0
 800a43a:	ee10 0a10 	vmov	r0, s0
 800a43e:	4629      	mov	r1, r5
 800a440:	f7f6 f8ea 	bl	8000618 <__aeabi_dmul>
 800a444:	4602      	mov	r2, r0
 800a446:	460b      	mov	r3, r1
 800a448:	4620      	mov	r0, r4
 800a44a:	4629      	mov	r1, r5
 800a44c:	f7f5 ff2e 	bl	80002ac <__adddf3>
 800a450:	4604      	mov	r4, r0
 800a452:	460d      	mov	r5, r1
 800a454:	ec45 4b10 	vmov	d0, r4, r5
 800a458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a45c:	2d00      	cmp	r5, #0
 800a45e:	ee10 0a10 	vmov	r0, s0
 800a462:	4621      	mov	r1, r4
 800a464:	dc0f      	bgt.n	800a486 <__ieee754_sqrt+0x62>
 800a466:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a46a:	4330      	orrs	r0, r6
 800a46c:	d0f2      	beq.n	800a454 <__ieee754_sqrt+0x30>
 800a46e:	b155      	cbz	r5, 800a486 <__ieee754_sqrt+0x62>
 800a470:	ee10 2a10 	vmov	r2, s0
 800a474:	4620      	mov	r0, r4
 800a476:	4629      	mov	r1, r5
 800a478:	f7f5 ff16 	bl	80002a8 <__aeabi_dsub>
 800a47c:	4602      	mov	r2, r0
 800a47e:	460b      	mov	r3, r1
 800a480:	f7f6 f9f4 	bl	800086c <__aeabi_ddiv>
 800a484:	e7e4      	b.n	800a450 <__ieee754_sqrt+0x2c>
 800a486:	151b      	asrs	r3, r3, #20
 800a488:	d073      	beq.n	800a572 <__ieee754_sqrt+0x14e>
 800a48a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a48e:	07dd      	lsls	r5, r3, #31
 800a490:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a494:	bf48      	it	mi
 800a496:	0fc8      	lsrmi	r0, r1, #31
 800a498:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a49c:	bf44      	itt	mi
 800a49e:	0049      	lslmi	r1, r1, #1
 800a4a0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800a4a4:	2500      	movs	r5, #0
 800a4a6:	1058      	asrs	r0, r3, #1
 800a4a8:	0fcb      	lsrs	r3, r1, #31
 800a4aa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800a4ae:	0049      	lsls	r1, r1, #1
 800a4b0:	2316      	movs	r3, #22
 800a4b2:	462c      	mov	r4, r5
 800a4b4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a4b8:	19a7      	adds	r7, r4, r6
 800a4ba:	4297      	cmp	r7, r2
 800a4bc:	bfde      	ittt	le
 800a4be:	19bc      	addle	r4, r7, r6
 800a4c0:	1bd2      	suble	r2, r2, r7
 800a4c2:	19ad      	addle	r5, r5, r6
 800a4c4:	0fcf      	lsrs	r7, r1, #31
 800a4c6:	3b01      	subs	r3, #1
 800a4c8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800a4cc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a4d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a4d4:	d1f0      	bne.n	800a4b8 <__ieee754_sqrt+0x94>
 800a4d6:	f04f 0c20 	mov.w	ip, #32
 800a4da:	469e      	mov	lr, r3
 800a4dc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a4e0:	42a2      	cmp	r2, r4
 800a4e2:	eb06 070e 	add.w	r7, r6, lr
 800a4e6:	dc02      	bgt.n	800a4ee <__ieee754_sqrt+0xca>
 800a4e8:	d112      	bne.n	800a510 <__ieee754_sqrt+0xec>
 800a4ea:	428f      	cmp	r7, r1
 800a4ec:	d810      	bhi.n	800a510 <__ieee754_sqrt+0xec>
 800a4ee:	2f00      	cmp	r7, #0
 800a4f0:	eb07 0e06 	add.w	lr, r7, r6
 800a4f4:	da42      	bge.n	800a57c <__ieee754_sqrt+0x158>
 800a4f6:	f1be 0f00 	cmp.w	lr, #0
 800a4fa:	db3f      	blt.n	800a57c <__ieee754_sqrt+0x158>
 800a4fc:	f104 0801 	add.w	r8, r4, #1
 800a500:	1b12      	subs	r2, r2, r4
 800a502:	428f      	cmp	r7, r1
 800a504:	bf88      	it	hi
 800a506:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a50a:	1bc9      	subs	r1, r1, r7
 800a50c:	4433      	add	r3, r6
 800a50e:	4644      	mov	r4, r8
 800a510:	0052      	lsls	r2, r2, #1
 800a512:	f1bc 0c01 	subs.w	ip, ip, #1
 800a516:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800a51a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a51e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a522:	d1dd      	bne.n	800a4e0 <__ieee754_sqrt+0xbc>
 800a524:	430a      	orrs	r2, r1
 800a526:	d006      	beq.n	800a536 <__ieee754_sqrt+0x112>
 800a528:	1c5c      	adds	r4, r3, #1
 800a52a:	bf13      	iteet	ne
 800a52c:	3301      	addne	r3, #1
 800a52e:	3501      	addeq	r5, #1
 800a530:	4663      	moveq	r3, ip
 800a532:	f023 0301 	bicne.w	r3, r3, #1
 800a536:	106a      	asrs	r2, r5, #1
 800a538:	085b      	lsrs	r3, r3, #1
 800a53a:	07e9      	lsls	r1, r5, #31
 800a53c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a540:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a544:	bf48      	it	mi
 800a546:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a54a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800a54e:	461c      	mov	r4, r3
 800a550:	e780      	b.n	800a454 <__ieee754_sqrt+0x30>
 800a552:	0aca      	lsrs	r2, r1, #11
 800a554:	3815      	subs	r0, #21
 800a556:	0549      	lsls	r1, r1, #21
 800a558:	2a00      	cmp	r2, #0
 800a55a:	d0fa      	beq.n	800a552 <__ieee754_sqrt+0x12e>
 800a55c:	02d6      	lsls	r6, r2, #11
 800a55e:	d50a      	bpl.n	800a576 <__ieee754_sqrt+0x152>
 800a560:	f1c3 0420 	rsb	r4, r3, #32
 800a564:	fa21 f404 	lsr.w	r4, r1, r4
 800a568:	1e5d      	subs	r5, r3, #1
 800a56a:	4099      	lsls	r1, r3
 800a56c:	4322      	orrs	r2, r4
 800a56e:	1b43      	subs	r3, r0, r5
 800a570:	e78b      	b.n	800a48a <__ieee754_sqrt+0x66>
 800a572:	4618      	mov	r0, r3
 800a574:	e7f0      	b.n	800a558 <__ieee754_sqrt+0x134>
 800a576:	0052      	lsls	r2, r2, #1
 800a578:	3301      	adds	r3, #1
 800a57a:	e7ef      	b.n	800a55c <__ieee754_sqrt+0x138>
 800a57c:	46a0      	mov	r8, r4
 800a57e:	e7bf      	b.n	800a500 <__ieee754_sqrt+0xdc>
 800a580:	7ff00000 	.word	0x7ff00000
 800a584:	00000000 	.word	0x00000000

0800a588 <__kernel_cos>:
 800a588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a58c:	ec59 8b10 	vmov	r8, r9, d0
 800a590:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800a594:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800a598:	ed2d 8b02 	vpush	{d8}
 800a59c:	eeb0 8a41 	vmov.f32	s16, s2
 800a5a0:	eef0 8a61 	vmov.f32	s17, s3
 800a5a4:	da07      	bge.n	800a5b6 <__kernel_cos+0x2e>
 800a5a6:	ee10 0a10 	vmov	r0, s0
 800a5aa:	4649      	mov	r1, r9
 800a5ac:	f7f6 fae4 	bl	8000b78 <__aeabi_d2iz>
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	f000 8089 	beq.w	800a6c8 <__kernel_cos+0x140>
 800a5b6:	4642      	mov	r2, r8
 800a5b8:	464b      	mov	r3, r9
 800a5ba:	4640      	mov	r0, r8
 800a5bc:	4649      	mov	r1, r9
 800a5be:	f7f6 f82b 	bl	8000618 <__aeabi_dmul>
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	4b4e      	ldr	r3, [pc, #312]	; (800a700 <__kernel_cos+0x178>)
 800a5c6:	4604      	mov	r4, r0
 800a5c8:	460d      	mov	r5, r1
 800a5ca:	f7f6 f825 	bl	8000618 <__aeabi_dmul>
 800a5ce:	a340      	add	r3, pc, #256	; (adr r3, 800a6d0 <__kernel_cos+0x148>)
 800a5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d4:	4682      	mov	sl, r0
 800a5d6:	468b      	mov	fp, r1
 800a5d8:	4620      	mov	r0, r4
 800a5da:	4629      	mov	r1, r5
 800a5dc:	f7f6 f81c 	bl	8000618 <__aeabi_dmul>
 800a5e0:	a33d      	add	r3, pc, #244	; (adr r3, 800a6d8 <__kernel_cos+0x150>)
 800a5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e6:	f7f5 fe61 	bl	80002ac <__adddf3>
 800a5ea:	4622      	mov	r2, r4
 800a5ec:	462b      	mov	r3, r5
 800a5ee:	f7f6 f813 	bl	8000618 <__aeabi_dmul>
 800a5f2:	a33b      	add	r3, pc, #236	; (adr r3, 800a6e0 <__kernel_cos+0x158>)
 800a5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f8:	f7f5 fe56 	bl	80002a8 <__aeabi_dsub>
 800a5fc:	4622      	mov	r2, r4
 800a5fe:	462b      	mov	r3, r5
 800a600:	f7f6 f80a 	bl	8000618 <__aeabi_dmul>
 800a604:	a338      	add	r3, pc, #224	; (adr r3, 800a6e8 <__kernel_cos+0x160>)
 800a606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60a:	f7f5 fe4f 	bl	80002ac <__adddf3>
 800a60e:	4622      	mov	r2, r4
 800a610:	462b      	mov	r3, r5
 800a612:	f7f6 f801 	bl	8000618 <__aeabi_dmul>
 800a616:	a336      	add	r3, pc, #216	; (adr r3, 800a6f0 <__kernel_cos+0x168>)
 800a618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61c:	f7f5 fe44 	bl	80002a8 <__aeabi_dsub>
 800a620:	4622      	mov	r2, r4
 800a622:	462b      	mov	r3, r5
 800a624:	f7f5 fff8 	bl	8000618 <__aeabi_dmul>
 800a628:	a333      	add	r3, pc, #204	; (adr r3, 800a6f8 <__kernel_cos+0x170>)
 800a62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62e:	f7f5 fe3d 	bl	80002ac <__adddf3>
 800a632:	4622      	mov	r2, r4
 800a634:	462b      	mov	r3, r5
 800a636:	f7f5 ffef 	bl	8000618 <__aeabi_dmul>
 800a63a:	4622      	mov	r2, r4
 800a63c:	462b      	mov	r3, r5
 800a63e:	f7f5 ffeb 	bl	8000618 <__aeabi_dmul>
 800a642:	ec53 2b18 	vmov	r2, r3, d8
 800a646:	4604      	mov	r4, r0
 800a648:	460d      	mov	r5, r1
 800a64a:	4640      	mov	r0, r8
 800a64c:	4649      	mov	r1, r9
 800a64e:	f7f5 ffe3 	bl	8000618 <__aeabi_dmul>
 800a652:	460b      	mov	r3, r1
 800a654:	4602      	mov	r2, r0
 800a656:	4629      	mov	r1, r5
 800a658:	4620      	mov	r0, r4
 800a65a:	f7f5 fe25 	bl	80002a8 <__aeabi_dsub>
 800a65e:	4b29      	ldr	r3, [pc, #164]	; (800a704 <__kernel_cos+0x17c>)
 800a660:	429e      	cmp	r6, r3
 800a662:	4680      	mov	r8, r0
 800a664:	4689      	mov	r9, r1
 800a666:	dc11      	bgt.n	800a68c <__kernel_cos+0x104>
 800a668:	4602      	mov	r2, r0
 800a66a:	460b      	mov	r3, r1
 800a66c:	4650      	mov	r0, sl
 800a66e:	4659      	mov	r1, fp
 800a670:	f7f5 fe1a 	bl	80002a8 <__aeabi_dsub>
 800a674:	460b      	mov	r3, r1
 800a676:	4924      	ldr	r1, [pc, #144]	; (800a708 <__kernel_cos+0x180>)
 800a678:	4602      	mov	r2, r0
 800a67a:	2000      	movs	r0, #0
 800a67c:	f7f5 fe14 	bl	80002a8 <__aeabi_dsub>
 800a680:	ecbd 8b02 	vpop	{d8}
 800a684:	ec41 0b10 	vmov	d0, r0, r1
 800a688:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a68c:	4b1f      	ldr	r3, [pc, #124]	; (800a70c <__kernel_cos+0x184>)
 800a68e:	491e      	ldr	r1, [pc, #120]	; (800a708 <__kernel_cos+0x180>)
 800a690:	429e      	cmp	r6, r3
 800a692:	bfcc      	ite	gt
 800a694:	4d1e      	ldrgt	r5, [pc, #120]	; (800a710 <__kernel_cos+0x188>)
 800a696:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800a69a:	2400      	movs	r4, #0
 800a69c:	4622      	mov	r2, r4
 800a69e:	462b      	mov	r3, r5
 800a6a0:	2000      	movs	r0, #0
 800a6a2:	f7f5 fe01 	bl	80002a8 <__aeabi_dsub>
 800a6a6:	4622      	mov	r2, r4
 800a6a8:	4606      	mov	r6, r0
 800a6aa:	460f      	mov	r7, r1
 800a6ac:	462b      	mov	r3, r5
 800a6ae:	4650      	mov	r0, sl
 800a6b0:	4659      	mov	r1, fp
 800a6b2:	f7f5 fdf9 	bl	80002a8 <__aeabi_dsub>
 800a6b6:	4642      	mov	r2, r8
 800a6b8:	464b      	mov	r3, r9
 800a6ba:	f7f5 fdf5 	bl	80002a8 <__aeabi_dsub>
 800a6be:	4602      	mov	r2, r0
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	4639      	mov	r1, r7
 800a6c6:	e7d9      	b.n	800a67c <__kernel_cos+0xf4>
 800a6c8:	2000      	movs	r0, #0
 800a6ca:	490f      	ldr	r1, [pc, #60]	; (800a708 <__kernel_cos+0x180>)
 800a6cc:	e7d8      	b.n	800a680 <__kernel_cos+0xf8>
 800a6ce:	bf00      	nop
 800a6d0:	be8838d4 	.word	0xbe8838d4
 800a6d4:	bda8fae9 	.word	0xbda8fae9
 800a6d8:	bdb4b1c4 	.word	0xbdb4b1c4
 800a6dc:	3e21ee9e 	.word	0x3e21ee9e
 800a6e0:	809c52ad 	.word	0x809c52ad
 800a6e4:	3e927e4f 	.word	0x3e927e4f
 800a6e8:	19cb1590 	.word	0x19cb1590
 800a6ec:	3efa01a0 	.word	0x3efa01a0
 800a6f0:	16c15177 	.word	0x16c15177
 800a6f4:	3f56c16c 	.word	0x3f56c16c
 800a6f8:	5555554c 	.word	0x5555554c
 800a6fc:	3fa55555 	.word	0x3fa55555
 800a700:	3fe00000 	.word	0x3fe00000
 800a704:	3fd33332 	.word	0x3fd33332
 800a708:	3ff00000 	.word	0x3ff00000
 800a70c:	3fe90000 	.word	0x3fe90000
 800a710:	3fd20000 	.word	0x3fd20000
 800a714:	00000000 	.word	0x00000000

0800a718 <__kernel_rem_pio2>:
 800a718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71c:	ed2d 8b02 	vpush	{d8}
 800a720:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a724:	1ed4      	subs	r4, r2, #3
 800a726:	9308      	str	r3, [sp, #32]
 800a728:	9101      	str	r1, [sp, #4]
 800a72a:	4bc5      	ldr	r3, [pc, #788]	; (800aa40 <__kernel_rem_pio2+0x328>)
 800a72c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a72e:	9009      	str	r0, [sp, #36]	; 0x24
 800a730:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a734:	9304      	str	r3, [sp, #16]
 800a736:	9b08      	ldr	r3, [sp, #32]
 800a738:	3b01      	subs	r3, #1
 800a73a:	9307      	str	r3, [sp, #28]
 800a73c:	2318      	movs	r3, #24
 800a73e:	fb94 f4f3 	sdiv	r4, r4, r3
 800a742:	f06f 0317 	mvn.w	r3, #23
 800a746:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800a74a:	fb04 3303 	mla	r3, r4, r3, r3
 800a74e:	eb03 0a02 	add.w	sl, r3, r2
 800a752:	9b04      	ldr	r3, [sp, #16]
 800a754:	9a07      	ldr	r2, [sp, #28]
 800a756:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800aa30 <__kernel_rem_pio2+0x318>
 800a75a:	eb03 0802 	add.w	r8, r3, r2
 800a75e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a760:	1aa7      	subs	r7, r4, r2
 800a762:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a766:	ae22      	add	r6, sp, #136	; 0x88
 800a768:	2500      	movs	r5, #0
 800a76a:	4545      	cmp	r5, r8
 800a76c:	dd13      	ble.n	800a796 <__kernel_rem_pio2+0x7e>
 800a76e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800aa30 <__kernel_rem_pio2+0x318>
 800a772:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a776:	2600      	movs	r6, #0
 800a778:	9b04      	ldr	r3, [sp, #16]
 800a77a:	429e      	cmp	r6, r3
 800a77c:	dc32      	bgt.n	800a7e4 <__kernel_rem_pio2+0xcc>
 800a77e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a780:	9302      	str	r3, [sp, #8]
 800a782:	9b08      	ldr	r3, [sp, #32]
 800a784:	199d      	adds	r5, r3, r6
 800a786:	ab22      	add	r3, sp, #136	; 0x88
 800a788:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a78c:	9306      	str	r3, [sp, #24]
 800a78e:	ec59 8b18 	vmov	r8, r9, d8
 800a792:	2700      	movs	r7, #0
 800a794:	e01f      	b.n	800a7d6 <__kernel_rem_pio2+0xbe>
 800a796:	42ef      	cmn	r7, r5
 800a798:	d407      	bmi.n	800a7aa <__kernel_rem_pio2+0x92>
 800a79a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a79e:	f7f5 fed1 	bl	8000544 <__aeabi_i2d>
 800a7a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a7a6:	3501      	adds	r5, #1
 800a7a8:	e7df      	b.n	800a76a <__kernel_rem_pio2+0x52>
 800a7aa:	ec51 0b18 	vmov	r0, r1, d8
 800a7ae:	e7f8      	b.n	800a7a2 <__kernel_rem_pio2+0x8a>
 800a7b0:	9906      	ldr	r1, [sp, #24]
 800a7b2:	9d02      	ldr	r5, [sp, #8]
 800a7b4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800a7b8:	9106      	str	r1, [sp, #24]
 800a7ba:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800a7be:	9502      	str	r5, [sp, #8]
 800a7c0:	f7f5 ff2a 	bl	8000618 <__aeabi_dmul>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	4640      	mov	r0, r8
 800a7ca:	4649      	mov	r1, r9
 800a7cc:	f7f5 fd6e 	bl	80002ac <__adddf3>
 800a7d0:	3701      	adds	r7, #1
 800a7d2:	4680      	mov	r8, r0
 800a7d4:	4689      	mov	r9, r1
 800a7d6:	9b07      	ldr	r3, [sp, #28]
 800a7d8:	429f      	cmp	r7, r3
 800a7da:	dde9      	ble.n	800a7b0 <__kernel_rem_pio2+0x98>
 800a7dc:	e8eb 8902 	strd	r8, r9, [fp], #8
 800a7e0:	3601      	adds	r6, #1
 800a7e2:	e7c9      	b.n	800a778 <__kernel_rem_pio2+0x60>
 800a7e4:	9b04      	ldr	r3, [sp, #16]
 800a7e6:	aa0e      	add	r2, sp, #56	; 0x38
 800a7e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a7ec:	930c      	str	r3, [sp, #48]	; 0x30
 800a7ee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a7f0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a7f4:	9c04      	ldr	r4, [sp, #16]
 800a7f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7f8:	ab9a      	add	r3, sp, #616	; 0x268
 800a7fa:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800a7fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a802:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a806:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800a80a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800a80e:	ab9a      	add	r3, sp, #616	; 0x268
 800a810:	445b      	add	r3, fp
 800a812:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800a816:	2500      	movs	r5, #0
 800a818:	1b63      	subs	r3, r4, r5
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	dc78      	bgt.n	800a910 <__kernel_rem_pio2+0x1f8>
 800a81e:	4650      	mov	r0, sl
 800a820:	ec49 8b10 	vmov	d0, r8, r9
 800a824:	f000 fc0c 	bl	800b040 <scalbn>
 800a828:	ec57 6b10 	vmov	r6, r7, d0
 800a82c:	2200      	movs	r2, #0
 800a82e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a832:	ee10 0a10 	vmov	r0, s0
 800a836:	4639      	mov	r1, r7
 800a838:	f7f5 feee 	bl	8000618 <__aeabi_dmul>
 800a83c:	ec41 0b10 	vmov	d0, r0, r1
 800a840:	f000 fb6e 	bl	800af20 <floor>
 800a844:	2200      	movs	r2, #0
 800a846:	ec51 0b10 	vmov	r0, r1, d0
 800a84a:	4b7e      	ldr	r3, [pc, #504]	; (800aa44 <__kernel_rem_pio2+0x32c>)
 800a84c:	f7f5 fee4 	bl	8000618 <__aeabi_dmul>
 800a850:	4602      	mov	r2, r0
 800a852:	460b      	mov	r3, r1
 800a854:	4630      	mov	r0, r6
 800a856:	4639      	mov	r1, r7
 800a858:	f7f5 fd26 	bl	80002a8 <__aeabi_dsub>
 800a85c:	460f      	mov	r7, r1
 800a85e:	4606      	mov	r6, r0
 800a860:	f7f6 f98a 	bl	8000b78 <__aeabi_d2iz>
 800a864:	9006      	str	r0, [sp, #24]
 800a866:	f7f5 fe6d 	bl	8000544 <__aeabi_i2d>
 800a86a:	4602      	mov	r2, r0
 800a86c:	460b      	mov	r3, r1
 800a86e:	4630      	mov	r0, r6
 800a870:	4639      	mov	r1, r7
 800a872:	f7f5 fd19 	bl	80002a8 <__aeabi_dsub>
 800a876:	f1ba 0f00 	cmp.w	sl, #0
 800a87a:	4606      	mov	r6, r0
 800a87c:	460f      	mov	r7, r1
 800a87e:	dd6c      	ble.n	800a95a <__kernel_rem_pio2+0x242>
 800a880:	1e62      	subs	r2, r4, #1
 800a882:	ab0e      	add	r3, sp, #56	; 0x38
 800a884:	f1ca 0118 	rsb	r1, sl, #24
 800a888:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a88c:	9d06      	ldr	r5, [sp, #24]
 800a88e:	fa40 f301 	asr.w	r3, r0, r1
 800a892:	441d      	add	r5, r3
 800a894:	408b      	lsls	r3, r1
 800a896:	1ac0      	subs	r0, r0, r3
 800a898:	ab0e      	add	r3, sp, #56	; 0x38
 800a89a:	9506      	str	r5, [sp, #24]
 800a89c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a8a0:	f1ca 0317 	rsb	r3, sl, #23
 800a8a4:	fa40 f303 	asr.w	r3, r0, r3
 800a8a8:	9302      	str	r3, [sp, #8]
 800a8aa:	9b02      	ldr	r3, [sp, #8]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	dd62      	ble.n	800a976 <__kernel_rem_pio2+0x25e>
 800a8b0:	9b06      	ldr	r3, [sp, #24]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	9306      	str	r3, [sp, #24]
 800a8b8:	4615      	mov	r5, r2
 800a8ba:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a8be:	4294      	cmp	r4, r2
 800a8c0:	f300 8095 	bgt.w	800a9ee <__kernel_rem_pio2+0x2d6>
 800a8c4:	f1ba 0f00 	cmp.w	sl, #0
 800a8c8:	dd07      	ble.n	800a8da <__kernel_rem_pio2+0x1c2>
 800a8ca:	f1ba 0f01 	cmp.w	sl, #1
 800a8ce:	f000 80a2 	beq.w	800aa16 <__kernel_rem_pio2+0x2fe>
 800a8d2:	f1ba 0f02 	cmp.w	sl, #2
 800a8d6:	f000 80c1 	beq.w	800aa5c <__kernel_rem_pio2+0x344>
 800a8da:	9b02      	ldr	r3, [sp, #8]
 800a8dc:	2b02      	cmp	r3, #2
 800a8de:	d14a      	bne.n	800a976 <__kernel_rem_pio2+0x25e>
 800a8e0:	4632      	mov	r2, r6
 800a8e2:	463b      	mov	r3, r7
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	4958      	ldr	r1, [pc, #352]	; (800aa48 <__kernel_rem_pio2+0x330>)
 800a8e8:	f7f5 fcde 	bl	80002a8 <__aeabi_dsub>
 800a8ec:	4606      	mov	r6, r0
 800a8ee:	460f      	mov	r7, r1
 800a8f0:	2d00      	cmp	r5, #0
 800a8f2:	d040      	beq.n	800a976 <__kernel_rem_pio2+0x25e>
 800a8f4:	4650      	mov	r0, sl
 800a8f6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800aa38 <__kernel_rem_pio2+0x320>
 800a8fa:	f000 fba1 	bl	800b040 <scalbn>
 800a8fe:	4630      	mov	r0, r6
 800a900:	4639      	mov	r1, r7
 800a902:	ec53 2b10 	vmov	r2, r3, d0
 800a906:	f7f5 fccf 	bl	80002a8 <__aeabi_dsub>
 800a90a:	4606      	mov	r6, r0
 800a90c:	460f      	mov	r7, r1
 800a90e:	e032      	b.n	800a976 <__kernel_rem_pio2+0x25e>
 800a910:	2200      	movs	r2, #0
 800a912:	4b4e      	ldr	r3, [pc, #312]	; (800aa4c <__kernel_rem_pio2+0x334>)
 800a914:	4640      	mov	r0, r8
 800a916:	4649      	mov	r1, r9
 800a918:	f7f5 fe7e 	bl	8000618 <__aeabi_dmul>
 800a91c:	f7f6 f92c 	bl	8000b78 <__aeabi_d2iz>
 800a920:	f7f5 fe10 	bl	8000544 <__aeabi_i2d>
 800a924:	2200      	movs	r2, #0
 800a926:	4b4a      	ldr	r3, [pc, #296]	; (800aa50 <__kernel_rem_pio2+0x338>)
 800a928:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a92c:	f7f5 fe74 	bl	8000618 <__aeabi_dmul>
 800a930:	4602      	mov	r2, r0
 800a932:	460b      	mov	r3, r1
 800a934:	4640      	mov	r0, r8
 800a936:	4649      	mov	r1, r9
 800a938:	f7f5 fcb6 	bl	80002a8 <__aeabi_dsub>
 800a93c:	f7f6 f91c 	bl	8000b78 <__aeabi_d2iz>
 800a940:	ab0e      	add	r3, sp, #56	; 0x38
 800a942:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800a946:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800a94a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a94e:	f7f5 fcad 	bl	80002ac <__adddf3>
 800a952:	3501      	adds	r5, #1
 800a954:	4680      	mov	r8, r0
 800a956:	4689      	mov	r9, r1
 800a958:	e75e      	b.n	800a818 <__kernel_rem_pio2+0x100>
 800a95a:	d105      	bne.n	800a968 <__kernel_rem_pio2+0x250>
 800a95c:	1e63      	subs	r3, r4, #1
 800a95e:	aa0e      	add	r2, sp, #56	; 0x38
 800a960:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a964:	15c3      	asrs	r3, r0, #23
 800a966:	e79f      	b.n	800a8a8 <__kernel_rem_pio2+0x190>
 800a968:	2200      	movs	r2, #0
 800a96a:	4b3a      	ldr	r3, [pc, #232]	; (800aa54 <__kernel_rem_pio2+0x33c>)
 800a96c:	f7f6 f8da 	bl	8000b24 <__aeabi_dcmpge>
 800a970:	2800      	cmp	r0, #0
 800a972:	d139      	bne.n	800a9e8 <__kernel_rem_pio2+0x2d0>
 800a974:	9002      	str	r0, [sp, #8]
 800a976:	2200      	movs	r2, #0
 800a978:	2300      	movs	r3, #0
 800a97a:	4630      	mov	r0, r6
 800a97c:	4639      	mov	r1, r7
 800a97e:	f7f6 f8b3 	bl	8000ae8 <__aeabi_dcmpeq>
 800a982:	2800      	cmp	r0, #0
 800a984:	f000 80c7 	beq.w	800ab16 <__kernel_rem_pio2+0x3fe>
 800a988:	1e65      	subs	r5, r4, #1
 800a98a:	462b      	mov	r3, r5
 800a98c:	2200      	movs	r2, #0
 800a98e:	9904      	ldr	r1, [sp, #16]
 800a990:	428b      	cmp	r3, r1
 800a992:	da6a      	bge.n	800aa6a <__kernel_rem_pio2+0x352>
 800a994:	2a00      	cmp	r2, #0
 800a996:	f000 8088 	beq.w	800aaaa <__kernel_rem_pio2+0x392>
 800a99a:	ab0e      	add	r3, sp, #56	; 0x38
 800a99c:	f1aa 0a18 	sub.w	sl, sl, #24
 800a9a0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	f000 80b4 	beq.w	800ab12 <__kernel_rem_pio2+0x3fa>
 800a9aa:	4650      	mov	r0, sl
 800a9ac:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800aa38 <__kernel_rem_pio2+0x320>
 800a9b0:	f000 fb46 	bl	800b040 <scalbn>
 800a9b4:	00ec      	lsls	r4, r5, #3
 800a9b6:	ab72      	add	r3, sp, #456	; 0x1c8
 800a9b8:	191e      	adds	r6, r3, r4
 800a9ba:	ec59 8b10 	vmov	r8, r9, d0
 800a9be:	f106 0a08 	add.w	sl, r6, #8
 800a9c2:	462f      	mov	r7, r5
 800a9c4:	2f00      	cmp	r7, #0
 800a9c6:	f280 80df 	bge.w	800ab88 <__kernel_rem_pio2+0x470>
 800a9ca:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800aa30 <__kernel_rem_pio2+0x318>
 800a9ce:	f04f 0a00 	mov.w	sl, #0
 800a9d2:	eba5 030a 	sub.w	r3, r5, sl
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	f2c0 810a 	blt.w	800abf0 <__kernel_rem_pio2+0x4d8>
 800a9dc:	f8df b078 	ldr.w	fp, [pc, #120]	; 800aa58 <__kernel_rem_pio2+0x340>
 800a9e0:	ec59 8b18 	vmov	r8, r9, d8
 800a9e4:	2700      	movs	r7, #0
 800a9e6:	e0f5      	b.n	800abd4 <__kernel_rem_pio2+0x4bc>
 800a9e8:	2302      	movs	r3, #2
 800a9ea:	9302      	str	r3, [sp, #8]
 800a9ec:	e760      	b.n	800a8b0 <__kernel_rem_pio2+0x198>
 800a9ee:	ab0e      	add	r3, sp, #56	; 0x38
 800a9f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9f4:	b94d      	cbnz	r5, 800aa0a <__kernel_rem_pio2+0x2f2>
 800a9f6:	b12b      	cbz	r3, 800aa04 <__kernel_rem_pio2+0x2ec>
 800a9f8:	a80e      	add	r0, sp, #56	; 0x38
 800a9fa:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a9fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800aa02:	2301      	movs	r3, #1
 800aa04:	3201      	adds	r2, #1
 800aa06:	461d      	mov	r5, r3
 800aa08:	e759      	b.n	800a8be <__kernel_rem_pio2+0x1a6>
 800aa0a:	a80e      	add	r0, sp, #56	; 0x38
 800aa0c:	1acb      	subs	r3, r1, r3
 800aa0e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800aa12:	462b      	mov	r3, r5
 800aa14:	e7f6      	b.n	800aa04 <__kernel_rem_pio2+0x2ec>
 800aa16:	1e62      	subs	r2, r4, #1
 800aa18:	ab0e      	add	r3, sp, #56	; 0x38
 800aa1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa1e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800aa22:	a90e      	add	r1, sp, #56	; 0x38
 800aa24:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800aa28:	e757      	b.n	800a8da <__kernel_rem_pio2+0x1c2>
 800aa2a:	bf00      	nop
 800aa2c:	f3af 8000 	nop.w
	...
 800aa3c:	3ff00000 	.word	0x3ff00000
 800aa40:	0800bd20 	.word	0x0800bd20
 800aa44:	40200000 	.word	0x40200000
 800aa48:	3ff00000 	.word	0x3ff00000
 800aa4c:	3e700000 	.word	0x3e700000
 800aa50:	41700000 	.word	0x41700000
 800aa54:	3fe00000 	.word	0x3fe00000
 800aa58:	0800bce0 	.word	0x0800bce0
 800aa5c:	1e62      	subs	r2, r4, #1
 800aa5e:	ab0e      	add	r3, sp, #56	; 0x38
 800aa60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa64:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800aa68:	e7db      	b.n	800aa22 <__kernel_rem_pio2+0x30a>
 800aa6a:	a90e      	add	r1, sp, #56	; 0x38
 800aa6c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800aa70:	3b01      	subs	r3, #1
 800aa72:	430a      	orrs	r2, r1
 800aa74:	e78b      	b.n	800a98e <__kernel_rem_pio2+0x276>
 800aa76:	3301      	adds	r3, #1
 800aa78:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800aa7c:	2900      	cmp	r1, #0
 800aa7e:	d0fa      	beq.n	800aa76 <__kernel_rem_pio2+0x35e>
 800aa80:	9a08      	ldr	r2, [sp, #32]
 800aa82:	4422      	add	r2, r4
 800aa84:	00d2      	lsls	r2, r2, #3
 800aa86:	a922      	add	r1, sp, #136	; 0x88
 800aa88:	18e3      	adds	r3, r4, r3
 800aa8a:	9206      	str	r2, [sp, #24]
 800aa8c:	440a      	add	r2, r1
 800aa8e:	9302      	str	r3, [sp, #8]
 800aa90:	f10b 0108 	add.w	r1, fp, #8
 800aa94:	f102 0308 	add.w	r3, r2, #8
 800aa98:	1c66      	adds	r6, r4, #1
 800aa9a:	910a      	str	r1, [sp, #40]	; 0x28
 800aa9c:	2500      	movs	r5, #0
 800aa9e:	930d      	str	r3, [sp, #52]	; 0x34
 800aaa0:	9b02      	ldr	r3, [sp, #8]
 800aaa2:	42b3      	cmp	r3, r6
 800aaa4:	da04      	bge.n	800aab0 <__kernel_rem_pio2+0x398>
 800aaa6:	461c      	mov	r4, r3
 800aaa8:	e6a6      	b.n	800a7f8 <__kernel_rem_pio2+0xe0>
 800aaaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aaac:	2301      	movs	r3, #1
 800aaae:	e7e3      	b.n	800aa78 <__kernel_rem_pio2+0x360>
 800aab0:	9b06      	ldr	r3, [sp, #24]
 800aab2:	18ef      	adds	r7, r5, r3
 800aab4:	ab22      	add	r3, sp, #136	; 0x88
 800aab6:	441f      	add	r7, r3
 800aab8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800aabe:	f7f5 fd41 	bl	8000544 <__aeabi_i2d>
 800aac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aac4:	461c      	mov	r4, r3
 800aac6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aac8:	e9c7 0100 	strd	r0, r1, [r7]
 800aacc:	eb03 0b05 	add.w	fp, r3, r5
 800aad0:	2700      	movs	r7, #0
 800aad2:	f04f 0800 	mov.w	r8, #0
 800aad6:	f04f 0900 	mov.w	r9, #0
 800aada:	9b07      	ldr	r3, [sp, #28]
 800aadc:	429f      	cmp	r7, r3
 800aade:	dd08      	ble.n	800aaf2 <__kernel_rem_pio2+0x3da>
 800aae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aae2:	aa72      	add	r2, sp, #456	; 0x1c8
 800aae4:	18eb      	adds	r3, r5, r3
 800aae6:	4413      	add	r3, r2
 800aae8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800aaec:	3601      	adds	r6, #1
 800aaee:	3508      	adds	r5, #8
 800aaf0:	e7d6      	b.n	800aaa0 <__kernel_rem_pio2+0x388>
 800aaf2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800aaf6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800aafa:	f7f5 fd8d 	bl	8000618 <__aeabi_dmul>
 800aafe:	4602      	mov	r2, r0
 800ab00:	460b      	mov	r3, r1
 800ab02:	4640      	mov	r0, r8
 800ab04:	4649      	mov	r1, r9
 800ab06:	f7f5 fbd1 	bl	80002ac <__adddf3>
 800ab0a:	3701      	adds	r7, #1
 800ab0c:	4680      	mov	r8, r0
 800ab0e:	4689      	mov	r9, r1
 800ab10:	e7e3      	b.n	800aada <__kernel_rem_pio2+0x3c2>
 800ab12:	3d01      	subs	r5, #1
 800ab14:	e741      	b.n	800a99a <__kernel_rem_pio2+0x282>
 800ab16:	f1ca 0000 	rsb	r0, sl, #0
 800ab1a:	ec47 6b10 	vmov	d0, r6, r7
 800ab1e:	f000 fa8f 	bl	800b040 <scalbn>
 800ab22:	ec57 6b10 	vmov	r6, r7, d0
 800ab26:	2200      	movs	r2, #0
 800ab28:	4b99      	ldr	r3, [pc, #612]	; (800ad90 <__kernel_rem_pio2+0x678>)
 800ab2a:	ee10 0a10 	vmov	r0, s0
 800ab2e:	4639      	mov	r1, r7
 800ab30:	f7f5 fff8 	bl	8000b24 <__aeabi_dcmpge>
 800ab34:	b1f8      	cbz	r0, 800ab76 <__kernel_rem_pio2+0x45e>
 800ab36:	2200      	movs	r2, #0
 800ab38:	4b96      	ldr	r3, [pc, #600]	; (800ad94 <__kernel_rem_pio2+0x67c>)
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	4639      	mov	r1, r7
 800ab3e:	f7f5 fd6b 	bl	8000618 <__aeabi_dmul>
 800ab42:	f7f6 f819 	bl	8000b78 <__aeabi_d2iz>
 800ab46:	4680      	mov	r8, r0
 800ab48:	f7f5 fcfc 	bl	8000544 <__aeabi_i2d>
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	4b90      	ldr	r3, [pc, #576]	; (800ad90 <__kernel_rem_pio2+0x678>)
 800ab50:	f7f5 fd62 	bl	8000618 <__aeabi_dmul>
 800ab54:	460b      	mov	r3, r1
 800ab56:	4602      	mov	r2, r0
 800ab58:	4639      	mov	r1, r7
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	f7f5 fba4 	bl	80002a8 <__aeabi_dsub>
 800ab60:	f7f6 f80a 	bl	8000b78 <__aeabi_d2iz>
 800ab64:	1c65      	adds	r5, r4, #1
 800ab66:	ab0e      	add	r3, sp, #56	; 0x38
 800ab68:	f10a 0a18 	add.w	sl, sl, #24
 800ab6c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ab70:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ab74:	e719      	b.n	800a9aa <__kernel_rem_pio2+0x292>
 800ab76:	4630      	mov	r0, r6
 800ab78:	4639      	mov	r1, r7
 800ab7a:	f7f5 fffd 	bl	8000b78 <__aeabi_d2iz>
 800ab7e:	ab0e      	add	r3, sp, #56	; 0x38
 800ab80:	4625      	mov	r5, r4
 800ab82:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ab86:	e710      	b.n	800a9aa <__kernel_rem_pio2+0x292>
 800ab88:	ab0e      	add	r3, sp, #56	; 0x38
 800ab8a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800ab8e:	f7f5 fcd9 	bl	8000544 <__aeabi_i2d>
 800ab92:	4642      	mov	r2, r8
 800ab94:	464b      	mov	r3, r9
 800ab96:	f7f5 fd3f 	bl	8000618 <__aeabi_dmul>
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800aba0:	4b7c      	ldr	r3, [pc, #496]	; (800ad94 <__kernel_rem_pio2+0x67c>)
 800aba2:	4640      	mov	r0, r8
 800aba4:	4649      	mov	r1, r9
 800aba6:	f7f5 fd37 	bl	8000618 <__aeabi_dmul>
 800abaa:	3f01      	subs	r7, #1
 800abac:	4680      	mov	r8, r0
 800abae:	4689      	mov	r9, r1
 800abb0:	e708      	b.n	800a9c4 <__kernel_rem_pio2+0x2ac>
 800abb2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800abb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abba:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800abbe:	f7f5 fd2b 	bl	8000618 <__aeabi_dmul>
 800abc2:	4602      	mov	r2, r0
 800abc4:	460b      	mov	r3, r1
 800abc6:	4640      	mov	r0, r8
 800abc8:	4649      	mov	r1, r9
 800abca:	f7f5 fb6f 	bl	80002ac <__adddf3>
 800abce:	3701      	adds	r7, #1
 800abd0:	4680      	mov	r8, r0
 800abd2:	4689      	mov	r9, r1
 800abd4:	9b04      	ldr	r3, [sp, #16]
 800abd6:	429f      	cmp	r7, r3
 800abd8:	dc01      	bgt.n	800abde <__kernel_rem_pio2+0x4c6>
 800abda:	45ba      	cmp	sl, r7
 800abdc:	dae9      	bge.n	800abb2 <__kernel_rem_pio2+0x49a>
 800abde:	ab4a      	add	r3, sp, #296	; 0x128
 800abe0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800abe4:	e9c3 8900 	strd	r8, r9, [r3]
 800abe8:	f10a 0a01 	add.w	sl, sl, #1
 800abec:	3e08      	subs	r6, #8
 800abee:	e6f0      	b.n	800a9d2 <__kernel_rem_pio2+0x2ba>
 800abf0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800abf2:	2b03      	cmp	r3, #3
 800abf4:	d85b      	bhi.n	800acae <__kernel_rem_pio2+0x596>
 800abf6:	e8df f003 	tbb	[pc, r3]
 800abfa:	264a      	.short	0x264a
 800abfc:	0226      	.short	0x0226
 800abfe:	ab9a      	add	r3, sp, #616	; 0x268
 800ac00:	441c      	add	r4, r3
 800ac02:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ac06:	46a2      	mov	sl, r4
 800ac08:	46ab      	mov	fp, r5
 800ac0a:	f1bb 0f00 	cmp.w	fp, #0
 800ac0e:	dc6c      	bgt.n	800acea <__kernel_rem_pio2+0x5d2>
 800ac10:	46a2      	mov	sl, r4
 800ac12:	46ab      	mov	fp, r5
 800ac14:	f1bb 0f01 	cmp.w	fp, #1
 800ac18:	f300 8086 	bgt.w	800ad28 <__kernel_rem_pio2+0x610>
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	2100      	movs	r1, #0
 800ac20:	2d01      	cmp	r5, #1
 800ac22:	f300 80a0 	bgt.w	800ad66 <__kernel_rem_pio2+0x64e>
 800ac26:	9b02      	ldr	r3, [sp, #8]
 800ac28:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800ac2c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	f040 809e 	bne.w	800ad72 <__kernel_rem_pio2+0x65a>
 800ac36:	9b01      	ldr	r3, [sp, #4]
 800ac38:	e9c3 7800 	strd	r7, r8, [r3]
 800ac3c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ac40:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ac44:	e033      	b.n	800acae <__kernel_rem_pio2+0x596>
 800ac46:	3408      	adds	r4, #8
 800ac48:	ab4a      	add	r3, sp, #296	; 0x128
 800ac4a:	441c      	add	r4, r3
 800ac4c:	462e      	mov	r6, r5
 800ac4e:	2000      	movs	r0, #0
 800ac50:	2100      	movs	r1, #0
 800ac52:	2e00      	cmp	r6, #0
 800ac54:	da3a      	bge.n	800accc <__kernel_rem_pio2+0x5b4>
 800ac56:	9b02      	ldr	r3, [sp, #8]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d03d      	beq.n	800acd8 <__kernel_rem_pio2+0x5c0>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac62:	9c01      	ldr	r4, [sp, #4]
 800ac64:	e9c4 2300 	strd	r2, r3, [r4]
 800ac68:	4602      	mov	r2, r0
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800ac70:	f7f5 fb1a 	bl	80002a8 <__aeabi_dsub>
 800ac74:	ae4c      	add	r6, sp, #304	; 0x130
 800ac76:	2401      	movs	r4, #1
 800ac78:	42a5      	cmp	r5, r4
 800ac7a:	da30      	bge.n	800acde <__kernel_rem_pio2+0x5c6>
 800ac7c:	9b02      	ldr	r3, [sp, #8]
 800ac7e:	b113      	cbz	r3, 800ac86 <__kernel_rem_pio2+0x56e>
 800ac80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac84:	4619      	mov	r1, r3
 800ac86:	9b01      	ldr	r3, [sp, #4]
 800ac88:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ac8c:	e00f      	b.n	800acae <__kernel_rem_pio2+0x596>
 800ac8e:	ab9a      	add	r3, sp, #616	; 0x268
 800ac90:	441c      	add	r4, r3
 800ac92:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ac96:	2000      	movs	r0, #0
 800ac98:	2100      	movs	r1, #0
 800ac9a:	2d00      	cmp	r5, #0
 800ac9c:	da10      	bge.n	800acc0 <__kernel_rem_pio2+0x5a8>
 800ac9e:	9b02      	ldr	r3, [sp, #8]
 800aca0:	b113      	cbz	r3, 800aca8 <__kernel_rem_pio2+0x590>
 800aca2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aca6:	4619      	mov	r1, r3
 800aca8:	9b01      	ldr	r3, [sp, #4]
 800acaa:	e9c3 0100 	strd	r0, r1, [r3]
 800acae:	9b06      	ldr	r3, [sp, #24]
 800acb0:	f003 0007 	and.w	r0, r3, #7
 800acb4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800acb8:	ecbd 8b02 	vpop	{d8}
 800acbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acc0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800acc4:	f7f5 faf2 	bl	80002ac <__adddf3>
 800acc8:	3d01      	subs	r5, #1
 800acca:	e7e6      	b.n	800ac9a <__kernel_rem_pio2+0x582>
 800accc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800acd0:	f7f5 faec 	bl	80002ac <__adddf3>
 800acd4:	3e01      	subs	r6, #1
 800acd6:	e7bc      	b.n	800ac52 <__kernel_rem_pio2+0x53a>
 800acd8:	4602      	mov	r2, r0
 800acda:	460b      	mov	r3, r1
 800acdc:	e7c1      	b.n	800ac62 <__kernel_rem_pio2+0x54a>
 800acde:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ace2:	f7f5 fae3 	bl	80002ac <__adddf3>
 800ace6:	3401      	adds	r4, #1
 800ace8:	e7c6      	b.n	800ac78 <__kernel_rem_pio2+0x560>
 800acea:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800acee:	ed3a 7b02 	vldmdb	sl!, {d7}
 800acf2:	4640      	mov	r0, r8
 800acf4:	ec53 2b17 	vmov	r2, r3, d7
 800acf8:	4649      	mov	r1, r9
 800acfa:	ed8d 7b04 	vstr	d7, [sp, #16]
 800acfe:	f7f5 fad5 	bl	80002ac <__adddf3>
 800ad02:	4602      	mov	r2, r0
 800ad04:	460b      	mov	r3, r1
 800ad06:	4606      	mov	r6, r0
 800ad08:	460f      	mov	r7, r1
 800ad0a:	4640      	mov	r0, r8
 800ad0c:	4649      	mov	r1, r9
 800ad0e:	f7f5 facb 	bl	80002a8 <__aeabi_dsub>
 800ad12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad16:	f7f5 fac9 	bl	80002ac <__adddf3>
 800ad1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ad1e:	e9ca 0100 	strd	r0, r1, [sl]
 800ad22:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800ad26:	e770      	b.n	800ac0a <__kernel_rem_pio2+0x4f2>
 800ad28:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800ad2c:	ed3a 7b02 	vldmdb	sl!, {d7}
 800ad30:	4630      	mov	r0, r6
 800ad32:	ec53 2b17 	vmov	r2, r3, d7
 800ad36:	4639      	mov	r1, r7
 800ad38:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ad3c:	f7f5 fab6 	bl	80002ac <__adddf3>
 800ad40:	4602      	mov	r2, r0
 800ad42:	460b      	mov	r3, r1
 800ad44:	4680      	mov	r8, r0
 800ad46:	4689      	mov	r9, r1
 800ad48:	4630      	mov	r0, r6
 800ad4a:	4639      	mov	r1, r7
 800ad4c:	f7f5 faac 	bl	80002a8 <__aeabi_dsub>
 800ad50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad54:	f7f5 faaa 	bl	80002ac <__adddf3>
 800ad58:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ad5c:	e9ca 0100 	strd	r0, r1, [sl]
 800ad60:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800ad64:	e756      	b.n	800ac14 <__kernel_rem_pio2+0x4fc>
 800ad66:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ad6a:	f7f5 fa9f 	bl	80002ac <__adddf3>
 800ad6e:	3d01      	subs	r5, #1
 800ad70:	e756      	b.n	800ac20 <__kernel_rem_pio2+0x508>
 800ad72:	9b01      	ldr	r3, [sp, #4]
 800ad74:	9a01      	ldr	r2, [sp, #4]
 800ad76:	601f      	str	r7, [r3, #0]
 800ad78:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800ad7c:	605c      	str	r4, [r3, #4]
 800ad7e:	609d      	str	r5, [r3, #8]
 800ad80:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ad84:	60d3      	str	r3, [r2, #12]
 800ad86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad8a:	6110      	str	r0, [r2, #16]
 800ad8c:	6153      	str	r3, [r2, #20]
 800ad8e:	e78e      	b.n	800acae <__kernel_rem_pio2+0x596>
 800ad90:	41700000 	.word	0x41700000
 800ad94:	3e700000 	.word	0x3e700000

0800ad98 <__kernel_sin>:
 800ad98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad9c:	ec55 4b10 	vmov	r4, r5, d0
 800ada0:	b085      	sub	sp, #20
 800ada2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ada6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800adaa:	ed8d 1b00 	vstr	d1, [sp]
 800adae:	9002      	str	r0, [sp, #8]
 800adb0:	da06      	bge.n	800adc0 <__kernel_sin+0x28>
 800adb2:	ee10 0a10 	vmov	r0, s0
 800adb6:	4629      	mov	r1, r5
 800adb8:	f7f5 fede 	bl	8000b78 <__aeabi_d2iz>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	d051      	beq.n	800ae64 <__kernel_sin+0xcc>
 800adc0:	4622      	mov	r2, r4
 800adc2:	462b      	mov	r3, r5
 800adc4:	4620      	mov	r0, r4
 800adc6:	4629      	mov	r1, r5
 800adc8:	f7f5 fc26 	bl	8000618 <__aeabi_dmul>
 800adcc:	4682      	mov	sl, r0
 800adce:	468b      	mov	fp, r1
 800add0:	4602      	mov	r2, r0
 800add2:	460b      	mov	r3, r1
 800add4:	4620      	mov	r0, r4
 800add6:	4629      	mov	r1, r5
 800add8:	f7f5 fc1e 	bl	8000618 <__aeabi_dmul>
 800addc:	a341      	add	r3, pc, #260	; (adr r3, 800aee4 <__kernel_sin+0x14c>)
 800adde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade2:	4680      	mov	r8, r0
 800ade4:	4689      	mov	r9, r1
 800ade6:	4650      	mov	r0, sl
 800ade8:	4659      	mov	r1, fp
 800adea:	f7f5 fc15 	bl	8000618 <__aeabi_dmul>
 800adee:	a33f      	add	r3, pc, #252	; (adr r3, 800aeec <__kernel_sin+0x154>)
 800adf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf4:	f7f5 fa58 	bl	80002a8 <__aeabi_dsub>
 800adf8:	4652      	mov	r2, sl
 800adfa:	465b      	mov	r3, fp
 800adfc:	f7f5 fc0c 	bl	8000618 <__aeabi_dmul>
 800ae00:	a33c      	add	r3, pc, #240	; (adr r3, 800aef4 <__kernel_sin+0x15c>)
 800ae02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae06:	f7f5 fa51 	bl	80002ac <__adddf3>
 800ae0a:	4652      	mov	r2, sl
 800ae0c:	465b      	mov	r3, fp
 800ae0e:	f7f5 fc03 	bl	8000618 <__aeabi_dmul>
 800ae12:	a33a      	add	r3, pc, #232	; (adr r3, 800aefc <__kernel_sin+0x164>)
 800ae14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae18:	f7f5 fa46 	bl	80002a8 <__aeabi_dsub>
 800ae1c:	4652      	mov	r2, sl
 800ae1e:	465b      	mov	r3, fp
 800ae20:	f7f5 fbfa 	bl	8000618 <__aeabi_dmul>
 800ae24:	a337      	add	r3, pc, #220	; (adr r3, 800af04 <__kernel_sin+0x16c>)
 800ae26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2a:	f7f5 fa3f 	bl	80002ac <__adddf3>
 800ae2e:	9b02      	ldr	r3, [sp, #8]
 800ae30:	4606      	mov	r6, r0
 800ae32:	460f      	mov	r7, r1
 800ae34:	b9db      	cbnz	r3, 800ae6e <__kernel_sin+0xd6>
 800ae36:	4602      	mov	r2, r0
 800ae38:	460b      	mov	r3, r1
 800ae3a:	4650      	mov	r0, sl
 800ae3c:	4659      	mov	r1, fp
 800ae3e:	f7f5 fbeb 	bl	8000618 <__aeabi_dmul>
 800ae42:	a325      	add	r3, pc, #148	; (adr r3, 800aed8 <__kernel_sin+0x140>)
 800ae44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae48:	f7f5 fa2e 	bl	80002a8 <__aeabi_dsub>
 800ae4c:	4642      	mov	r2, r8
 800ae4e:	464b      	mov	r3, r9
 800ae50:	f7f5 fbe2 	bl	8000618 <__aeabi_dmul>
 800ae54:	4602      	mov	r2, r0
 800ae56:	460b      	mov	r3, r1
 800ae58:	4620      	mov	r0, r4
 800ae5a:	4629      	mov	r1, r5
 800ae5c:	f7f5 fa26 	bl	80002ac <__adddf3>
 800ae60:	4604      	mov	r4, r0
 800ae62:	460d      	mov	r5, r1
 800ae64:	ec45 4b10 	vmov	d0, r4, r5
 800ae68:	b005      	add	sp, #20
 800ae6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae6e:	2200      	movs	r2, #0
 800ae70:	4b1b      	ldr	r3, [pc, #108]	; (800aee0 <__kernel_sin+0x148>)
 800ae72:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae76:	f7f5 fbcf 	bl	8000618 <__aeabi_dmul>
 800ae7a:	4632      	mov	r2, r6
 800ae7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae80:	463b      	mov	r3, r7
 800ae82:	4640      	mov	r0, r8
 800ae84:	4649      	mov	r1, r9
 800ae86:	f7f5 fbc7 	bl	8000618 <__aeabi_dmul>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae92:	f7f5 fa09 	bl	80002a8 <__aeabi_dsub>
 800ae96:	4652      	mov	r2, sl
 800ae98:	465b      	mov	r3, fp
 800ae9a:	f7f5 fbbd 	bl	8000618 <__aeabi_dmul>
 800ae9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aea2:	f7f5 fa01 	bl	80002a8 <__aeabi_dsub>
 800aea6:	a30c      	add	r3, pc, #48	; (adr r3, 800aed8 <__kernel_sin+0x140>)
 800aea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeac:	4606      	mov	r6, r0
 800aeae:	460f      	mov	r7, r1
 800aeb0:	4640      	mov	r0, r8
 800aeb2:	4649      	mov	r1, r9
 800aeb4:	f7f5 fbb0 	bl	8000618 <__aeabi_dmul>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	460b      	mov	r3, r1
 800aebc:	4630      	mov	r0, r6
 800aebe:	4639      	mov	r1, r7
 800aec0:	f7f5 f9f4 	bl	80002ac <__adddf3>
 800aec4:	4602      	mov	r2, r0
 800aec6:	460b      	mov	r3, r1
 800aec8:	4620      	mov	r0, r4
 800aeca:	4629      	mov	r1, r5
 800aecc:	f7f5 f9ec 	bl	80002a8 <__aeabi_dsub>
 800aed0:	e7c6      	b.n	800ae60 <__kernel_sin+0xc8>
 800aed2:	bf00      	nop
 800aed4:	f3af 8000 	nop.w
 800aed8:	55555549 	.word	0x55555549
 800aedc:	3fc55555 	.word	0x3fc55555
 800aee0:	3fe00000 	.word	0x3fe00000
 800aee4:	5acfd57c 	.word	0x5acfd57c
 800aee8:	3de5d93a 	.word	0x3de5d93a
 800aeec:	8a2b9ceb 	.word	0x8a2b9ceb
 800aef0:	3e5ae5e6 	.word	0x3e5ae5e6
 800aef4:	57b1fe7d 	.word	0x57b1fe7d
 800aef8:	3ec71de3 	.word	0x3ec71de3
 800aefc:	19c161d5 	.word	0x19c161d5
 800af00:	3f2a01a0 	.word	0x3f2a01a0
 800af04:	1110f8a6 	.word	0x1110f8a6
 800af08:	3f811111 	.word	0x3f811111

0800af0c <fabs>:
 800af0c:	ec51 0b10 	vmov	r0, r1, d0
 800af10:	ee10 2a10 	vmov	r2, s0
 800af14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800af18:	ec43 2b10 	vmov	d0, r2, r3
 800af1c:	4770      	bx	lr
	...

0800af20 <floor>:
 800af20:	ec51 0b10 	vmov	r0, r1, d0
 800af24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af28:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800af2c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800af30:	2e13      	cmp	r6, #19
 800af32:	460c      	mov	r4, r1
 800af34:	ee10 5a10 	vmov	r5, s0
 800af38:	4680      	mov	r8, r0
 800af3a:	dc34      	bgt.n	800afa6 <floor+0x86>
 800af3c:	2e00      	cmp	r6, #0
 800af3e:	da16      	bge.n	800af6e <floor+0x4e>
 800af40:	a335      	add	r3, pc, #212	; (adr r3, 800b018 <floor+0xf8>)
 800af42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af46:	f7f5 f9b1 	bl	80002ac <__adddf3>
 800af4a:	2200      	movs	r2, #0
 800af4c:	2300      	movs	r3, #0
 800af4e:	f7f5 fdf3 	bl	8000b38 <__aeabi_dcmpgt>
 800af52:	b148      	cbz	r0, 800af68 <floor+0x48>
 800af54:	2c00      	cmp	r4, #0
 800af56:	da59      	bge.n	800b00c <floor+0xec>
 800af58:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800af5c:	4a30      	ldr	r2, [pc, #192]	; (800b020 <floor+0x100>)
 800af5e:	432b      	orrs	r3, r5
 800af60:	2500      	movs	r5, #0
 800af62:	42ab      	cmp	r3, r5
 800af64:	bf18      	it	ne
 800af66:	4614      	movne	r4, r2
 800af68:	4621      	mov	r1, r4
 800af6a:	4628      	mov	r0, r5
 800af6c:	e025      	b.n	800afba <floor+0x9a>
 800af6e:	4f2d      	ldr	r7, [pc, #180]	; (800b024 <floor+0x104>)
 800af70:	4137      	asrs	r7, r6
 800af72:	ea01 0307 	and.w	r3, r1, r7
 800af76:	4303      	orrs	r3, r0
 800af78:	d01f      	beq.n	800afba <floor+0x9a>
 800af7a:	a327      	add	r3, pc, #156	; (adr r3, 800b018 <floor+0xf8>)
 800af7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af80:	f7f5 f994 	bl	80002ac <__adddf3>
 800af84:	2200      	movs	r2, #0
 800af86:	2300      	movs	r3, #0
 800af88:	f7f5 fdd6 	bl	8000b38 <__aeabi_dcmpgt>
 800af8c:	2800      	cmp	r0, #0
 800af8e:	d0eb      	beq.n	800af68 <floor+0x48>
 800af90:	2c00      	cmp	r4, #0
 800af92:	bfbe      	ittt	lt
 800af94:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800af98:	fa43 f606 	asrlt.w	r6, r3, r6
 800af9c:	19a4      	addlt	r4, r4, r6
 800af9e:	ea24 0407 	bic.w	r4, r4, r7
 800afa2:	2500      	movs	r5, #0
 800afa4:	e7e0      	b.n	800af68 <floor+0x48>
 800afa6:	2e33      	cmp	r6, #51	; 0x33
 800afa8:	dd0b      	ble.n	800afc2 <floor+0xa2>
 800afaa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800afae:	d104      	bne.n	800afba <floor+0x9a>
 800afb0:	ee10 2a10 	vmov	r2, s0
 800afb4:	460b      	mov	r3, r1
 800afb6:	f7f5 f979 	bl	80002ac <__adddf3>
 800afba:	ec41 0b10 	vmov	d0, r0, r1
 800afbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afc2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800afc6:	f04f 33ff 	mov.w	r3, #4294967295
 800afca:	fa23 f707 	lsr.w	r7, r3, r7
 800afce:	4207      	tst	r7, r0
 800afd0:	d0f3      	beq.n	800afba <floor+0x9a>
 800afd2:	a311      	add	r3, pc, #68	; (adr r3, 800b018 <floor+0xf8>)
 800afd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd8:	f7f5 f968 	bl	80002ac <__adddf3>
 800afdc:	2200      	movs	r2, #0
 800afde:	2300      	movs	r3, #0
 800afe0:	f7f5 fdaa 	bl	8000b38 <__aeabi_dcmpgt>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	d0bf      	beq.n	800af68 <floor+0x48>
 800afe8:	2c00      	cmp	r4, #0
 800afea:	da02      	bge.n	800aff2 <floor+0xd2>
 800afec:	2e14      	cmp	r6, #20
 800afee:	d103      	bne.n	800aff8 <floor+0xd8>
 800aff0:	3401      	adds	r4, #1
 800aff2:	ea25 0507 	bic.w	r5, r5, r7
 800aff6:	e7b7      	b.n	800af68 <floor+0x48>
 800aff8:	2301      	movs	r3, #1
 800affa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800affe:	fa03 f606 	lsl.w	r6, r3, r6
 800b002:	4435      	add	r5, r6
 800b004:	4545      	cmp	r5, r8
 800b006:	bf38      	it	cc
 800b008:	18e4      	addcc	r4, r4, r3
 800b00a:	e7f2      	b.n	800aff2 <floor+0xd2>
 800b00c:	2500      	movs	r5, #0
 800b00e:	462c      	mov	r4, r5
 800b010:	e7aa      	b.n	800af68 <floor+0x48>
 800b012:	bf00      	nop
 800b014:	f3af 8000 	nop.w
 800b018:	8800759c 	.word	0x8800759c
 800b01c:	7e37e43c 	.word	0x7e37e43c
 800b020:	bff00000 	.word	0xbff00000
 800b024:	000fffff 	.word	0x000fffff

0800b028 <matherr>:
 800b028:	2000      	movs	r0, #0
 800b02a:	4770      	bx	lr
 800b02c:	0000      	movs	r0, r0
	...

0800b030 <nan>:
 800b030:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b038 <nan+0x8>
 800b034:	4770      	bx	lr
 800b036:	bf00      	nop
 800b038:	00000000 	.word	0x00000000
 800b03c:	7ff80000 	.word	0x7ff80000

0800b040 <scalbn>:
 800b040:	b570      	push	{r4, r5, r6, lr}
 800b042:	ec55 4b10 	vmov	r4, r5, d0
 800b046:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b04a:	4606      	mov	r6, r0
 800b04c:	462b      	mov	r3, r5
 800b04e:	b9aa      	cbnz	r2, 800b07c <scalbn+0x3c>
 800b050:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b054:	4323      	orrs	r3, r4
 800b056:	d03b      	beq.n	800b0d0 <scalbn+0x90>
 800b058:	4b31      	ldr	r3, [pc, #196]	; (800b120 <scalbn+0xe0>)
 800b05a:	4629      	mov	r1, r5
 800b05c:	2200      	movs	r2, #0
 800b05e:	ee10 0a10 	vmov	r0, s0
 800b062:	f7f5 fad9 	bl	8000618 <__aeabi_dmul>
 800b066:	4b2f      	ldr	r3, [pc, #188]	; (800b124 <scalbn+0xe4>)
 800b068:	429e      	cmp	r6, r3
 800b06a:	4604      	mov	r4, r0
 800b06c:	460d      	mov	r5, r1
 800b06e:	da12      	bge.n	800b096 <scalbn+0x56>
 800b070:	a327      	add	r3, pc, #156	; (adr r3, 800b110 <scalbn+0xd0>)
 800b072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b076:	f7f5 facf 	bl	8000618 <__aeabi_dmul>
 800b07a:	e009      	b.n	800b090 <scalbn+0x50>
 800b07c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b080:	428a      	cmp	r2, r1
 800b082:	d10c      	bne.n	800b09e <scalbn+0x5e>
 800b084:	ee10 2a10 	vmov	r2, s0
 800b088:	4620      	mov	r0, r4
 800b08a:	4629      	mov	r1, r5
 800b08c:	f7f5 f90e 	bl	80002ac <__adddf3>
 800b090:	4604      	mov	r4, r0
 800b092:	460d      	mov	r5, r1
 800b094:	e01c      	b.n	800b0d0 <scalbn+0x90>
 800b096:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b09a:	460b      	mov	r3, r1
 800b09c:	3a36      	subs	r2, #54	; 0x36
 800b09e:	4432      	add	r2, r6
 800b0a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b0a4:	428a      	cmp	r2, r1
 800b0a6:	dd0b      	ble.n	800b0c0 <scalbn+0x80>
 800b0a8:	ec45 4b11 	vmov	d1, r4, r5
 800b0ac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800b118 <scalbn+0xd8>
 800b0b0:	f000 f83c 	bl	800b12c <copysign>
 800b0b4:	a318      	add	r3, pc, #96	; (adr r3, 800b118 <scalbn+0xd8>)
 800b0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ba:	ec51 0b10 	vmov	r0, r1, d0
 800b0be:	e7da      	b.n	800b076 <scalbn+0x36>
 800b0c0:	2a00      	cmp	r2, #0
 800b0c2:	dd08      	ble.n	800b0d6 <scalbn+0x96>
 800b0c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b0c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b0cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b0d0:	ec45 4b10 	vmov	d0, r4, r5
 800b0d4:	bd70      	pop	{r4, r5, r6, pc}
 800b0d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b0da:	da0d      	bge.n	800b0f8 <scalbn+0xb8>
 800b0dc:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b0e0:	429e      	cmp	r6, r3
 800b0e2:	ec45 4b11 	vmov	d1, r4, r5
 800b0e6:	dce1      	bgt.n	800b0ac <scalbn+0x6c>
 800b0e8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800b110 <scalbn+0xd0>
 800b0ec:	f000 f81e 	bl	800b12c <copysign>
 800b0f0:	a307      	add	r3, pc, #28	; (adr r3, 800b110 <scalbn+0xd0>)
 800b0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f6:	e7e0      	b.n	800b0ba <scalbn+0x7a>
 800b0f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b0fc:	3236      	adds	r2, #54	; 0x36
 800b0fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b102:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b106:	4620      	mov	r0, r4
 800b108:	4629      	mov	r1, r5
 800b10a:	2200      	movs	r2, #0
 800b10c:	4b06      	ldr	r3, [pc, #24]	; (800b128 <scalbn+0xe8>)
 800b10e:	e7b2      	b.n	800b076 <scalbn+0x36>
 800b110:	c2f8f359 	.word	0xc2f8f359
 800b114:	01a56e1f 	.word	0x01a56e1f
 800b118:	8800759c 	.word	0x8800759c
 800b11c:	7e37e43c 	.word	0x7e37e43c
 800b120:	43500000 	.word	0x43500000
 800b124:	ffff3cb0 	.word	0xffff3cb0
 800b128:	3c900000 	.word	0x3c900000

0800b12c <copysign>:
 800b12c:	ec51 0b10 	vmov	r0, r1, d0
 800b130:	ee11 0a90 	vmov	r0, s3
 800b134:	ee10 2a10 	vmov	r2, s0
 800b138:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b13c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800b140:	ea41 0300 	orr.w	r3, r1, r0
 800b144:	ec43 2b10 	vmov	d0, r2, r3
 800b148:	4770      	bx	lr
	...

0800b14c <_init>:
 800b14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b14e:	bf00      	nop
 800b150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b152:	bc08      	pop	{r3}
 800b154:	469e      	mov	lr, r3
 800b156:	4770      	bx	lr

0800b158 <_fini>:
 800b158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b15a:	bf00      	nop
 800b15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b15e:	bc08      	pop	{r3}
 800b160:	469e      	mov	lr, r3
 800b162:	4770      	bx	lr
